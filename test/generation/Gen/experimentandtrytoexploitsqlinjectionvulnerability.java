import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;


// After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.

public class experimentandtrytoexploitsqlinjectionvulnerability {
@Given("prepare to Experiment and try to exploit SQL Injection vulnerability")
public void preexperimentandtrytoexploitsqlinjectionvulnerability(){
// None
// User-controllable input that is not properly validated by the application as part of SQL queries.
}
@When("Try to Experiment and try to exploit SQL Injection vulnerability")
public void tryexperimentandtrytoexploitsqlinjectionvulnerability(){
//  Try one of the following techniques :
   //1.  Use public resources such as "SQL Injection Cheat Sheet" at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries.
   //2.  Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : "' OR 1=1; --", or something else that would syntactically complete a hypothesized query. Iteratively refine the query.
   //3.  Use "Blind SQL Injection" techniques to extract information about the database schema.
   //4.  If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: "'; DROP TABLE SYSOBJECTS; --" and "'); DROP TABLE SYSOBJECTS; --". These particular queries will likely not work because the SYSOBJECTS table is generally protected.
}@Then("Assert the success of Experiment and try to exploit SQL Injection vulnerability")
public void assexperimentandtrytoexploitsqlinjectionvulnerability(){
//  Assert one of the following indications :
   //  -Attacker achieves goal of unauthorized system access, denial of service, etc.
}
}