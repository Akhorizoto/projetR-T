package steps;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import net.continuumsecurity.proxy.ZAProxyScanner;


// The attacker probes all user-controllable data inputs to the system to probe for any cross-site scripting vulnerabilities. Cross-site scripting vulnerabilities identified anywhere in the application indicate an increased potential that such vulnerabilities may exist in the log management portions of the application.

public class probeforcrosssitescriptingvulnerability {
@Given("prepare to Probe for cross-site scripting vulnerability")
public void preprobeforcrosssitescriptingvulnerability(){
// No specialized hardware is required
// The web based log interface does not HTML output encode the log data prior to displaying it in the administrator console.
	ZAProxyScanner j = new ZAProxyScanner("localhost", 8080, "zap");
	j.deleteAlerts();
	j.disableAllScanners();
	j.setEnableScanners("40012,40014,40016,40017", true);
}
@When("Try to Probe for cross-site scripting vulnerability")
public void tryprobeforcrosssitescriptingvulnerability(){
//  Try one of the following techniques :
   //.  
	String url = "http://192.168.83.227:8080/";
	ZAProxyScanner j = new ZAProxyScanner("localhost", 8080, "zap");
	
    j.scan(url);
    int complete = 0;
    int scanId = j.getLastScannerScanId();
    while (complete < 100) {
        complete = j.getScanProgress(scanId);
        
        try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
}@Then("Assert the success of Probe for cross-site scripting vulnerability")
public void assprobeforcrosssitescriptingvulnerability(){
//  Assert one of the following indications :
   //  -Attacker-injected script is executed in user's browser.
	ZAProxyScanner j = new ZAProxyScanner("localhost", 8080, "zap");
	int x = j.getAlertsCount();
	assert(x>0);
}
}