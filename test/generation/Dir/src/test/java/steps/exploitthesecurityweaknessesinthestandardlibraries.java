package steps;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;


// The attacker calls signed malicious code from another language to exploit the security weaknesses in the standard libraries verified in the Experiment phase. The attacker will be able to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox.

public class exploitthesecurityweaknessesinthestandardlibraries {
@Given("prepare to Exploit the security weaknesses in the standard libraries")
public void preexploitthesecurityweaknessesinthestandardlibraries(){
// No special resource is required.
// A framework-based language that supports code signing and sandbox (such as Java, .Net, JavaScript, and Flash) Deployed code that has been signed by its authoring vendor, or a partner
}
@When("Try to Exploit the security weaknesses in the standard libraries")
public void tryexploitthesecurityweaknessesinthestandardlibraries(){
//  Try one of the following techniques :
   //1.  The attacker calls signed malicious code from another language to exploit the security weaknesses in the standard libraries.
}@Then("Assert the success of Exploit the security weaknesses in the standard libraries")
public void assexploitthesecurityweaknessesinthestandardlibraries(){
//  Assert one of the following indications :
   //  -The attacker escapes the sandbox to obtain access to privileges that were not intentionally exposed by the sandbox.
}
}