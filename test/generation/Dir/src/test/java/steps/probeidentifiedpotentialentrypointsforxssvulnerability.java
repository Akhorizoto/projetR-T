package steps;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import net.continuumsecurity.proxy.ZAProxyScanner;


// The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.

public class probeidentifiedpotentialentrypointsforxssvulnerability {
@Given("prepare to Probe identified potential entry points for XSS vulnerability")
public void preprobeidentifiedpotentialentrypointsforxssvulnerability(){
// None
// Application permitting the inclusion or use of IMG tags
	ZAProxyScanner j = new ZAProxyScanner("localhost", 8080, "zap");
	j.deleteAlerts();
	j.disableAllScanners();
	j.setEnableScanners("40012,40014,40016,40017", true);
}
@When("Try to Probe identified potential entry points for XSS vulnerability")
public void tryprobeidentifiedpotentialentrypointsforxssvulnerability(){
//  Try one of the following techniques :
   //1.  Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed.
   //2.  Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed.
   //3.  Use a proxy tool to record results of the created requests.
	String url = "http://192.168.83.227:8080/";
	ZAProxyScanner j = new ZAProxyScanner("localhost", 8080, "zap");
	
    j.scan(url);
    int complete = 0;
    int scanId = j.getLastScannerScanId();
    while (complete < 100) {
        complete = j.getScanProgress(scanId);
        
        try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
}@Then("Assert the success of Probe identified potential entry points for XSS vulnerability")
public void assprobeidentifiedpotentialentrypointsforxssvulnerability(){
//  Assert one of the following indications :
   //  -The attacker's script string is being reflected verbatim at some point in the web site (if not on the same page). Note that sometimes, the payload might be well encoded in the page, but wouldn't be encoded at all in some other section of the same web page (title, etc.)
    //  -Output to the browser is not encoded to remove executable scripting syntax.
	ZAProxyScanner j = new ZAProxyScanner("localhost", 8080, "zap");
	int x = j.getAlertsCount();
	assert(x>0);
}
}