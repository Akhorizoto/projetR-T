package steps;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;


// After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.

public class trytoexploittheformatstringinjectionvulnerability {
@Given("prepare to Try to exploit the Format String Injection vulnerability")
public void pretrytoexploittheformatstringinjectionvulnerability(){
// No special resources are required beyond the ability to provide string input to the target.
// The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.
}
@When("Try to Try to exploit the Format String Injection vulnerability")
public void trytrytoexploittheformatstringinjectionvulnerability(){
//  Try one of the following techniques :
   //1.  Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc.
}@Then("Assert the success of Try to exploit the Format String Injection vulnerability")
public void asstrytoexploittheformatstringinjectionvulnerability(){
//  Assert one of the following indications :
   //  -Attacker achieves goal of reading or writing the memory, manipulating the formatting string
}
}