package steps;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;


// Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.

public class craftexploitpayloads {
@Given("prepare to Craft exploit payloads")
public void precraftexploitpayloads(){
// Fuzzing tools.
// 
}
@When("Try to Craft exploit payloads")
public void trycraftexploitpayloads(){
//  Try one of the following techniques :
   //1.  Identify and embed shell code for the target system.
   //2.  Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.)
   //3.  Induce denial of service by exploiting resource leaks or bad error handling.
}@Then("Assert the success of Craft exploit payloads")
public void asscraftexploitpayloads(){
//  Assert one of the following indications :
}
}