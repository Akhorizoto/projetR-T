package steps;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;


// After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.

public class trytoexploittheldapinjectionvulnerability {
@Given("prepare to Try to exploit the LDAP injection vulnerability")
public void pretrytoexploittheldapinjectionvulnerability(){
// 
// The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.
}
@When("Try to Try to exploit the LDAP injection vulnerability")
public void trytrytoexploittheldapinjectionvulnerability(){
//  Try one of the following techniques :
   //1.  Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings.
   //2.  Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.
}@Then("Assert the success of Try to exploit the LDAP injection vulnerability")
public void asstrytoexploittheldapinjectionvulnerability(){
//  Assert one of the following indications :
   //  -Attacker achieves goal of unauthorized information access, etc.
}
}