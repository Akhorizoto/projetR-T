package steps;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;


// The attacker tries to craft malicious signed code from another language allowed by the sandbox to verify the security weaknesses of the standard libraries found in the Explore phase.

public class verifytheexploitablesecurityweaknesses {
@Given("prepare to Verify the exploitable security weaknesses")
public void preverifytheexploitablesecurityweaknesses(){
// No special resource is required.
// A framework-based language that supports code signing and sandbox (such as Java, .Net, JavaScript, and Flash) Deployed code that has been signed by its authoring vendor, or a partner
}
@When("Try to Verify the exploitable security weaknesses")
public void tryverifytheexploitablesecurityweaknesses(){
//  Try one of the following techniques :
   //1.  The attacker tries to explore the security weaknesses by calling malicious signed code from another language allowed by the sandbox.
}@Then("Assert the success of Verify the exploitable security weaknesses")
public void assverifytheexploitablesecurityweaknesses(){
//  Assert one of the following indications :
   //  -The attacker identifies a list exploitable security weaknesses in the standard libraries.
}
}