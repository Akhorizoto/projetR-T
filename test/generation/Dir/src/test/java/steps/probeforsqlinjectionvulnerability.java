package steps;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import net.continuumsecurity.proxy.ZAProxyScanner;


// The attacker injects SQL syntax into vulnerable SOAP parameters identified during the Explore phase to search for unfiltered execution of the SQL syntax in a query.

public class probeforsqlinjectionvulnerability {
@Given("prepare to Probe for SQL Injection vulnerability")
public void preprobeforsqlinjectionvulnerability(){
// No specialized hardware resources are required
// The service provider does not properly utilize parameter binding when building SQL queries
	
	ZAProxyScanner j = new ZAProxyScanner("localhost", 8080, "zap");
	j.deleteAlerts();
	j.disableAllScanners();
	j.setEnableScanners("40018,90018", true);
}
@When("Try to Probe for SQL Injection vulnerability")
public void tryprobeforsqlinjectionvulnerability(){
//  Try one of the following techniques :
   //.  
	String url = "http://192.168.83.227:8080/";
	ZAProxyScanner j = new ZAProxyScanner("localhost", 8080, "zap");
	
    j.scan(url);
    int complete = 0;
    int scanId = j.getLastScannerScanId();
    while (complete < 100) {
        complete = j.getScanProgress(scanId);
        
        try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
}@Then("Assert the success of Probe for SQL Injection vulnerability")
public void assprobeforsqlinjectionvulnerability(){
//  Assert one of the following indications :
   //  -At least one SOAP parameter susceptible to injection found.
	ZAProxyScanner j = new ZAProxyScanner("localhost", 8080, "zap");
	int x = j.getAlertsCount();
	assert(x>0);
}
}