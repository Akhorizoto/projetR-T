[
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-100:-overflow-buffers;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-100: Overflow Buffers",
    "description": "",
    "id": "capec-100:-overflow-buffers",
    "keyword": "Feature",
    "uri": "CAPEC_100_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec100"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-100:-overflow-buffers;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-100: Overflow Buffers",
    "description": "",
    "id": "capec-100:-overflow-buffers",
    "keyword": "Feature",
    "uri": "CAPEC_100_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec100"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-100:-overflow-buffers;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-100: Overflow Buffers",
    "description": "",
    "id": "capec-100:-overflow-buffers",
    "keyword": "Feature",
    "uri": "CAPEC_100_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec100"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Determine applicability",
        "description": "",
        "id": "capec-101:-server-side-include-(ssi)-injection;step1.1-determine-applicability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 93580522,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine applicability",
            "match": {
              "location": "determineapplicability.predetermineapplicability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 28549,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine applicability",
            "match": {
              "location": "determineapplicability.trydetermineapplicability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 27733,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine applicability",
            "match": {
              "location": "determineapplicability.assdetermineapplicability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-101: Server Side Include (SSI) Injection",
    "description": "",
    "id": "capec-101:-server-side-include-(ssi)-injection",
    "keyword": "Feature",
    "uri": "CAPEC_101_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec101"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Attempt SSI",
        "description": "",
        "id": "capec-101:-server-side-include-(ssi)-injection;step1.2-attempt-ssi",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 26411253,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptssi.preattemptssi(attemptssi.java:17)\n\tat ✽.Given prepare to Attempt SSI(CAPEC_101_Step_1_2.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptssi.preattemptssi(attemptssi.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Attempt SSI",
            "match": {
              "location": "attemptssi.preattemptssi()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Attempt SSI",
            "match": {
              "location": "attemptssi.tryattemptssi()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attempt SSI",
            "match": {
              "location": "attemptssi.assattemptssi()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-101: Server Side Include (SSI) Injection",
    "description": "",
    "id": "capec-101:-server-side-include-(ssi)-injection",
    "keyword": "Feature",
    "uri": "CAPEC_101_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec101"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.3 Inject SSI",
        "description": "",
        "id": "capec-101:-server-side-include-(ssi)-injection;step1.3-inject-ssi",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 51193,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Inject SSI",
            "match": {
              "location": "injectssi.preinjectssi()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12352,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Inject SSI",
            "match": {
              "location": "injectssi.tryinjectssi()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12836,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Inject SSI",
            "match": {
              "location": "injectssi.assinjectssi()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-101: Server Side Include (SSI) Injection",
    "description": "",
    "id": "capec-101:-server-side-include-(ssi)-injection",
    "keyword": "Feature",
    "uri": "CAPEC_101_Step_1_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec101"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Detect Unprotected Session Token Transfer",
        "description": "",
        "id": "capec-102:-session-sidejacking;step1.1-detect-unprotected-session-token-transfer",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 65310,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Detect Unprotected Session Token Transfer",
            "match": {
              "location": "detectunprotectedsessiontokentransfer.predetectunprotectedsessiontokentransfer()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 17513,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Detect Unprotected Session Token Transfer",
            "match": {
              "location": "detectunprotectedsessiontokentransfer.trydetectunprotectedsessiontokentransfer()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 33095,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Detect Unprotected Session Token Transfer",
            "match": {
              "location": "detectunprotectedsessiontokentransfer.assdetectunprotectedsessiontokentransfer()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-102: Session Sidejacking",
    "description": "",
    "id": "capec-102:-session-sidejacking",
    "keyword": "Feature",
    "uri": "CAPEC_102_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec102"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Capture session token",
        "description": "",
        "id": "capec-102:-session-sidejacking;step2.1-capture-session-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2268010,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.capturesessiontoken.precapturesessiontoken(capturesessiontoken.java:25)\n\tat ✽.Given prepare to Capture session token(CAPEC_102_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.capturesessiontoken.precapturesessiontoken(capturesessiontoken.java:25)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Capture session token",
            "match": {
              "location": "capturesessiontoken.precapturesessiontoken()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Capture session token",
            "match": {
              "location": "capturesessiontoken.trycapturesessiontoken()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Capture session token",
            "match": {
              "location": "capturesessiontoken.asscapturesessiontoken()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-102: Session Sidejacking",
    "description": "",
    "id": "capec-102:-session-sidejacking",
    "keyword": "Feature",
    "uri": "CAPEC_102_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec102"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.2 Insert captured session token",
        "description": "",
        "id": "capec-102:-session-sidejacking;step2.2-insert-captured-session-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 72554,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Insert captured session token",
            "match": {
              "location": "insertcapturedsessiontoken.preinsertcapturedsessiontoken()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 19566,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Insert captured session token",
            "match": {
              "location": "insertcapturedsessiontoken.tryinsertcapturedsessiontoken()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17710,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Insert captured session token",
            "match": {
              "location": "insertcapturedsessiontoken.assinsertcapturedsessiontoken()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-102: Session Sidejacking",
    "description": "",
    "id": "capec-102:-session-sidejacking",
    "keyword": "Feature",
    "uri": "CAPEC_102_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec102"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Session Token Exploitation",
        "description": "",
        "id": "capec-102:-session-sidejacking;step3.1-session-token-exploitation",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 76848,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Session Token Exploitation",
            "match": {
              "location": "sessiontokenexploitation.presessiontokenexploitation()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 16968,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Session Token Exploitation",
            "match": {
              "location": "sessiontokenexploitation.trysessiontokenexploitation()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 14239,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Session Token Exploitation",
            "match": {
              "location": "sessiontokenexploitation.asssessiontokenexploitation()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 40983,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-102: Session Sidejacking",
    "description": "",
    "id": "capec-102:-session-sidejacking",
    "keyword": "Feature",
    "uri": "CAPEC_102_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec102"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Experiment"
          }
        ],
        "line": 4,
        "name": "Step1.1 Craft a clickjacking page",
        "description": "",
        "id": "capec-103:-clickjacking;step1.1-craft-a-clickjacking-page",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 72611,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Craft a clickjacking page",
            "match": {
              "location": "craftaclickjackingpage.precraftaclickjackingpage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 15399,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Craft a clickjacking page",
            "match": {
              "location": "craftaclickjackingpage.trycraftaclickjackingpage()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 22472,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Craft a clickjacking page",
            "match": {
              "location": "craftaclickjackingpage.asscraftaclickjackingpage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 26764,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23426,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-103: Clickjacking",
    "description": "",
    "id": "capec-103:-clickjacking",
    "keyword": "Feature",
    "uri": "CAPEC_103_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec103"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attacker lures victim to clickjacking page",
        "description": "",
        "id": "capec-103:-clickjacking;step2.1-attacker-lures-victim-to-clickjacking-page",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 63363,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Attacker lures victim to clickjacking page",
            "match": {
              "location": "attackerluresvictimtoclickjackingpage.preattackerluresvictimtoclickjackingpage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10290,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Attacker lures victim to clickjacking page",
            "match": {
              "location": "attackerluresvictimtoclickjackingpage.tryattackerluresvictimtoclickjackingpage()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9676,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attacker lures victim to clickjacking page",
            "match": {
              "location": "attackerluresvictimtoclickjackingpage.assattackerluresvictimtoclickjackingpage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-103: Clickjacking",
    "description": "",
    "id": "capec-103:-clickjacking",
    "keyword": "Feature",
    "uri": "CAPEC_103_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec103"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.2 Trick victim into interacting with the clickjacking page in the desired manner",
        "description": "",
        "id": "capec-103:-clickjacking;step2.2-trick-victim-into-interacting-with-the-clickjacking-page-in-the-desired-manner",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 77848,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Trick victim into interacting with the clickjacking page in the desired manner",
            "match": {
              "location": "trickvictimintointeractingwiththeclickjackingpageinthedesiredmanner.pretrickvictimintointeractingwiththeclickjackingpageinthedesiredmanner()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 22532,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Trick victim into interacting with the clickjacking page in the desired manner",
            "match": {
              "location": "trickvictimintointeractingwiththeclickjackingpageinthedesiredmanner.trytrickvictimintointeractingwiththeclickjackingpageinthedesiredmanner()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 18304,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Trick victim into interacting with the clickjacking page in the desired manner",
            "match": {
              "location": "trickvictimintointeractingwiththeclickjackingpageinthedesiredmanner.asstrickvictimintointeractingwiththeclickjackingpageinthedesiredmanner()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-103: Clickjacking",
    "description": "",
    "id": "capec-103:-clickjacking",
    "keyword": "Feature",
    "uri": "CAPEC_103_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec103"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Find systems susceptible to the attack",
        "description": "",
        "id": "capec-104:-cross-zone-scripting;step1.1-find-systems-susceptible-to-the-attack",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 71895,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Find systems susceptible to the attack",
            "match": {
              "location": "findsystemssusceptibletotheattack.prefindsystemssusceptibletotheattack()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 22888,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Find systems susceptible to the attack",
            "match": {
              "location": "findsystemssusceptibletotheattack.tryfindsystemssusceptibletotheattack()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 18396,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Find systems susceptible to the attack",
            "match": {
              "location": "findsystemssusceptibletotheattack.assfindsystemssusceptibletotheattack()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-104: Cross Zone Scripting",
    "description": "",
    "id": "capec-104:-cross-zone-scripting",
    "keyword": "Feature",
    "uri": "CAPEC_104_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec104"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Find the insertion point for the payload",
        "description": "",
        "id": "capec-104:-cross-zone-scripting;step2.1-find-the-insertion-point-for-the-payload",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 84842,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Find the insertion point for the payload",
            "match": {
              "location": "findtheinsertionpointforthepayload.prefindtheinsertionpointforthepayload()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 17125,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Find the insertion point for the payload",
            "match": {
              "location": "findtheinsertionpointforthepayload.tryfindtheinsertionpointforthepayload()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 39912,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Find the insertion point for the payload",
            "match": {
              "location": "findtheinsertionpointforthepayload.assfindtheinsertionpointforthepayload()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-104: Cross Zone Scripting",
    "description": "",
    "id": "capec-104:-cross-zone-scripting",
    "keyword": "Feature",
    "uri": "CAPEC_104_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec104"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Craft and inject the payload",
        "description": "",
        "id": "capec-104:-cross-zone-scripting;step3.1-craft-and-inject-the-payload",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 103405,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Craft and inject the payload",
            "match": {
              "location": "craftandinjectthepayload.precraftandinjectthepayload()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33198,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Craft and inject the payload",
            "match": {
              "location": "craftandinjectthepayload.trycraftandinjectthepayload()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 20699,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Craft and inject the payload",
            "match": {
              "location": "craftandinjectthepayload.asscraftandinjectthepayload()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-104: Cross Zone Scripting",
    "description": "",
    "id": "capec-104:-cross-zone-scripting",
    "keyword": "Feature",
    "uri": "CAPEC_104_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec104"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Investigate Target Environment",
        "description": "",
        "id": "capec-105:-http-request-splitting;step1.1-investigate-target-environment",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 96231,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Investigate Target Environment",
            "match": {
              "location": "investigatetargetenvironment.preinvestigatetargetenvironment()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 19154,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Investigate Target Environment",
            "match": {
              "location": "investigatetargetenvironment.tryinvestigatetargetenvironment()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16263,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Investigate Target Environment",
            "match": {
              "location": "investigatetargetenvironment.assinvestigatetargetenvironment()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-105: HTTP Request Splitting",
    "description": "",
    "id": "capec-105:-http-request-splitting",
    "keyword": "Feature",
    "uri": "CAPEC_105_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec105"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Post a malicious HTTP Request",
        "description": "",
        "id": "capec-105:-http-request-splitting;step2.1-post-a-malicious-http-request",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 84513,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Post a malicious HTTP Request",
            "match": {
              "location": "postamalicioushttprequest.prepostamalicioushttprequest()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18954,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Post a malicious HTTP Request",
            "match": {
              "location": "postamalicioushttprequest.trypostamalicioushttprequest()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17683,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Post a malicious HTTP Request",
            "match": {
              "location": "postamalicioushttprequest.asspostamalicioushttprequest()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-105: HTTP Request Splitting",
    "description": "",
    "id": "capec-105:-http-request-splitting",
    "keyword": "Feature",
    "uri": "CAPEC_105_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec105"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Probe for log injection vulnerability",
        "description": "",
        "id": "capec-106:-cross-site-scripting-through-log-files;step1.1-probe-for-log-injection-vulnerability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 74947,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Probe for log injection vulnerability",
            "match": {
              "location": "probeforloginjectionvulnerability.preprobeforloginjectionvulnerability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 13309,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Probe for log injection vulnerability",
            "match": {
              "location": "probeforloginjectionvulnerability.tryprobeforloginjectionvulnerability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9485,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe for log injection vulnerability",
            "match": {
              "location": "probeforloginjectionvulnerability.assprobeforloginjectionvulnerability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17860,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-106: Cross Site Scripting through Log Files",
    "description": "",
    "id": "capec-106:-cross-site-scripting-through-log-files",
    "keyword": "Feature",
    "uri": "CAPEC_106_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec106"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Probe for cross-site scripting vulnerability",
        "description": "",
        "id": "capec-106:-cross-site-scripting-through-log-files;step1.2-probe-for-cross-site-scripting-vulnerability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2266821,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeforcrosssitescriptingvulnerability.preprobeforcrosssitescriptingvulnerability(probeforcrosssitescriptingvulnerability.java:15)\n\tat ✽.Given prepare to Probe for cross-site scripting vulnerability(CAPEC_106_Step_1_2.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeforcrosssitescriptingvulnerability.preprobeforcrosssitescriptingvulnerability(probeforcrosssitescriptingvulnerability.java:15)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Probe for cross-site scripting vulnerability",
            "match": {
              "location": "probeforcrosssitescriptingvulnerability.preprobeforcrosssitescriptingvulnerability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Probe for cross-site scripting vulnerability",
            "match": {
              "location": "probeforcrosssitescriptingvulnerability.tryprobeforcrosssitescriptingvulnerability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe for cross-site scripting vulnerability",
            "match": {
              "location": "probeforcrosssitescriptingvulnerability.assprobeforcrosssitescriptingvulnerability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-106: Cross Site Scripting through Log Files",
    "description": "",
    "id": "capec-106:-cross-site-scripting-through-log-files",
    "keyword": "Feature",
    "uri": "CAPEC_106_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec106"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Confirm exploitability",
        "description": "",
        "id": "capec-106:-cross-site-scripting-through-log-files;step2.1-confirm-exploitability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 81321,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Confirm exploitability",
            "match": {
              "location": "confirmexploitability.preconfirmexploitability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 19838,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Confirm exploitability",
            "match": {
              "location": "confirmexploitability.tryconfirmexploitability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 18464,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Confirm exploitability",
            "match": {
              "location": "confirmexploitability.assconfirmexploitability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-106: Cross Site Scripting through Log Files",
    "description": "",
    "id": "capec-106:-cross-site-scripting-through-log-files",
    "keyword": "Feature",
    "uri": "CAPEC_106_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec106"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Inject System Logs with Malicious Scripts",
        "description": "",
        "id": "capec-106:-cross-site-scripting-through-log-files;step3.1-inject-system-logs-with-malicious-scripts",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 76460,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Inject System Logs with Malicious Scripts",
            "match": {
              "location": "injectsystemlogswithmaliciousscripts.preinjectsystemlogswithmaliciousscripts()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 19880,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Inject System Logs with Malicious Scripts",
            "match": {
              "location": "injectsystemlogswithmaliciousscripts.tryinjectsystemlogswithmaliciousscripts()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 23124,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Inject System Logs with Malicious Scripts",
            "match": {
              "location": "injectsystemlogswithmaliciousscripts.assinjectsystemlogswithmaliciousscripts()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-106: Cross Site Scripting through Log Files",
    "description": "",
    "id": "capec-106:-cross-site-scripting-through-log-files",
    "keyword": "Feature",
    "uri": "CAPEC_106_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec106"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Determine if HTTP Trace is enabled",
        "description": "",
        "id": "capec-107:-cross-site-tracing;step1.1-determine-if-http-trace-is-enabled",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 75144,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine if HTTP Trace is enabled",
            "match": {
              "location": "determineifhttptraceisenabled.predetermineifhttptraceisenabled()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11322,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine if HTTP Trace is enabled",
            "match": {
              "location": "determineifhttptraceisenabled.trydetermineifhttptraceisenabled()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10718,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine if HTTP Trace is enabled",
            "match": {
              "location": "determineifhttptraceisenabled.assdetermineifhttptraceisenabled()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-107: Cross Site Tracing",
    "description": "",
    "id": "capec-107:-cross-site-tracing",
    "keyword": "Feature",
    "uri": "CAPEC_107_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec107"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Identify mechanism to launch HTTP Trace request",
        "description": "",
        "id": "capec-107:-cross-site-tracing;step2.1-identify-mechanism-to-launch-http-trace-request",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 64339,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify mechanism to launch HTTP Trace request",
            "match": {
              "location": "identifymechanismtolaunchhttptracerequest.preidentifymechanismtolaunchhttptracerequest()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 13082,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify mechanism to launch HTTP Trace request",
            "match": {
              "location": "identifymechanismtolaunchhttptracerequest.tryidentifymechanismtolaunchhttptracerequest()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11258,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify mechanism to launch HTTP Trace request",
            "match": {
              "location": "identifymechanismtolaunchhttptracerequest.assidentifymechanismtolaunchhttptracerequest()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-107: Cross Site Tracing",
    "description": "",
    "id": "capec-107:-cross-site-tracing",
    "keyword": "Feature",
    "uri": "CAPEC_107_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec107"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Create a malicious script that pings the web server with HTTP TRACE request",
        "description": "",
        "id": "capec-107:-cross-site-tracing;step3.1-create-a-malicious-script-that-pings-the-web-server-with-http-trace-request",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 89528,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Create a malicious script that pings the web server with HTTP TRACE request",
            "match": {
              "location": "createamaliciousscriptthatpingsthewebserverwithhttptracerequest.precreateamaliciousscriptthatpingsthewebserverwithhttptracerequest()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 21635,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Create a malicious script that pings the web server with HTTP TRACE request",
            "match": {
              "location": "createamaliciousscriptthatpingsthewebserverwithhttptracerequest.trycreateamaliciousscriptthatpingsthewebserverwithhttptracerequest()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17807,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Create a malicious script that pings the web server with HTTP TRACE request",
            "match": {
              "location": "createamaliciousscriptthatpingsthewebserverwithhttptracerequest.asscreateamaliciousscriptthatpingsthewebserverwithhttptracerequest()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-107: Cross Site Tracing",
    "description": "",
    "id": "capec-107:-cross-site-tracing",
    "keyword": "Feature",
    "uri": "CAPEC_107_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec107"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Execute malicious HTTP Trace launching script",
        "description": "",
        "id": "capec-107:-cross-site-tracing;step3.2-execute-malicious-http-trace-launching-script",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 83014,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Execute malicious HTTP Trace launching script",
            "match": {
              "location": "executemalicioushttptracelaunchingscript.preexecutemalicioushttptracelaunchingscript()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 25157,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Execute malicious HTTP Trace launching script",
            "match": {
              "location": "executemalicioushttptracelaunchingscript.tryexecutemalicioushttptracelaunchingscript()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 24906,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Execute malicious HTTP Trace launching script",
            "match": {
              "location": "executemalicioushttptracelaunchingscript.assexecutemalicioushttptracelaunchingscript()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-107: Cross Site Tracing",
    "description": "",
    "id": "capec-107:-cross-site-tracing",
    "keyword": "Feature",
    "uri": "CAPEC_107_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec107"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Probe for SQL Injection vulnerability",
        "description": "",
        "id": "capec-108:-command-line-execution-through-sql-injection;step1.1-probe-for-sql-injection-vulnerability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2501493,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeforsqlinjectionvulnerability.preprobeforsqlinjectionvulnerability(probeforsqlinjectionvulnerability.java:16)\n\tat ✽.Given prepare to Probe for SQL Injection vulnerability(CAPEC_108_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeforsqlinjectionvulnerability.preprobeforsqlinjectionvulnerability(probeforsqlinjectionvulnerability.java:16)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Probe for SQL Injection vulnerability",
            "match": {
              "location": "probeforsqlinjectionvulnerability.preprobeforsqlinjectionvulnerability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Probe for SQL Injection vulnerability",
            "match": {
              "location": "probeforsqlinjectionvulnerability.tryprobeforsqlinjectionvulnerability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe for SQL Injection vulnerability",
            "match": {
              "location": "probeforsqlinjectionvulnerability.assprobeforsqlinjectionvulnerability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# alternative input guard"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative application firewall"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-108: Command Line Execution through SQL Injection",
    "description": "",
    "id": "capec-108:-command-line-execution-through-sql-injection",
    "keyword": "Feature",
    "uri": "CAPEC_108_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec108"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive",
        "description": "",
        "id": "capec-108:-command-line-execution-through-sql-injection;step2.1-achieve-arbitrary-command-execution-through-sql-injection-with-the-mssql-xp-cmdshell-directive",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 77713,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive",
            "match": {
              "location": "achievearbitrarycommandexecutionthroughsqlinjectionwiththemssqlxpcmdshelldirective.preachievearbitrarycommandexecutionthroughsqlinjectionwiththemssqlxpcmdshelldirective()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12694,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive",
            "match": {
              "location": "achievearbitrarycommandexecutionthroughsqlinjectionwiththemssqlxpcmdshelldirective.tryachievearbitrarycommandexecutionthroughsqlinjectionwiththemssqlxpcmdshelldirective()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 13878,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive",
            "match": {
              "location": "achievearbitrarycommandexecutionthroughsqlinjectionwiththemssqlxpcmdshelldirective.assachievearbitrarycommandexecutionthroughsqlinjectionwiththemssqlxpcmdshelldirective()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20096,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10611,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9669,
              "status": "passed"
            },
            "comments": [
              {
                "line": 12,
                "value": "# alternative input guard"
              }
            ],
            "line": 13,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-108: Command Line Execution through SQL Injection",
    "description": "",
    "id": "capec-108:-command-line-execution-through-sql-injection",
    "keyword": "Feature",
    "uri": "CAPEC_108_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec108"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.2 Inject malicious data in the database",
        "description": "",
        "id": "capec-108:-command-line-execution-through-sql-injection;step2.2-inject-malicious-data-in-the-database",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 48365,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Inject malicious data in the database",
            "match": {
              "location": "injectmaliciousdatainthedatabase.preinjectmaliciousdatainthedatabase()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10887,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Inject malicious data in the database",
            "match": {
              "location": "injectmaliciousdatainthedatabase.tryinjectmaliciousdatainthedatabase()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9785,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Inject malicious data in the database",
            "match": {
              "location": "injectmaliciousdatainthedatabase.assinjectmaliciousdatainthedatabase()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16621,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8584,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# alternative input guard"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10843,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative application firewall"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-108: Command Line Execution through SQL Injection",
    "description": "",
    "id": "capec-108:-command-line-execution-through-sql-injection",
    "keyword": "Feature",
    "uri": "CAPEC_108_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec108"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.3 Trigger command line execution with injected arguments",
        "description": "",
        "id": "capec-108:-command-line-execution-through-sql-injection;step2.3-trigger-command-line-execution-with-injected-arguments",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 70271,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Trigger command line execution with injected arguments",
            "match": {
              "location": "triggercommandlineexecutionwithinjectedarguments.pretriggercommandlineexecutionwithinjectedarguments()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 45097,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Trigger command line execution with injected arguments",
            "match": {
              "location": "triggercommandlineexecutionwithinjectedarguments.trytriggercommandlineexecutionwithinjectedarguments()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9379,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Trigger command line execution with injected arguments",
            "match": {
              "location": "triggercommandlineexecutionwithinjectedarguments.asstriggercommandlineexecutionwithinjectedarguments()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-108: Command Line Execution through SQL Injection",
    "description": "",
    "id": "capec-108:-command-line-execution-through-sql-injection",
    "keyword": "Feature",
    "uri": "CAPEC_108_Step_2_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec108"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Determine Persistence Framework Used",
        "description": "",
        "id": "capec-109:-object-relational-mapping-injection;step1.1-determine-persistence-framework-used",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 83514,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine Persistence Framework Used",
            "match": {
              "location": "determinepersistenceframeworkused.predeterminepersistenceframeworkused()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 46602,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine Persistence Framework Used",
            "match": {
              "location": "determinepersistenceframeworkused.trydeterminepersistenceframeworkused()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12891,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine Persistence Framework Used",
            "match": {
              "location": "determinepersistenceframeworkused.assdeterminepersistenceframeworkused()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-109: Object Relational Mapping Injection",
    "description": "",
    "id": "capec-109:-object-relational-mapping-injection",
    "keyword": "Feature",
    "uri": "CAPEC_109_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec109"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Probe for ORM Injection vulnerabilities",
        "description": "",
        "id": "capec-109:-object-relational-mapping-injection;step1.2-probe-for-orm-injection-vulnerabilities",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 79856,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Probe for ORM Injection vulnerabilities",
            "match": {
              "location": "probefororminjectionvulnerabilities.preprobefororminjectionvulnerabilities()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10338,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Probe for ORM Injection vulnerabilities",
            "match": {
              "location": "probefororminjectionvulnerabilities.tryprobefororminjectionvulnerabilities()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9253,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe for ORM Injection vulnerabilities",
            "match": {
              "location": "probefororminjectionvulnerabilities.assprobefororminjectionvulnerabilities()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-109: Object Relational Mapping Injection",
    "description": "",
    "id": "capec-109:-object-relational-mapping-injection",
    "keyword": "Feature",
    "uri": "CAPEC_109_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec109"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Perform SQL Injection through the generated data access layer",
        "description": "",
        "id": "capec-109:-object-relational-mapping-injection;step2.1-perform-sql-injection-through-the-generated-data-access-layer",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 53679,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Perform SQL Injection through the generated data access layer",
            "match": {
              "location": "performsqlinjectionthroughthegenerateddataaccesslayer.preperformsqlinjectionthroughthegenerateddataaccesslayer()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9153,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Perform SQL Injection through the generated data access layer",
            "match": {
              "location": "performsqlinjectionthroughthegenerateddataaccesslayer.tryperformsqlinjectionthroughthegenerateddataaccesslayer()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9126,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Perform SQL Injection through the generated data access layer",
            "match": {
              "location": "performsqlinjectionthroughthegenerateddataaccesslayer.assperformsqlinjectionthroughthegenerateddataaccesslayer()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-109: Object Relational Mapping Injection",
    "description": "",
    "id": "capec-109:-object-relational-mapping-injection",
    "keyword": "Feature",
    "uri": "CAPEC_109_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec109"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-10:-buffer-overflow-via-environment-variables;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-10: Buffer Overflow via Environment Variables",
    "description": "",
    "id": "capec-10:-buffer-overflow-via-environment-variables",
    "keyword": "Feature",
    "uri": "CAPEC_10_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec10"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-10:-buffer-overflow-via-environment-variables;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-10: Buffer Overflow via Environment Variables",
    "description": "",
    "id": "capec-10:-buffer-overflow-via-environment-variables",
    "keyword": "Feature",
    "uri": "CAPEC_10_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec10"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-10:-buffer-overflow-via-environment-variables;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-10: Buffer Overflow via Environment Variables",
    "description": "",
    "id": "capec-10:-buffer-overflow-via-environment-variables",
    "keyword": "Feature",
    "uri": "CAPEC_10_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec10"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Detect Incorrect SOAP Parameter Handling",
        "description": "",
        "id": "capec-110:-sql-injection-through-soap-parameter-tampering;step1.1-detect-incorrect-soap-parameter-handling",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 53098,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Detect Incorrect SOAP Parameter Handling",
            "match": {
              "location": "detectincorrectsoapparameterhandling.predetectincorrectsoapparameterhandling()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11189,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Detect Incorrect SOAP Parameter Handling",
            "match": {
              "location": "detectincorrectsoapparameterhandling.trydetectincorrectsoapparameterhandling()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10118,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Detect Incorrect SOAP Parameter Handling",
            "match": {
              "location": "detectincorrectsoapparameterhandling.assdetectincorrectsoapparameterhandling()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-110: SQL Injection through SOAP Parameter Tampering",
    "description": "",
    "id": "capec-110:-sql-injection-through-soap-parameter-tampering",
    "keyword": "Feature",
    "uri": "CAPEC_110_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec110"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Probe for SQL Injection vulnerability",
        "description": "",
        "id": "capec-110:-sql-injection-through-soap-parameter-tampering;step2.1-probe-for-sql-injection-vulnerability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1861610,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeforsqlinjectionvulnerability.preprobeforsqlinjectionvulnerability(probeforsqlinjectionvulnerability.java:16)\n\tat ✽.Given prepare to Probe for SQL Injection vulnerability(CAPEC_110_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeforsqlinjectionvulnerability.preprobeforsqlinjectionvulnerability(probeforsqlinjectionvulnerability.java:16)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Probe for SQL Injection vulnerability",
            "match": {
              "location": "probeforsqlinjectionvulnerability.preprobeforsqlinjectionvulnerability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Probe for SQL Injection vulnerability",
            "match": {
              "location": "probeforsqlinjectionvulnerability.tryprobeforsqlinjectionvulnerability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe for SQL Injection vulnerability",
            "match": {
              "location": "probeforsqlinjectionvulnerability.assprobeforsqlinjectionvulnerability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# alternative input guard"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative application firewall"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-110: SQL Injection through SOAP Parameter Tampering",
    "description": "",
    "id": "capec-110:-sql-injection-through-soap-parameter-tampering",
    "keyword": "Feature",
    "uri": "CAPEC_110_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec110"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Inject SQL via SOAP Parameters",
        "description": "",
        "id": "capec-110:-sql-injection-through-soap-parameter-tampering;step3.1-inject-sql-via-soap-parameters",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 55401,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Inject SQL via SOAP Parameters",
            "match": {
              "location": "injectsqlviasoapparameters.preinjectsqlviasoapparameters()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11483,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Inject SQL via SOAP Parameters",
            "match": {
              "location": "injectsqlviasoapparameters.tryinjectsqlviasoapparameters()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10749,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Inject SQL via SOAP Parameters",
            "match": {
              "location": "injectsqlviasoapparameters.assinjectsqlviasoapparameters()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-110: SQL Injection through SOAP Parameter Tampering",
    "description": "",
    "id": "capec-110:-sql-injection-through-soap-parameter-tampering",
    "keyword": "Feature",
    "uri": "CAPEC_110_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec110"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Understand How to Request JSON Responses from the Target System",
        "description": "",
        "id": "capec-111:-json-hijacking-(aka-javascript-hijacking);step1.1-understand-how-to-request-json-responses-from-the-target-system",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 66444,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Understand How to Request JSON Responses from the Target System",
            "match": {
              "location": "understandhowtorequestjsonresponsesfromthetargetsystem.preunderstandhowtorequestjsonresponsesfromthetargetsystem()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 16264,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Understand How to Request JSON Responses from the Target System",
            "match": {
              "location": "understandhowtorequestjsonresponsesfromthetargetsystem.tryunderstandhowtorequestjsonresponsesfromthetargetsystem()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15425,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Understand How to Request JSON Responses from the Target System",
            "match": {
              "location": "understandhowtorequestjsonresponsesfromthetargetsystem.assunderstandhowtorequestjsonresponsesfromthetargetsystem()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-111: JSON Hijacking (aka JavaScript Hijacking)",
    "description": "",
    "id": "capec-111:-json-hijacking-(aka-javascript-hijacking)",
    "keyword": "Feature",
    "uri": "CAPEC_111_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec111"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Craft a malicious website",
        "description": "",
        "id": "capec-111:-json-hijacking-(aka-javascript-hijacking);step2.1-craft-a-malicious-website",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 91052,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Craft a malicious website",
            "match": {
              "location": "craftamaliciouswebsite.precraftamaliciouswebsite()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18514,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Craft a malicious website",
            "match": {
              "location": "craftamaliciouswebsite.trycraftamaliciouswebsite()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 21585,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Craft a malicious website",
            "match": {
              "location": "craftamaliciouswebsite.asscraftamaliciouswebsite()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-111: JSON Hijacking (aka JavaScript Hijacking)",
    "description": "",
    "id": "capec-111:-json-hijacking-(aka-javascript-hijacking)",
    "keyword": "Feature",
    "uri": "CAPEC_111_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec111"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Launch JSON hijack",
        "description": "",
        "id": "capec-111:-json-hijacking-(aka-javascript-hijacking);step3.1-launch-json-hijack",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 87320,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Launch JSON hijack",
            "match": {
              "location": "launchjsonhijack.prelaunchjsonhijack()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 20783,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Launch JSON hijack",
            "match": {
              "location": "launchjsonhijack.trylaunchjsonhijack()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15147,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Launch JSON hijack",
            "match": {
              "location": "launchjsonhijack.asslaunchjsonhijack()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-111: JSON Hijacking (aka JavaScript Hijacking)",
    "description": "",
    "id": "capec-111:-json-hijacking-(aka-javascript-hijacking)",
    "keyword": "Feature",
    "uri": "CAPEC_111_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec111"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Determine secret testing procedure",
        "description": "",
        "id": "capec-112:-brute-force;step1.1-determine-secret-testing-procedure",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 82420,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine secret testing procedure",
            "match": {
              "location": "determinesecrettestingprocedure.predeterminesecrettestingprocedure()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 14107,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine secret testing procedure",
            "match": {
              "location": "determinesecrettestingprocedure.trydeterminesecrettestingprocedure()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15224,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine secret testing procedure",
            "match": {
              "location": "determinesecrettestingprocedure.assdeterminesecrettestingprocedure()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-112: Brute Force",
    "description": "",
    "id": "capec-112:-brute-force",
    "keyword": "Feature",
    "uri": "CAPEC_112_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec112"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Reduce search space",
        "description": "",
        "id": "capec-112:-brute-force;step1.2-reduce-search-space",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 77449,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Reduce search space",
            "match": {
              "location": "reducesearchspace.prereducesearchspace()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 16360,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Reduce search space",
            "match": {
              "location": "reducesearchspace.tryreducesearchspace()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 27236,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Reduce search space",
            "match": {
              "location": "reducesearchspace.assreducesearchspace()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-112: Brute Force",
    "description": "",
    "id": "capec-112:-brute-force",
    "keyword": "Feature",
    "uri": "CAPEC_112_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec112"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.3 Expand victory conditions",
        "description": "",
        "id": "capec-112:-brute-force;step1.3-expand-victory-conditions",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 105767,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Expand victory conditions",
            "match": {
              "location": "expandvictoryconditions.preexpandvictoryconditions()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33612,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Expand victory conditions",
            "match": {
              "location": "expandvictoryconditions.tryexpandvictoryconditions()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 18646,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Expand victory conditions",
            "match": {
              "location": "expandvictoryconditions.assexpandvictoryconditions()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-112: Brute Force",
    "description": "",
    "id": "capec-112:-brute-force",
    "keyword": "Feature",
    "uri": "CAPEC_112_Step_1_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec112"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Gather information so attack can be performed independently.",
        "description": "",
        "id": "capec-112:-brute-force;step2.1-gather-information-so-attack-can-be-performed-independently.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 87647,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Gather information so attack can be performed independently.",
            "match": {
              "location": "gatherinformationsoattackcanbeperformedindependently.pregatherinformationsoattackcanbeperformedindependently()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 23196,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Gather information so attack can be performed independently.",
            "match": {
              "location": "gatherinformationsoattackcanbeperformedindependently.trygatherinformationsoattackcanbeperformedindependently()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15935,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Gather information so attack can be performed independently.",
            "match": {
              "location": "gatherinformationsoattackcanbeperformedindependently.assgatherinformationsoattackcanbeperformedindependently()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-112: Brute Force",
    "description": "",
    "id": "capec-112:-brute-force",
    "keyword": "Feature",
    "uri": "CAPEC_112_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec112"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Footprint file input vectors",
        "description": "",
        "id": "capec-11:-cause-web-server-misclassification;step1.1-footprint-file-input-vectors",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 60546,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Footprint file input vectors",
            "match": {
              "location": "footprintfileinputvectors.prefootprintfileinputvectors()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 26927,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Footprint file input vectors",
            "match": {
              "location": "footprintfileinputvectors.tryfootprintfileinputvectors()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 23857,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Footprint file input vectors",
            "match": {
              "location": "footprintfileinputvectors.assfootprintfileinputvectors()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-11: Cause Web Server Misclassification",
    "description": "",
    "id": "capec-11:-cause-web-server-misclassification",
    "keyword": "Feature",
    "uri": "CAPEC_11_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec11"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 File misclassification shotgunning",
        "description": "",
        "id": "capec-11:-cause-web-server-misclassification;step2.1-file-misclassification-shotgunning",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 91360,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to File misclassification shotgunning",
            "match": {
              "location": "filemisclassificationshotgunning.prefilemisclassificationshotgunning()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 19286,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to File misclassification shotgunning",
            "match": {
              "location": "filemisclassificationshotgunning.tryfilemisclassificationshotgunning()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16031,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of File misclassification shotgunning",
            "match": {
              "location": "filemisclassificationshotgunning.assfilemisclassificationshotgunning()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 34005,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 51157,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10824,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10516,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative input guard"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17453,
              "status": "passed"
            },
            "comments": [
              {
                "line": 17,
                "value": "# alternative application firewall"
              }
            ],
            "line": 18,
            "name": "assert the consequences of the pattern pathname canonicalization",
            "match": {
              "location": "PatternSteps.asspathnamecanonicalization()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-11: Cause Web Server Misclassification",
    "description": "",
    "id": "capec-11:-cause-web-server-misclassification",
    "keyword": "Feature",
    "uri": "CAPEC_11_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec11"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.2 File misclassification sniping",
        "description": "",
        "id": "capec-11:-cause-web-server-misclassification;step2.2-file-misclassification-sniping",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 84163,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to File misclassification sniping",
            "match": {
              "location": "filemisclassificationsniping.prefilemisclassificationsniping()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 19584,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to File misclassification sniping",
            "match": {
              "location": "filemisclassificationsniping.tryfilemisclassificationsniping()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 38052,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of File misclassification sniping",
            "match": {
              "location": "filemisclassificationsniping.assfilemisclassificationsniping()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 39664,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18381,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23155,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 26740,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative input guard"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 22986,
              "status": "passed"
            },
            "comments": [
              {
                "line": 17,
                "value": "# alternative application firewall"
              }
            ],
            "line": 18,
            "name": "assert the consequences of the pattern pathname canonicalization",
            "match": {
              "location": "PatternSteps.asspathnamecanonicalization()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-11: Cause Web Server Misclassification",
    "description": "",
    "id": "capec-11:-cause-web-server-misclassification",
    "keyword": "Feature",
    "uri": "CAPEC_11_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec11"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Disclose information",
        "description": "",
        "id": "capec-11:-cause-web-server-misclassification;step3.1-disclose-information",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 87879,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Disclose information",
            "match": {
              "location": "discloseinformation.prediscloseinformation()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 16575,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Disclose information",
            "match": {
              "location": "discloseinformation.trydiscloseinformation()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 14428,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Disclose information",
            "match": {
              "location": "discloseinformation.assdiscloseinformation()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 32982,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13542,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# alternative input guard"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13833,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative application firewall"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern pathname canonicalization",
            "match": {
              "location": "PatternSteps.asspathnamecanonicalization()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-11: Cause Web Server Misclassification",
    "description": "",
    "id": "capec-11:-cause-web-server-misclassification",
    "keyword": "Feature",
    "uri": "CAPEC_11_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec11"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Experiment"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-120:-double-encoding;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-120: Double Encoding",
    "description": "",
    "id": "capec-120:-double-encoding",
    "keyword": "Feature",
    "uri": "CAPEC_120_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec120"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Directory Discovery",
        "description": "",
        "id": "capec-127:-directory-indexing;step1.1-directory-discovery",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 82851,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Directory Discovery",
            "match": {
              "location": "directorydiscovery.predirectorydiscovery()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 25572,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Directory Discovery",
            "match": {
              "location": "directorydiscovery.trydirectorydiscovery()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 13930,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Directory Discovery",
            "match": {
              "location": "directorydiscovery.assdirectorydiscovery()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-127: Directory Indexing",
    "description": "",
    "id": "capec-127:-directory-indexing",
    "keyword": "Feature",
    "uri": "CAPEC_127_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec127"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Iteratively explore directory/file structures",
        "description": "",
        "id": "capec-127:-directory-indexing;step2.1-iteratively-explore-directory/file-structures",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 75339,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Iteratively explore directory/file structures",
            "match": {
              "location": "iterativelyexploredirectoryfilestructures.preiterativelyexploredirectoryfilestructures()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 14558,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Iteratively explore directory/file structures",
            "match": {
              "location": "iterativelyexploredirectoryfilestructures.tryiterativelyexploredirectoryfilestructures()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11680,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Iteratively explore directory/file structures",
            "match": {
              "location": "iterativelyexploredirectoryfilestructures.assiterativelyexploredirectoryfilestructures()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-127: Directory Indexing",
    "description": "",
    "id": "capec-127:-directory-indexing",
    "keyword": "Feature",
    "uri": "CAPEC_127_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec127"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Read directories or files which are not intended for public viewing.",
        "description": "",
        "id": "capec-127:-directory-indexing;step3.1-read-directories-or-files-which-are-not-intended-for-public-viewing.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 86019,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Read directories or files which are not intended for public viewing.",
            "match": {
              "location": "readdirectoriesorfileswhicharenotintendedforpublicviewing.prereaddirectoriesorfileswhicharenotintendedforpublicviewing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 20096,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Read directories or files which are not intended for public viewing.",
            "match": {
              "location": "readdirectoriesorfileswhicharenotintendedforpublicviewing.tryreaddirectoriesorfileswhicharenotintendedforpublicviewing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 20169,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Read directories or files which are not intended for public viewing.",
            "match": {
              "location": "readdirectoriesorfileswhicharenotintendedforpublicviewing.assreaddirectoriesorfileswhicharenotintendedforpublicviewing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 60745,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18424,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15806,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16272,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative input guard"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 17,
                "value": "# alternative application firewall"
              }
            ],
            "line": 18,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-127: Directory Indexing",
    "description": "",
    "id": "capec-127:-directory-indexing",
    "keyword": "Feature",
    "uri": "CAPEC_127_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec127"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-12:-choosing-message-identifier;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-12: Choosing Message Identifier",
    "description": "",
    "id": "capec-12:-choosing-message-identifier",
    "keyword": "Feature",
    "uri": "CAPEC_12_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec12"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-12:-choosing-message-identifier;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-12: Choosing Message Identifier",
    "description": "",
    "id": "capec-12:-choosing-message-identifier",
    "keyword": "Feature",
    "uri": "CAPEC_12_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec12"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Identify Target",
        "description": "",
        "id": "capec-132:-symlink-attack;step1.1-identify-target",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 78468,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify Target",
            "match": {
              "location": "identifytarget.preidentifytarget()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10983,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify Target",
            "match": {
              "location": "identifytarget.tryidentifytarget()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9912,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify Target",
            "match": {
              "location": "identifytarget.assidentifytarget()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20670,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-132: Symlink Attack",
    "description": "",
    "id": "capec-132:-symlink-attack",
    "keyword": "Feature",
    "uri": "CAPEC_132_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec132"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Try to create symlinks to different files",
        "description": "",
        "id": "capec-132:-symlink-attack;step2.1-try-to-create-symlinks-to-different-files",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 125933,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Try to create symlinks to different files",
            "match": {
              "location": "trytocreatesymlinkstodifferentfiles.pretrytocreatesymlinkstodifferentfiles()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12188,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Try to create symlinks to different files",
            "match": {
              "location": "trytocreatesymlinkstodifferentfiles.trytrytocreatesymlinkstodifferentfiles()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10932,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Try to create symlinks to different files",
            "match": {
              "location": "trytocreatesymlinkstodifferentfiles.asstrytocreatesymlinkstodifferentfiles()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 38709,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-132: Symlink Attack",
    "description": "",
    "id": "capec-132:-symlink-attack",
    "keyword": "Feature",
    "uri": "CAPEC_132_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec132"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Target application operates on created symlinks to sensitive files",
        "description": "",
        "id": "capec-132:-symlink-attack;step3.1-target-application-operates-on-created-symlinks-to-sensitive-files",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 71050,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Target application operates on created symlinks to sensitive files",
            "match": {
              "location": "targetapplicationoperatesoncreatedsymlinkstosensitivefiles.pretargetapplicationoperatesoncreatedsymlinkstosensitivefiles()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 16945,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Target application operates on created symlinks to sensitive files",
            "match": {
              "location": "targetapplicationoperatesoncreatedsymlinkstosensitivefiles.trytargetapplicationoperatesoncreatedsymlinkstosensitivefiles()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12091,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Target application operates on created symlinks to sensitive files",
            "match": {
              "location": "targetapplicationoperatesoncreatedsymlinkstosensitivefiles.asstargetapplicationoperatesoncreatedsymlinkstosensitivefiles()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 25102,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-132: Symlink Attack",
    "description": "",
    "id": "capec-132:-symlink-attack",
    "keyword": "Feature",
    "uri": "CAPEC_132_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec132"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey application",
        "description": "",
        "id": "capec-135:-format-string-injection;step1.1-survey-application",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey application(CAPEC_135_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey application in surveyapplication.presurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey application",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey application(CAPEC_135_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey application in surveyapplication.trysurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey application",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey application(CAPEC_135_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey application in surveyapplication.asssurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey application",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-135: Format String Injection",
    "description": "",
    "id": "capec-135:-format-string-injection",
    "keyword": "Feature",
    "uri": "CAPEC_135_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec135"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Determine user-controllable input susceptible to format string injection",
        "description": "",
        "id": "capec-135:-format-string-injection;step2.1-determine-user-controllable-input-susceptible-to-format-string-injection",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2374814,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.determineusercontrollableinputsusceptibletoformatstringinjection.predetermineusercontrollableinputsusceptibletoformatstringinjection(determineusercontrollableinputsusceptibletoformatstringinjection.java:17)\n\tat ✽.Given prepare to Determine user-controllable input susceptible to format string injection(CAPEC_135_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.determineusercontrollableinputsusceptibletoformatstringinjection.predetermineusercontrollableinputsusceptibletoformatstringinjection(determineusercontrollableinputsusceptibletoformatstringinjection.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Determine user-controllable input susceptible to format string injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoformatstringinjection.predetermineusercontrollableinputsusceptibletoformatstringinjection()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Determine user-controllable input susceptible to format string injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoformatstringinjection.trydetermineusercontrollableinputsusceptibletoformatstringinjection()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine user-controllable input susceptible to format string injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoformatstringinjection.assdetermineusercontrollableinputsusceptibletoformatstringinjection()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 11,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 12,
                "value": "# alternative output guard"
              },
              {
                "line": 13,
                "value": "# alternative input guard"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative application firewall"
              },
              {
                "line": 16,
                "value": "# benifits output guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern pathname canonicalization",
            "match": {
              "location": "PatternSteps.asspathnamecanonicalization()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 18,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 19,
                "value": "# alternative application firewall"
              },
              {
                "line": 20,
                "value": "# benifits input guard"
              }
            ],
            "line": 21,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-135: Format String Injection",
    "description": "",
    "id": "capec-135:-format-string-injection",
    "keyword": "Feature",
    "uri": "CAPEC_135_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec135"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Try to exploit the Format String Injection vulnerability",
        "description": "",
        "id": "capec-135:-format-string-injection;step3.1-try-to-exploit-the-format-string-injection-vulnerability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 93634,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Try to exploit the Format String Injection vulnerability",
            "match": {
              "location": "trytoexploittheformatstringinjectionvulnerability.pretrytoexploittheformatstringinjectionvulnerability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 13232,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Try to exploit the Format String Injection vulnerability",
            "match": {
              "location": "trytoexploittheformatstringinjectionvulnerability.trytrytoexploittheformatstringinjectionvulnerability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10853,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Try to exploit the Format String Injection vulnerability",
            "match": {
              "location": "trytoexploittheformatstringinjectionvulnerability.asstrytoexploittheformatstringinjectionvulnerability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-135: Format String Injection",
    "description": "",
    "id": "capec-135:-format-string-injection",
    "keyword": "Feature",
    "uri": "CAPEC_135_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec135"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey application",
        "description": "",
        "id": "capec-136:-ldap-injection;step1.1-survey-application",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey application(CAPEC_136_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey application in surveyapplication.presurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey application",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey application(CAPEC_136_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey application in surveyapplication.trysurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey application",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey application(CAPEC_136_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey application in surveyapplication.asssurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey application",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-136: LDAP Injection",
    "description": "",
    "id": "capec-136:-ldap-injection",
    "keyword": "Feature",
    "uri": "CAPEC_136_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec136"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Determine user-controllable input susceptible to LDAP injection",
        "description": "",
        "id": "capec-136:-ldap-injection;step2.1-determine-user-controllable-input-susceptible-to-ldap-injection",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2348669,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.determineusercontrollableinputsusceptibletoldapinjection.predetermineusercontrollableinputsusceptibletoldapinjection(determineusercontrollableinputsusceptibletoldapinjection.java:15)\n\tat ✽.Given prepare to Determine user-controllable input susceptible to LDAP injection(CAPEC_136_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.determineusercontrollableinputsusceptibletoldapinjection.predetermineusercontrollableinputsusceptibletoldapinjection(determineusercontrollableinputsusceptibletoldapinjection.java:15)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Determine user-controllable input susceptible to LDAP injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoldapinjection.predetermineusercontrollableinputsusceptibletoldapinjection()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Determine user-controllable input susceptible to LDAP injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoldapinjection.trydetermineusercontrollableinputsusceptibletoldapinjection()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine user-controllable input susceptible to LDAP injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoldapinjection.assdetermineusercontrollableinputsusceptibletoldapinjection()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# alternative input guard"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-136: LDAP Injection",
    "description": "",
    "id": "capec-136:-ldap-injection",
    "keyword": "Feature",
    "uri": "CAPEC_136_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec136"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.2 Try to exploit the LDAP injection vulnerability",
        "description": "",
        "id": "capec-136:-ldap-injection;step2.2-try-to-exploit-the-ldap-injection-vulnerability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 83610,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Try to exploit the LDAP injection vulnerability",
            "match": {
              "location": "trytoexploittheldapinjectionvulnerability.pretrytoexploittheldapinjectionvulnerability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 15831,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Try to exploit the LDAP injection vulnerability",
            "match": {
              "location": "trytoexploittheldapinjectionvulnerability.trytrytoexploittheldapinjectionvulnerability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 13833,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Try to exploit the LDAP injection vulnerability",
            "match": {
              "location": "trytoexploittheldapinjectionvulnerability.asstrytoexploittheldapinjectionvulnerability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 43382,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16716,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# alternative input guard"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-136: LDAP Injection",
    "description": "",
    "id": "capec-136:-ldap-injection",
    "keyword": "Feature",
    "uri": "CAPEC_136_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec136"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey application",
        "description": "",
        "id": "capec-139:-relative-path-traversal;step1.1-survey-application",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey application(CAPEC_139_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey application in surveyapplication.presurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey application",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey application(CAPEC_139_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey application in surveyapplication.trysurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey application",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey application(CAPEC_139_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey application in surveyapplication.asssurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey application",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-139: Relative Path Traversal",
    "description": "",
    "id": "capec-139:-relative-path-traversal",
    "keyword": "Feature",
    "uri": "CAPEC_139_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec139"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attempt variations on input parameters",
        "description": "",
        "id": "capec-139:-relative-path-traversal;step2.1-attempt-variations-on-input-parameters",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2641632,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptvariationsoninputparameters.preattemptvariationsoninputparameters(attemptvariationsoninputparameters.java:19)\n\tat ✽.Given prepare to Attempt variations on input parameters(CAPEC_139_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptvariationsoninputparameters.preattemptvariationsoninputparameters(attemptvariationsoninputparameters.java:19)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Attempt variations on input parameters",
            "match": {
              "location": "attemptvariationsoninputparameters.preattemptvariationsoninputparameters()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Attempt variations on input parameters",
            "match": {
              "location": "attemptvariationsoninputparameters.tryattemptvariationsoninputparameters()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attempt variations on input parameters",
            "match": {
              "location": "attemptvariationsoninputparameters.assattemptvariationsoninputparameters()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative input guard"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-139: Relative Path Traversal",
    "description": "",
    "id": "capec-139:-relative-path-traversal",
    "keyword": "Feature",
    "uri": "CAPEC_139_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec139"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Access, modify, or execute arbitrary files.",
        "description": "",
        "id": "capec-139:-relative-path-traversal;step3.1-access,-modify,-or-execute-arbitrary-files.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 88013,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Access, modify, or execute arbitrary files.",
            "match": {
              "location": "accessmodifyorexecutearbitraryfiles.preaccessmodifyorexecutearbitraryfiles()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 21425,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Access, modify, or execute arbitrary files.",
            "match": {
              "location": "accessmodifyorexecutearbitraryfiles.tryaccessmodifyorexecutearbitraryfiles()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 32750,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Access, modify, or execute arbitrary files.",
            "match": {
              "location": "accessmodifyorexecutearbitraryfiles.assaccessmodifyorexecutearbitraryfiles()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 32704,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14984,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12435,
              "status": "passed"
            },
            "comments": [
              {
                "line": 12,
                "value": "# alternative input guard"
              }
            ],
            "line": 13,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-139: Relative Path Traversal",
    "description": "",
    "id": "capec-139:-relative-path-traversal",
    "keyword": "Feature",
    "uri": "CAPEC_139_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec139"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-13:-subverting-environment-variable-values;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-13: Subverting Environment Variable Values",
    "description": "",
    "id": "capec-13:-subverting-environment-variable-values",
    "keyword": "Feature",
    "uri": "CAPEC_13_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec13"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-13:-subverting-environment-variable-values;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-13: Subverting Environment Variable Values",
    "description": "",
    "id": "capec-13:-subverting-environment-variable-values",
    "keyword": "Feature",
    "uri": "CAPEC_13_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec13"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-13:-subverting-environment-variable-values;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-13: Subverting Environment Variable Values",
    "description": "",
    "id": "capec-13:-subverting-environment-variable-values",
    "keyword": "Feature",
    "uri": "CAPEC_13_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec13"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Identify and explore caches",
        "description": "",
        "id": "capec-141:-cache-poisoning;step1.1-identify-and-explore-caches",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 90861,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify and explore caches",
            "match": {
              "location": "identifyandexplorecaches.preidentifyandexplorecaches()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10144,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify and explore caches",
            "match": {
              "location": "identifyandexplorecaches.tryidentifyandexplorecaches()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8817,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify and explore caches",
            "match": {
              "location": "identifyandexplorecaches.assidentifyandexplorecaches()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15876,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-141: Cache Poisoning",
    "description": "",
    "id": "capec-141:-cache-poisoning",
    "keyword": "Feature",
    "uri": "CAPEC_141_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec141"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Cause specific data to be cached",
        "description": "",
        "id": "capec-141:-cache-poisoning;step2.1-cause-specific-data-to-be-cached",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 52996,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Cause specific data to be cached",
            "match": {
              "location": "causespecificdatatobecached.precausespecificdatatobecached()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9681,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Cause specific data to be cached",
            "match": {
              "location": "causespecificdatatobecached.trycausespecificdatatobecached()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8810,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Cause specific data to be cached",
            "match": {
              "location": "causespecificdatatobecached.asscausespecificdatatobecached()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-141: Cache Poisoning",
    "description": "",
    "id": "capec-141:-cache-poisoning",
    "keyword": "Feature",
    "uri": "CAPEC_141_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec141"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Redirect users to malicious website",
        "description": "",
        "id": "capec-141:-cache-poisoning;step3.1-redirect-users-to-malicious-website",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 80425,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Redirect users to malicious website",
            "match": {
              "location": "redirectuserstomaliciouswebsite.preredirectuserstomaliciouswebsite()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 19803,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Redirect users to malicious website",
            "match": {
              "location": "redirectuserstomaliciouswebsite.tryredirectuserstomaliciouswebsite()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9064,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Redirect users to malicious website",
            "match": {
              "location": "redirectuserstomaliciouswebsite.assredirectuserstomaliciouswebsite()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-141: Cache Poisoning",
    "description": "",
    "id": "capec-141:-cache-poisoning",
    "keyword": "Feature",
    "uri": "CAPEC_141_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec141"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Explore resolver caches",
        "description": "",
        "id": "capec-142:-dns-cache-poisoning;step1.1-explore-resolver-caches",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 58991,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Explore resolver caches",
            "match": {
              "location": "exploreresolvercaches.preexploreresolvercaches()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 14066,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Explore resolver caches",
            "match": {
              "location": "exploreresolvercaches.tryexploreresolvercaches()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8923,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Explore resolver caches",
            "match": {
              "location": "exploreresolvercaches.assexploreresolvercaches()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 334391,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-142: DNS Cache Poisoning",
    "description": "",
    "id": "capec-142:-dns-cache-poisoning",
    "keyword": "Feature",
    "uri": "CAPEC_142_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec142"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attempt sending crafted records to DNS cache",
        "description": "",
        "id": "capec-142:-dns-cache-poisoning;step2.1-attempt-sending-crafted-records-to-dns-cache",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 67664,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Attempt sending crafted records to DNS cache",
            "match": {
              "location": "attemptsendingcraftedrecordstodnscache.preattemptsendingcraftedrecordstodnscache()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8414,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Attempt sending crafted records to DNS cache",
            "match": {
              "location": "attemptsendingcraftedrecordstodnscache.tryattemptsendingcraftedrecordstodnscache()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8072,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attempt sending crafted records to DNS cache",
            "match": {
              "location": "attemptsendingcraftedrecordstodnscache.assattemptsendingcraftedrecordstodnscache()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21141,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-142: DNS Cache Poisoning",
    "description": "",
    "id": "capec-142:-dns-cache-poisoning",
    "keyword": "Feature",
    "uri": "CAPEC_142_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec142"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Redirect users to malicious website",
        "description": "",
        "id": "capec-142:-dns-cache-poisoning;step3.1-redirect-users-to-malicious-website",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 86024,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Redirect users to malicious website",
            "match": {
              "location": "redirectuserstomaliciouswebsite.preredirectuserstomaliciouswebsite()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9461,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Redirect users to malicious website",
            "match": {
              "location": "redirectuserstomaliciouswebsite.tryredirectuserstomaliciouswebsite()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 13848,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Redirect users to malicious website",
            "match": {
              "location": "redirectuserstomaliciouswebsite.assredirectuserstomaliciouswebsite()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12534,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 11,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-142: DNS Cache Poisoning",
    "description": "",
    "id": "capec-142:-dns-cache-poisoning",
    "keyword": "Feature",
    "uri": "CAPEC_142_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec142"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey the target",
        "description": "",
        "id": "capec-147:-xml-ping-of-the-death;step1.1-survey-the-target",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey the target(CAPEC_147_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey the target in surveythetarget.presurveythetarget()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the target",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey the target(CAPEC_147_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey the target in surveythetarget.trysurveythetarget()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey the target",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey the target(CAPEC_147_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey the target in surveythetarget.asssurveythetarget()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the target",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-147: XML Ping of the Death",
    "description": "",
    "id": "capec-147:-xml-ping-of-the-death",
    "keyword": "Feature",
    "uri": "CAPEC_147_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec147"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Launch a resource depletion attack",
        "description": "",
        "id": "capec-147:-xml-ping-of-the-death;step2.1-launch-a-resource-depletion-attack",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 87446,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Launch a resource depletion attack",
            "match": {
              "location": "launcharesourcedepletionattack.prelauncharesourcedepletionattack()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10098,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Launch a resource depletion attack",
            "match": {
              "location": "launcharesourcedepletionattack.trylauncharesourcedepletionattack()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17686,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Launch a resource depletion attack",
            "match": {
              "location": "launcharesourcedepletionattack.asslauncharesourcedepletionattack()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-147: XML Ping of the Death",
    "description": "",
    "id": "capec-147:-xml-ping-of-the-death",
    "keyword": "Feature",
    "uri": "CAPEC_147_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec147"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-14:-client-side-injection-induced-buffer-overflow;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-14: Client-side Injection-induced Buffer Overflow",
    "description": "",
    "id": "capec-14:-client-side-injection-induced-buffer-overflow",
    "keyword": "Feature",
    "uri": "CAPEC_14_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec14"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-14:-client-side-injection-induced-buffer-overflow;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-14: Client-side Injection-induced Buffer Overflow",
    "description": "",
    "id": "capec-14:-client-side-injection-induced-buffer-overflow",
    "keyword": "Feature",
    "uri": "CAPEC_14_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec14"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Identify target general susceptibility",
        "description": "",
        "id": "capec-159:-redirect-access-to-libraries;step1.1-identify-target-general-susceptibility",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 85818,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify target general susceptibility",
            "match": {
              "location": "identifytargetgeneralsusceptibility.preidentifytargetgeneralsusceptibility()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11953,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify target general susceptibility",
            "match": {
              "location": "identifytargetgeneralsusceptibility.tryidentifytargetgeneralsusceptibility()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 22121,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify target general susceptibility",
            "match": {
              "location": "identifytargetgeneralsusceptibility.assidentifytargetgeneralsusceptibility()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 348684,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-159: Redirect Access to Libraries",
    "description": "",
    "id": "capec-159:-redirect-access-to-libraries",
    "keyword": "Feature",
    "uri": "CAPEC_159_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec159"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Craft malicious libraries",
        "description": "",
        "id": "capec-159:-redirect-access-to-libraries;step2.1-craft-malicious-libraries",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 77441,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Craft malicious libraries",
            "match": {
              "location": "craftmaliciouslibraries.precraftmaliciouslibraries()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9333,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Craft malicious libraries",
            "match": {
              "location": "craftmaliciouslibraries.trycraftmaliciouslibraries()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11682,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Craft malicious libraries",
            "match": {
              "location": "craftmaliciouslibraries.asscraftmaliciouslibraries()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23902,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-159: Redirect Access to Libraries",
    "description": "",
    "id": "capec-159:-redirect-access-to-libraries",
    "keyword": "Feature",
    "uri": "CAPEC_159_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec159"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Redirect the access to libraries to the malicious libraries",
        "description": "",
        "id": "capec-159:-redirect-access-to-libraries;step3.1-redirect-the-access-to-libraries-to-the-malicious-libraries",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 61537,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Redirect the access to libraries to the malicious libraries",
            "match": {
              "location": "redirecttheaccesstolibrariestothemaliciouslibraries.preredirecttheaccesstolibrariestothemaliciouslibraries()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 19077,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Redirect the access to libraries to the malicious libraries",
            "match": {
              "location": "redirecttheaccesstolibrariestothemaliciouslibraries.tryredirecttheaccesstolibrariestothemaliciouslibraries()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12034,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Redirect the access to libraries to the malicious libraries",
            "match": {
              "location": "redirecttheaccesstolibrariestothemaliciouslibraries.assredirecttheaccesstolibrariestothemaliciouslibraries()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14942,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-159: Redirect Access to Libraries",
    "description": "",
    "id": "capec-159:-redirect-access-to-libraries",
    "keyword": "Feature",
    "uri": "CAPEC_159_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec159"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Assess Target Runtime Environment",
        "description": "",
        "id": "capec-15:-command-delimiters;step1.1-assess-target-runtime-environment",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 50376,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Assess Target Runtime Environment",
            "match": {
              "location": "assesstargetruntimeenvironment.preassesstargetruntimeenvironment()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 26585,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Assess Target Runtime Environment",
            "match": {
              "location": "assesstargetruntimeenvironment.tryassesstargetruntimeenvironment()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9983,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Assess Target Runtime Environment",
            "match": {
              "location": "assesstargetruntimeenvironment.assassesstargetruntimeenvironment()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-15: Command Delimiters",
    "description": "",
    "id": "capec-15:-command-delimiters",
    "keyword": "Feature",
    "uri": "CAPEC_15_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec15"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Survey the Application",
        "description": "",
        "id": "capec-15:-command-delimiters;step1.2-survey-the-application",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2478400,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.survey.presurvey(survey.java:17)\n\tat ✽.Given prepare to Survey the Application(CAPEC_15_Step_1_2.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.survey.presurvey(survey.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the Application",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Survey the Application",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the Application",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-15: Command Delimiters",
    "description": "",
    "id": "capec-15:-command-delimiters",
    "keyword": "Feature",
    "uri": "CAPEC_15_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec15"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attempt delimiters in inputs",
        "description": "",
        "id": "capec-15:-command-delimiters;step2.1-attempt-delimiters-in-inputs",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2240666,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptdelimitersininputs.preattemptdelimitersininputs(attemptdelimitersininputs.java:24)\n\tat ✽.Given prepare to Attempt delimiters in inputs(CAPEC_15_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptdelimitersininputs.preattemptdelimitersininputs(attemptdelimitersininputs.java:24)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Attempt delimiters in inputs",
            "match": {
              "location": "attemptdelimitersininputs.preattemptdelimitersininputs()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Attempt delimiters in inputs",
            "match": {
              "location": "attemptdelimitersininputs.tryattemptdelimitersininputs()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attempt delimiters in inputs",
            "match": {
              "location": "attemptdelimitersininputs.assattemptdelimitersininputs()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-15: Command Delimiters",
    "description": "",
    "id": "capec-15:-command-delimiters",
    "keyword": "Feature",
    "uri": "CAPEC_15_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec15"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Use malicious command delimiters",
        "description": "",
        "id": "capec-15:-command-delimiters;step3.1-use-malicious-command-delimiters",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 85736,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Use malicious command delimiters",
            "match": {
              "location": "usemaliciouscommanddelimiters.preusemaliciouscommanddelimiters()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 14973,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Use malicious command delimiters",
            "match": {
              "location": "usemaliciouscommanddelimiters.tryusemaliciouscommanddelimiters()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 14487,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Use malicious command delimiters",
            "match": {
              "location": "usemaliciouscommanddelimiters.assusemaliciouscommanddelimiters()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23047,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15860,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11206,
              "status": "passed"
            },
            "comments": [
              {
                "line": 12,
                "value": "# alternative input guard"
              }
            ],
            "line": 13,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-15: Command Delimiters",
    "description": "",
    "id": "capec-15:-command-delimiters",
    "keyword": "Feature",
    "uri": "CAPEC_15_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec15"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Obtain useful contextual detailed information about the targeted user or organization",
        "description": "",
        "id": "capec-163:-spear-phishing;step1.1-obtain-useful-contextual-detailed-information-about-the-targeted-user-or-organization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 67875,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Obtain useful contextual detailed information about the targeted user or organization",
            "match": {
              "location": "obtainusefulcontextualdetailedinformationaboutthetargeteduserororganization.preobtainusefulcontextualdetailedinformationaboutthetargeteduserororganization()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 13303,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Obtain useful contextual detailed information about the targeted user or organization",
            "match": {
              "location": "obtainusefulcontextualdetailedinformationaboutthetargeteduserororganization.tryobtainusefulcontextualdetailedinformationaboutthetargeteduserororganization()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12018,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Obtain useful contextual detailed information about the targeted user or organization",
            "match": {
              "location": "obtainusefulcontextualdetailedinformationaboutthetargeteduserororganization.assobtainusefulcontextualdetailedinformationaboutthetargeteduserororganization()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-163: Spear Phishing",
    "description": "",
    "id": "capec-163:-spear-phishing",
    "keyword": "Feature",
    "uri": "CAPEC_163_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec163"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Optional: Obtain domain name and certificate to spoof legitimate site",
        "description": "",
        "id": "capec-163:-spear-phishing;step2.1-optional:-obtain-domain-name-and-certificate-to-spoof-legitimate-site",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 68828,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Optional: Obtain domain name and certificate to spoof legitimate site",
            "match": {
              "location": "optionalobtaindomainnameandcertificatetospooflegitimatesite.preoptionalobtaindomainnameandcertificatetospooflegitimatesite()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11816,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Optional: Obtain domain name and certificate to spoof legitimate site",
            "match": {
              "location": "optionalobtaindomainnameandcertificatetospooflegitimatesite.tryoptionalobtaindomainnameandcertificatetospooflegitimatesite()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11647,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Optional: Obtain domain name and certificate to spoof legitimate site",
            "match": {
              "location": "optionalobtaindomainnameandcertificatetospooflegitimatesite.assoptionalobtaindomainnameandcertificatetospooflegitimatesite()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-163: Spear Phishing",
    "description": "",
    "id": "capec-163:-spear-phishing",
    "keyword": "Feature",
    "uri": "CAPEC_163_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec163"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.2 Optional: Explore legitimate website and create duplicate",
        "description": "",
        "id": "capec-163:-spear-phishing;step2.2-optional:-explore-legitimate-website-and-create-duplicate",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 78603,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Optional: Explore legitimate website and create duplicate",
            "match": {
              "location": "optionalexplorelegitimatewebsiteandcreateduplicate.preoptionalexplorelegitimatewebsiteandcreateduplicate()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12208,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Optional: Explore legitimate website and create duplicate",
            "match": {
              "location": "optionalexplorelegitimatewebsiteandcreateduplicate.tryoptionalexplorelegitimatewebsiteandcreateduplicate()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11270,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Optional: Explore legitimate website and create duplicate",
            "match": {
              "location": "optionalexplorelegitimatewebsiteandcreateduplicate.assoptionalexplorelegitimatewebsiteandcreateduplicate()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-163: Spear Phishing",
    "description": "",
    "id": "capec-163:-spear-phishing",
    "keyword": "Feature",
    "uri": "CAPEC_163_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec163"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.3 Optional: Build variants of the website with very specific user information e.g., living area, etc.",
        "description": "",
        "id": "capec-163:-spear-phishing;step2.3-optional:-build-variants-of-the-website-with-very-specific-user-information-e.g.,-living-area,-etc.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 69723,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Optional: Build variants of the website with very specific user information e.g., living area, etc.",
            "match": {
              "location": "optionalbuildvariantsofthewebsitewithveryspecificuserinformationeglivingareaetc.preoptionalbuildvariantsofthewebsitewithveryspecificuserinformationeglivingareaetc()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11474,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Optional: Build variants of the website with very specific user information e.g., living area, etc.",
            "match": {
              "location": "optionalbuildvariantsofthewebsitewithveryspecificuserinformationeglivingareaetc.tryoptionalbuildvariantsofthewebsitewithveryspecificuserinformationeglivingareaetc()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9229,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Optional: Build variants of the website with very specific user information e.g., living area, etc.",
            "match": {
              "location": "optionalbuildvariantsofthewebsitewithveryspecificuserinformationeglivingareaetc.assoptionalbuildvariantsofthewebsitewithveryspecificuserinformationeglivingareaetc()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-163: Spear Phishing",
    "description": "",
    "id": "capec-163:-spear-phishing",
    "keyword": "Feature",
    "uri": "CAPEC_163_Step_2_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec163"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Convince user to enter sensitive information on attacker\u0027s site.",
        "description": "",
        "id": "capec-163:-spear-phishing;step3.1-convince-user-to-enter-sensitive-information-on-attacker\u0027s-site.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 74260,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Convince user to enter sensitive information on attacker\u0027s site.",
            "match": {
              "location": "convinceusertoentersensitiveinformationonattackerssite.preconvinceusertoentersensitiveinformationonattackerssite()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18826,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Convince user to enter sensitive information on attacker\u0027s site.",
            "match": {
              "location": "convinceusertoentersensitiveinformationonattackerssite.tryconvinceusertoentersensitiveinformationonattackerssite()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15405,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Convince user to enter sensitive information on attacker\u0027s site.",
            "match": {
              "location": "convinceusertoentersensitiveinformationonattackerssite.assconvinceusertoentersensitiveinformationonattackerssite()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23523,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-163: Spear Phishing",
    "description": "",
    "id": "capec-163:-spear-phishing",
    "keyword": "Feature",
    "uri": "CAPEC_163_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec163"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Use stolen credentials to log into legitimate site",
        "description": "",
        "id": "capec-163:-spear-phishing;step3.2-use-stolen-credentials-to-log-into-legitimate-site",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 70056,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Use stolen credentials to log into legitimate site",
            "match": {
              "location": "usestolencredentialstologintolegitimatesite.preusestolencredentialstologintolegitimatesite()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 17626,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Use stolen credentials to log into legitimate site",
            "match": {
              "location": "usestolencredentialstologintolegitimatesite.tryusestolencredentialstologintolegitimatesite()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10349,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Use stolen credentials to log into legitimate site",
            "match": {
              "location": "usestolencredentialstologintolegitimatesite.assusestolencredentialstologintolegitimatesite()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-163: Spear Phishing",
    "description": "",
    "id": "capec-163:-spear-phishing",
    "keyword": "Feature",
    "uri": "CAPEC_163_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec163"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Request Footprinting",
        "description": "",
        "id": "capec-169:-footprinting;step1.1-request-footprinting",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 51019,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Request Footprinting",
            "match": {
              "location": "requestfootprinting.prerequestfootprinting()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 16073,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Request Footprinting",
            "match": {
              "location": "requestfootprinting.tryrequestfootprinting()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12261,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Request Footprinting",
            "match": {
              "location": "requestfootprinting.assrequestfootprinting()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-169: Footprinting",
    "description": "",
    "id": "capec-169:-footprinting",
    "keyword": "Feature",
    "uri": "CAPEC_169_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec169"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Determine application\u0027s/system\u0027s password policy",
        "description": "",
        "id": "capec-16:-dictionary-based-password-attack;step1.1-determine-application\u0027s/system\u0027s-password-policy",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 100645,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine application\u0027s/system\u0027s password policy",
            "match": {
              "location": "determineapplicationssystemspasswordpolicy.predetermineapplicationssystemspasswordpolicy()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 23899,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine application\u0027s/system\u0027s password policy",
            "match": {
              "location": "determineapplicationssystemspasswordpolicy.trydetermineapplicationssystemspasswordpolicy()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 34544,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine application\u0027s/system\u0027s password policy",
            "match": {
              "location": "determineapplicationssystemspasswordpolicy.assdetermineapplicationssystemspasswordpolicy()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-16: Dictionary-based Password Attack",
    "description": "",
    "id": "capec-16:-dictionary-based-password-attack",
    "keyword": "Feature",
    "uri": "CAPEC_16_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec16"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Select dictionaries",
        "description": "",
        "id": "capec-16:-dictionary-based-password-attack;step1.2-select-dictionaries",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 106812,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Select dictionaries",
            "match": {
              "location": "selectdictionaries.preselectdictionaries()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12777,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Select dictionaries",
            "match": {
              "location": "selectdictionaries.tryselectdictionaries()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15823,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Select dictionaries",
            "match": {
              "location": "selectdictionaries.assselectdictionaries()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-16: Dictionary-based Password Attack",
    "description": "",
    "id": "capec-16:-dictionary-based-password-attack",
    "keyword": "Feature",
    "uri": "CAPEC_16_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec16"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.3 Determine username(s) to target",
        "description": "",
        "id": "capec-16:-dictionary-based-password-attack;step1.3-determine-username(s)-to-target",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to Determine username(s) to target",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to Determine username(s) to target",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine username(s) to target",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-16: Dictionary-based Password Attack",
    "description": "",
    "id": "capec-16:-dictionary-based-password-attack",
    "keyword": "Feature",
    "uri": "CAPEC_16_Step_1_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec16"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Use dictionary to crack passwords.",
        "description": "",
        "id": "capec-16:-dictionary-based-password-attack;step2.1-use-dictionary-to-crack-passwords.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 65495,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Use dictionary to crack passwords.",
            "match": {
              "location": "usedictionarytocrackpasswords.preusedictionarytocrackpasswords()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12377,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Use dictionary to crack passwords.",
            "match": {
              "location": "usedictionarytocrackpasswords.tryusedictionarytocrackpasswords()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9247,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Use dictionary to crack passwords.",
            "match": {
              "location": "usedictionarytocrackpasswords.assusedictionarytocrackpasswords()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15815,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-16: Dictionary-based Password Attack",
    "description": "",
    "id": "capec-16:-dictionary-based-password-attack",
    "keyword": "Feature",
    "uri": "CAPEC_16_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec16"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Request fingerprinting",
        "description": "",
        "id": "capec-170:-web-application-fingerprinting;step1.1-request-fingerprinting",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 67996,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Request fingerprinting",
            "match": {
              "location": "requestfingerprinting.prerequestfingerprinting()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10188,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Request fingerprinting",
            "match": {
              "location": "requestfingerprinting.tryrequestfingerprinting()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9726,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Request fingerprinting",
            "match": {
              "location": "requestfingerprinting.assrequestfingerprinting()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-170: Web Application Fingerprinting",
    "description": "",
    "id": "capec-170:-web-application-fingerprinting",
    "keyword": "Feature",
    "uri": "CAPEC_170_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec170"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Increase the accuracy of server fingerprinting of Web servers",
        "description": "",
        "id": "capec-170:-web-application-fingerprinting;step2.1-increase-the-accuracy-of-server-fingerprinting-of-web-servers",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 70531,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Increase the accuracy of server fingerprinting of Web servers",
            "match": {
              "location": "increasetheaccuracyofserverfingerprintingofwebservers.preincreasetheaccuracyofserverfingerprintingofwebservers()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 16800,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Increase the accuracy of server fingerprinting of Web servers",
            "match": {
              "location": "increasetheaccuracyofserverfingerprintingofwebservers.tryincreasetheaccuracyofserverfingerprintingofwebservers()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12039,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Increase the accuracy of server fingerprinting of Web servers",
            "match": {
              "location": "increasetheaccuracyofserverfingerprintingofwebservers.assincreasetheaccuracyofserverfingerprintingofwebservers()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-170: Web Application Fingerprinting",
    "description": "",
    "id": "capec-170:-web-application-fingerprinting",
    "keyword": "Feature",
    "uri": "CAPEC_170_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec170"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.2 Identify Web Application Software",
        "description": "",
        "id": "capec-170:-web-application-fingerprinting;step2.2-identify-web-application-software",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 62981,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify Web Application Software",
            "match": {
              "location": "identifywebapplicationsoftware.preidentifywebapplicationsoftware()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 14426,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify Web Application Software",
            "match": {
              "location": "identifywebapplicationsoftware.tryidentifywebapplicationsoftware()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10112,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify Web Application Software",
            "match": {
              "location": "identifywebapplicationsoftware.assidentifywebapplicationsoftware()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-170: Web Application Fingerprinting",
    "description": "",
    "id": "capec-170:-web-application-fingerprinting",
    "keyword": "Feature",
    "uri": "CAPEC_170_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec170"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.3 Identify Backend Database Version",
        "description": "",
        "id": "capec-170:-web-application-fingerprinting;step2.3-identify-backend-database-version",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 129893,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify Backend Database Version",
            "match": {
              "location": "identifybackenddatabaseversion.preidentifybackenddatabaseversion()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 21465,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify Backend Database Version",
            "match": {
              "location": "identifybackenddatabaseversion.tryidentifybackenddatabaseversion()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15990,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify Backend Database Version",
            "match": {
              "location": "identifybackenddatabaseversion.assidentifybackenddatabaseversion()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-170: Web Application Fingerprinting",
    "description": "",
    "id": "capec-170:-web-application-fingerprinting",
    "keyword": "Feature",
    "uri": "CAPEC_170_Step_2_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec170"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Spider",
        "description": "",
        "id": "capec-174:-flash-parameter-injection;step1.1-spider",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2098608,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat ✽.Given prepare to Spider(CAPEC_174_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Spider",
            "match": {
              "location": "spider.prespider()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Spider",
            "match": {
              "location": "spider.tryspider()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Spider",
            "match": {
              "location": "spider.assspider()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-174: Flash Parameter Injection",
    "description": "",
    "id": "capec-174:-flash-parameter-injection",
    "keyword": "Feature",
    "uri": "CAPEC_174_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec174"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Determine the application susceptibility to Flash parameter injection",
        "description": "",
        "id": "capec-174:-flash-parameter-injection;step2.1-determine-the-application-susceptibility-to-flash-parameter-injection",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 60404,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine the application susceptibility to Flash parameter injection",
            "match": {
              "location": "determinetheapplicationsusceptibilitytoflashparameterinjection.predeterminetheapplicationsusceptibilitytoflashparameterinjection()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12893,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine the application susceptibility to Flash parameter injection",
            "match": {
              "location": "determinetheapplicationsusceptibilitytoflashparameterinjection.trydeterminetheapplicationsusceptibilitytoflashparameterinjection()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9280,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine the application susceptibility to Flash parameter injection",
            "match": {
              "location": "determinetheapplicationsusceptibilitytoflashparameterinjection.assdeterminetheapplicationsusceptibilitytoflashparameterinjection()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18891,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9307,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7760,
              "status": "passed"
            },
            "comments": [
              {
                "line": 12,
                "value": "# alternative output guard"
              },
              {
                "line": 13,
                "value": "# alternative input guard"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6788,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative application firewall"
              },
              {
                "line": 16,
                "value": "# benifits output guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern pathname canonicalization",
            "match": {
              "location": "PatternSteps.asspathnamecanonicalization()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6722,
              "status": "passed"
            },
            "line": 18,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6897,
              "status": "passed"
            },
            "comments": [
              {
                "line": 19,
                "value": "# alternative application firewall"
              },
              {
                "line": 20,
                "value": "# benifits input guard"
              }
            ],
            "line": 21,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-174: Flash Parameter Injection",
    "description": "",
    "id": "capec-174:-flash-parameter-injection",
    "keyword": "Feature",
    "uri": "CAPEC_174_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec174"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Identification",
        "description": "",
        "id": "capec-178:-cross-site-flashing;step1.1-identification",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 48408,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identification",
            "match": {
              "location": "identification.preidentification()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8778,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identification",
            "match": {
              "location": "identification.tryidentification()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9611,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identification",
            "match": {
              "location": "identification.assidentification()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-178: Cross-Site Flashing",
    "description": "",
    "id": "capec-178:-cross-site-flashing",
    "keyword": "Feature",
    "uri": "CAPEC_178_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec178"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attempt to inject a remote flash file",
        "description": "",
        "id": "capec-178:-cross-site-flashing;step2.1-attempt-to-inject-a-remote-flash-file",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 58042,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Attempt to inject a remote flash file",
            "match": {
              "location": "attempttoinjectaremoteflashfile.preattempttoinjectaremoteflashfile()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8925,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Attempt to inject a remote flash file",
            "match": {
              "location": "attempttoinjectaremoteflashfile.tryattempttoinjectaremoteflashfile()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8552,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attempt to inject a remote flash file",
            "match": {
              "location": "attempttoinjectaremoteflashfile.assattempttoinjectaremoteflashfile()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-178: Cross-Site Flashing",
    "description": "",
    "id": "capec-178:-cross-site-flashing",
    "keyword": "Feature",
    "uri": "CAPEC_178_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec178"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Access or Modify Flash Application Variables",
        "description": "",
        "id": "capec-178:-cross-site-flashing;step3.1-access-or-modify-flash-application-variables",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 66310,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Access or Modify Flash Application Variables",
            "match": {
              "location": "accessormodifyflashapplicationvariables.preaccessormodifyflashapplicationvariables()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 23309,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Access or Modify Flash Application Variables",
            "match": {
              "location": "accessormodifyflashapplicationvariables.tryaccessormodifyflashapplicationvariables()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 19836,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Access or Modify Flash Application Variables",
            "match": {
              "location": "accessormodifyflashapplicationvariables.assaccessormodifyflashapplicationvariables()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23063,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9184,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-178: Cross-Site Flashing",
    "description": "",
    "id": "capec-178:-cross-site-flashing",
    "keyword": "Feature",
    "uri": "CAPEC_178_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec178"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Execute JavaScript in victim\u0027s browser",
        "description": "",
        "id": "capec-178:-cross-site-flashing;step3.2-execute-javascript-in-victim\u0027s-browser",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 79494,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Execute JavaScript in victim\u0027s browser",
            "match": {
              "location": "executejavascriptinvictimsbrowser.preexecutejavascriptinvictimsbrowser()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 49879,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Execute JavaScript in victim\u0027s browser",
            "match": {
              "location": "executejavascriptinvictimsbrowser.tryexecutejavascriptinvictimsbrowser()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16207,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Execute JavaScript in victim\u0027s browser",
            "match": {
              "location": "executejavascriptinvictimsbrowser.assexecutejavascriptinvictimsbrowser()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 22332,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11612,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-178: Cross-Site Flashing",
    "description": "",
    "id": "capec-178:-cross-site-flashing",
    "keyword": "Feature",
    "uri": "CAPEC_178_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec178"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey",
        "description": "",
        "id": "capec-180:-exploiting-incorrectly-configured-access-control-security-levels;step1.1-survey",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2024402,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.survey.presurvey(survey.java:17)\n\tat ✽.Given prepare to Survey(CAPEC_180_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.survey.presurvey(survey.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Survey",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-180: Exploiting Incorrectly Configured Access Control Security Levels",
    "description": "",
    "id": "capec-180:-exploiting-incorrectly-configured-access-control-security-levels",
    "keyword": "Feature",
    "uri": "CAPEC_180_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec180"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Identify weak points in access control configurations",
        "description": "",
        "id": "capec-180:-exploiting-incorrectly-configured-access-control-security-levels;step2.1-identify-weak-points-in-access-control-configurations",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 55418,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify weak points in access control configurations",
            "match": {
              "location": "identifyweakpointsinaccesscontrolconfigurations.preidentifyweakpointsinaccesscontrolconfigurations()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 38276,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify weak points in access control configurations",
            "match": {
              "location": "identifyweakpointsinaccesscontrolconfigurations.tryidentifyweakpointsinaccesscontrolconfigurations()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9542,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify weak points in access control configurations",
            "match": {
              "location": "identifyweakpointsinaccesscontrolconfigurations.assidentifyweakpointsinaccesscontrolconfigurations()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-180: Exploiting Incorrectly Configured Access Control Security Levels",
    "description": "",
    "id": "capec-180:-exploiting-incorrectly-configured-access-control-security-levels",
    "keyword": "Feature",
    "uri": "CAPEC_180_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec180"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Access the function or data bypassing the access control",
        "description": "",
        "id": "capec-180:-exploiting-incorrectly-configured-access-control-security-levels;step3.1-access-the-function-or-data-bypassing-the-access-control",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 100762,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Access the function or data bypassing the access control",
            "match": {
              "location": "accessthefunctionordatabypassingtheaccesscontrol.preaccessthefunctionordatabypassingtheaccesscontrol()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 46711,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Access the function or data bypassing the access control",
            "match": {
              "location": "accessthefunctionordatabypassingtheaccesscontrol.tryaccessthefunctionordatabypassingtheaccesscontrol()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17382,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Access the function or data bypassing the access control",
            "match": {
              "location": "accessthefunctionordatabypassingtheaccesscontrol.assaccessthefunctionordatabypassingtheaccesscontrol()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-180: Exploiting Incorrectly Configured Access Control Security Levels",
    "description": "",
    "id": "capec-180:-exploiting-incorrectly-configured-access-control-security-levels",
    "keyword": "Feature",
    "uri": "CAPEC_180_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec180"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Find Injection Entry Points",
        "description": "",
        "id": "capec-182:-flash-injection;step1.1-find-injection-entry-points",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 94288,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Find Injection Entry Points",
            "match": {
              "location": "findinjectionentrypoints.prefindinjectionentrypoints()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 15381,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Find Injection Entry Points",
            "match": {
              "location": "findinjectionentrypoints.tryfindinjectionentrypoints()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8848,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Find Injection Entry Points",
            "match": {
              "location": "findinjectionentrypoints.assfindinjectionentrypoints()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-182: Flash Injection",
    "description": "",
    "id": "capec-182:-flash-injection",
    "keyword": "Feature",
    "uri": "CAPEC_182_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec182"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Determine the application\u0027s susceptibility to Flash injection",
        "description": "",
        "id": "capec-182:-flash-injection;step2.1-determine-the-application\u0027s-susceptibility-to-flash-injection",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 74808,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine the application\u0027s susceptibility to Flash injection",
            "match": {
              "location": "determinetheapplicationssusceptibilitytoflashinjection.predeterminetheapplicationssusceptibilitytoflashinjection()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 13064,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine the application\u0027s susceptibility to Flash injection",
            "match": {
              "location": "determinetheapplicationssusceptibilitytoflashinjection.trydeterminetheapplicationssusceptibilitytoflashinjection()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15829,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine the application\u0027s susceptibility to Flash injection",
            "match": {
              "location": "determinetheapplicationssusceptibilitytoflashinjection.assdeterminetheapplicationssusceptibilitytoflashinjection()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-182: Flash Injection",
    "description": "",
    "id": "capec-182:-flash-injection",
    "keyword": "Feature",
    "uri": "CAPEC_182_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec182"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Inject malicious content into target",
        "description": "",
        "id": "capec-182:-flash-injection;step3.1-inject-malicious-content-into-target",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 84493,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Inject malicious content into target",
            "match": {
              "location": "injectmaliciouscontentintotarget.preinjectmaliciouscontentintotarget()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 15785,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Inject malicious content into target",
            "match": {
              "location": "injectmaliciouscontentintotarget.tryinjectmaliciouscontentintotarget()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16996,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Inject malicious content into target",
            "match": {
              "location": "injectmaliciouscontentintotarget.assinjectmaliciouscontentintotarget()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-182: Flash Injection",
    "description": "",
    "id": "capec-182:-flash-injection",
    "keyword": "Feature",
    "uri": "CAPEC_182_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec182"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Spider",
        "description": "",
        "id": "capec-18:-embedding-scripts-in-non-script-elements;step1.1-spider",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1500413,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat ✽.Given prepare to Spider(CAPEC_18_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Spider",
            "match": {
              "location": "spider.prespider()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Spider",
            "match": {
              "location": "spider.tryspider()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Spider",
            "match": {
              "location": "spider.assspider()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-18: Embedding Scripts in Non-Script Elements",
    "description": "",
    "id": "capec-18:-embedding-scripts-in-non-script-elements",
    "keyword": "Feature",
    "uri": "CAPEC_18_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec18"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Probe identified potential entry points for XSS vulnerability",
        "description": "",
        "id": "capec-18:-embedding-scripts-in-non-script-elements;step2.1-probe-identified-potential-entry-points-for-xss-vulnerability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1863387,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability(probeidentifiedpotentialentrypointsforxssvulnerability.java:15)\n\tat ✽.Given prepare to Probe identified potential entry points for XSS vulnerability(CAPEC_18_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability(probeidentifiedpotentialentrypointsforxssvulnerability.java:15)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.tryprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.assprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative output guard"
              },
              {
                "line": 14,
                "value": "# alternative input guard"
              }
            ],
            "line": 15,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 16,
                "value": "# alternative application firewall"
              },
              {
                "line": 17,
                "value": "# benifits output guard"
              }
            ],
            "line": 18,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 19,
                "value": "# alternative application firewall"
              },
              {
                "line": 20,
                "value": "# benifits input guard"
              }
            ],
            "line": 21,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 22,
                "value": "# alternative output guard"
              },
              {
                "line": 23,
                "value": "# impairs audit interceptor"
              }
            ],
            "line": 24,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-18: Embedding Scripts in Non-Script Elements",
    "description": "",
    "id": "capec-18:-embedding-scripts-in-non-script-elements",
    "keyword": "Feature",
    "uri": "CAPEC_18_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec18"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Steal session IDs, credentials, page content, etc.",
        "description": "",
        "id": "capec-18:-embedding-scripts-in-non-script-elements;step3.1-steal-session-ids,-credentials,-page-content,-etc.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 70157,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.prestealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11878,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.trystealsessionidscredentialspagecontentetc()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 13151,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.assstealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21570,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9218,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9619,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9175,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9095,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9188,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-18: Embedding Scripts in Non-Script Elements",
    "description": "",
    "id": "capec-18:-embedding-scripts-in-non-script-elements",
    "keyword": "Feature",
    "uri": "CAPEC_18_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec18"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Forceful browsing",
        "description": "",
        "id": "capec-18:-embedding-scripts-in-non-script-elements;step3.2-forceful-browsing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 70424,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.preforcefulbrowsing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 13229,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.tryforcefulbrowsing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11672,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.assforcefulbrowsing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19734,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 22480,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11972,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12492,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 31060,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14655,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-18: Embedding Scripts in Non-Script Elements",
    "description": "",
    "id": "capec-18:-embedding-scripts-in-non-script-elements",
    "keyword": "Feature",
    "uri": "CAPEC_18_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec18"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.3 Content spoofing",
        "description": "",
        "id": "capec-18:-embedding-scripts-in-non-script-elements;step3.3-content-spoofing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 86572,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Content spoofing",
            "match": {
              "location": "contentspoofing.precontentspoofing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 26128,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Content spoofing",
            "match": {
              "location": "contentspoofing.trycontentspoofing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 19655,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Content spoofing",
            "match": {
              "location": "contentspoofing.asscontentspoofing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 29070,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14185,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14332,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19490,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 25667,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15036,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-18: Embedding Scripts in Non-Script Elements",
    "description": "",
    "id": "capec-18:-embedding-scripts-in-non-script-elements",
    "keyword": "Feature",
    "uri": "CAPEC_18_Step_3_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec18"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey application",
        "description": "",
        "id": "capec-193:-php-remote-file-inclusion;step1.1-survey-application",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey application(CAPEC_193_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey application in surveyapplication.presurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey application",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey application(CAPEC_193_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey application in surveyapplication.trysurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey application",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey application(CAPEC_193_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey application in surveyapplication.asssurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey application",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-193: PHP Remote File Inclusion",
    "description": "",
    "id": "capec-193:-php-remote-file-inclusion",
    "keyword": "Feature",
    "uri": "CAPEC_193_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec193"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attempt variations on input parameters",
        "description": "",
        "id": "capec-193:-php-remote-file-inclusion;step2.1-attempt-variations-on-input-parameters",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3419903,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptvariationsoninputparameters.preattemptvariationsoninputparameters(attemptvariationsoninputparameters.java:19)\n\tat ✽.Given prepare to Attempt variations on input parameters(CAPEC_193_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptvariationsoninputparameters.preattemptvariationsoninputparameters(attemptvariationsoninputparameters.java:19)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Attempt variations on input parameters",
            "match": {
              "location": "attemptvariationsoninputparameters.preattemptvariationsoninputparameters()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Attempt variations on input parameters",
            "match": {
              "location": "attemptvariationsoninputparameters.tryattemptvariationsoninputparameters()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attempt variations on input parameters",
            "match": {
              "location": "attemptvariationsoninputparameters.assattemptvariationsoninputparameters()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative input guard"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 17,
                "value": "# alternative application firewall"
              }
            ],
            "line": 18,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-193: PHP Remote File Inclusion",
    "description": "",
    "id": "capec-193:-php-remote-file-inclusion",
    "keyword": "Feature",
    "uri": "CAPEC_193_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec193"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Run arbitrary server-side code",
        "description": "",
        "id": "capec-193:-php-remote-file-inclusion;step3.1-run-arbitrary-server-side-code",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 88093,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Run arbitrary server-side code",
            "match": {
              "location": "runarbitraryserversidecode.prerunarbitraryserversidecode()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18928,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Run arbitrary server-side code",
            "match": {
              "location": "runarbitraryserversidecode.tryrunarbitraryserversidecode()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12434,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Run arbitrary server-side code",
            "match": {
              "location": "runarbitraryserversidecode.assrunarbitraryserversidecode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21550,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11311,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10555,
              "status": "passed"
            },
            "comments": [
              {
                "line": 12,
                "value": "# alternative input guard"
              }
            ],
            "line": 13,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 14,
                "value": "# alternative application firewall"
              }
            ],
            "line": 15,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-193: PHP Remote File Inclusion",
    "description": "",
    "id": "capec-193:-php-remote-file-inclusion",
    "keyword": "Feature",
    "uri": "CAPEC_193_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec193"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Analyze and Understand Session IDs",
        "description": "",
        "id": "capec-196:-session-credential-falsification-through-forging;step1.1-analyze-and-understand-session-ids",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 63905,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Analyze and Understand Session IDs",
            "match": {
              "location": "analyzeandunderstandsessionids.preanalyzeandunderstandsessionids()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10816,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Analyze and Understand Session IDs",
            "match": {
              "location": "analyzeandunderstandsessionids.tryanalyzeandunderstandsessionids()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10977,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Analyze and Understand Session IDs",
            "match": {
              "location": "analyzeandunderstandsessionids.assanalyzeandunderstandsessionids()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-196: Session Credential Falsification through Forging",
    "description": "",
    "id": "capec-196:-session-credential-falsification-through-forging",
    "keyword": "Feature",
    "uri": "CAPEC_196_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec196"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Create Session IDs.",
        "description": "",
        "id": "capec-196:-session-credential-falsification-through-forging;step2.1-create-session-ids.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 48082,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Create Session IDs.",
            "match": {
              "location": "createsessionids.precreatesessionids()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10729,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Create Session IDs.",
            "match": {
              "location": "createsessionids.trycreatesessionids()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10785,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Create Session IDs.",
            "match": {
              "location": "createsessionids.asscreatesessionids()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16093,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-196: Session Credential Falsification through Forging",
    "description": "",
    "id": "capec-196:-session-credential-falsification-through-forging",
    "keyword": "Feature",
    "uri": "CAPEC_196_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec196"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Abuse the Victim\u0027s Session Credentials",
        "description": "",
        "id": "capec-196:-session-credential-falsification-through-forging;step3.1-abuse-the-victim\u0027s-session-credentials",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Abuse the Victim\u0027s Session Credentials(CAPEC_196_Step_3_1.feature:5) matches more than one step definition:\n  prepare to Abuse the Victim\u0027s Session in abusethevictimssession.preabusethevictimssession()\n  prepare to Abuse the Victim\u0027s Session Credentials in abusethevictimssessioncredentials.preabusethevictimssessioncredentials()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Abuse the Victim\u0027s Session Credentials",
            "match": {
              "location": "abusethevictimssession.preabusethevictimssession()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Abuse the Victim\u0027s Session Credentials(CAPEC_196_Step_3_1.feature:6) matches more than one step definition:\n  Try to Abuse the Victim\u0027s Session in abusethevictimssession.tryabusethevictimssession()\n  Try to Abuse the Victim\u0027s Session Credentials in abusethevictimssessioncredentials.tryabusethevictimssessioncredentials()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Abuse the Victim\u0027s Session Credentials",
            "match": {
              "location": "abusethevictimssession.tryabusethevictimssession()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Abuse the Victim\u0027s Session Credentials(CAPEC_196_Step_3_1.feature:8) matches more than one step definition:\n  Assert the success of Abuse the Victim\u0027s Session in abusethevictimssession.assabusethevictimssession()\n  Assert the success of Abuse the Victim\u0027s Session Credentials in abusethevictimssessioncredentials.assabusethevictimssessioncredentials()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Abuse the Victim\u0027s Session Credentials",
            "match": {
              "location": "abusethevictimssession.assabusethevictimssession()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative input guard"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-196: Session Credential Falsification through Forging",
    "description": "",
    "id": "capec-196:-session-credential-falsification-through-forging",
    "keyword": "Feature",
    "uri": "CAPEC_196_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec196"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey the target",
        "description": "",
        "id": "capec-197:-xml-entity-expansion;step1.1-survey-the-target",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey the target(CAPEC_197_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey the target in surveythetarget.presurveythetarget()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the target",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey the target(CAPEC_197_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey the target in surveythetarget.trysurveythetarget()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey the target",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey the target(CAPEC_197_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey the target in surveythetarget.asssurveythetarget()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the target",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-197: XML Entity Expansion",
    "description": "",
    "id": "capec-197:-xml-entity-expansion",
    "keyword": "Feature",
    "uri": "CAPEC_197_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec197"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Launch an XML Entity Expansion attack",
        "description": "",
        "id": "capec-197:-xml-entity-expansion;step2.1-launch-an-xml-entity-expansion-attack",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 72635,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Launch an XML Entity Expansion attack",
            "match": {
              "location": "launchanxmlentityexpansionattack.prelaunchanxmlentityexpansionattack()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 13885,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Launch an XML Entity Expansion attack",
            "match": {
              "location": "launchanxmlentityexpansionattack.trylaunchanxmlentityexpansionattack()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11385,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Launch an XML Entity Expansion attack",
            "match": {
              "location": "launchanxmlentityexpansionattack.asslaunchanxmlentityexpansionattack()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-197: XML Entity Expansion",
    "description": "",
    "id": "capec-197:-xml-entity-expansion",
    "keyword": "Feature",
    "uri": "CAPEC_197_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec197"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey the application",
        "description": "",
        "id": "capec-199:-cross-site-scripting-using-alternate-syntax;step1.1-survey-the-application",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey the application(CAPEC_199_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey the application in surveytheapplication.presurveytheapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the application",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey the application(CAPEC_199_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey the application in surveytheapplication.trysurveytheapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey the application",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey the application(CAPEC_199_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey the application in surveytheapplication.asssurveytheapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the application",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-199: Cross-Site Scripting Using Alternate Syntax",
    "description": "",
    "id": "capec-199:-cross-site-scripting-using-alternate-syntax",
    "keyword": "Feature",
    "uri": "CAPEC_199_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec199"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attempt injection payload variations on input parameters",
        "description": "",
        "id": "capec-199:-cross-site-scripting-using-alternate-syntax;step2.1-attempt-injection-payload-variations-on-input-parameters",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1850986,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptinjectionpayloadvariationsoninputparameters.preattemptinjectionpayloadvariationsoninputparameters(attemptinjectionpayloadvariationsoninputparameters.java:16)\n\tat ✽.Given prepare to Attempt injection payload variations on input parameters(CAPEC_199_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptinjectionpayloadvariationsoninputparameters.preattemptinjectionpayloadvariationsoninputparameters(attemptinjectionpayloadvariationsoninputparameters.java:16)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Attempt injection payload variations on input parameters",
            "match": {
              "location": "attemptinjectionpayloadvariationsoninputparameters.preattemptinjectionpayloadvariationsoninputparameters()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Attempt injection payload variations on input parameters",
            "match": {
              "location": "attemptinjectionpayloadvariationsoninputparameters.tryattemptinjectionpayloadvariationsoninputparameters()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attempt injection payload variations on input parameters",
            "match": {
              "location": "attemptinjectionpayloadvariationsoninputparameters.assattemptinjectionpayloadvariationsoninputparameters()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative input guard"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-199: Cross-Site Scripting Using Alternate Syntax",
    "description": "",
    "id": "capec-199:-cross-site-scripting-using-alternate-syntax",
    "keyword": "Feature",
    "uri": "CAPEC_199_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec199"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Steal session IDs, credentials, page content, etc.",
        "description": "",
        "id": "capec-199:-cross-site-scripting-using-alternate-syntax;step3.1-steal-session-ids,-credentials,-page-content,-etc.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 29801,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.prestealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10198,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.trystealsessionidscredentialspagecontentetc()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7819,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.assstealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17274,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10219,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10720,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10405,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8599,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7464,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-199: Cross-Site Scripting Using Alternate Syntax",
    "description": "",
    "id": "capec-199:-cross-site-scripting-using-alternate-syntax",
    "keyword": "Feature",
    "uri": "CAPEC_199_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec199"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Forceful browsing",
        "description": "",
        "id": "capec-199:-cross-site-scripting-using-alternate-syntax;step3.2-forceful-browsing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 39202,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.preforcefulbrowsing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10479,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.tryforcefulbrowsing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9986,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.assforcefulbrowsing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19001,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10825,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 282989,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 267165,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 25934,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9549,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-199: Cross-Site Scripting Using Alternate Syntax",
    "description": "",
    "id": "capec-199:-cross-site-scripting-using-alternate-syntax",
    "keyword": "Feature",
    "uri": "CAPEC_199_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec199"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.3 Content spoofing",
        "description": "",
        "id": "capec-199:-cross-site-scripting-using-alternate-syntax;step3.3-content-spoofing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 54623,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Content spoofing",
            "match": {
              "location": "contentspoofing.precontentspoofing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 16191,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Content spoofing",
            "match": {
              "location": "contentspoofing.trycontentspoofing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6604,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Content spoofing",
            "match": {
              "location": "contentspoofing.asscontentspoofing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15316,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7001,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17696,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14565,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7528,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5872,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-199: Cross-Site Scripting Using Alternate Syntax",
    "description": "",
    "id": "capec-199:-cross-site-scripting-using-alternate-syntax",
    "keyword": "Feature",
    "uri": "CAPEC_199_Step_3_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec199"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Spider",
        "description": "",
        "id": "capec-19:-embedding-scripts-within-scripts;step1.1-spider",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2200289,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat ✽.Given prepare to Spider(CAPEC_19_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Spider",
            "match": {
              "location": "spider.prespider()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Spider",
            "match": {
              "location": "spider.tryspider()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Spider",
            "match": {
              "location": "spider.assspider()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-19: Embedding Scripts within Scripts",
    "description": "",
    "id": "capec-19:-embedding-scripts-within-scripts",
    "keyword": "Feature",
    "uri": "CAPEC_19_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec19"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Probe identified potential entry points for XSS vulnerability",
        "description": "",
        "id": "capec-19:-embedding-scripts-within-scripts;step2.1-probe-identified-potential-entry-points-for-xss-vulnerability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2090855,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability(probeidentifiedpotentialentrypointsforxssvulnerability.java:15)\n\tat ✽.Given prepare to Probe identified potential entry points for XSS vulnerability(CAPEC_19_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability(probeidentifiedpotentialentrypointsforxssvulnerability.java:15)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.tryprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.assprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative input guard"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative application firewall"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-19: Embedding Scripts within Scripts",
    "description": "",
    "id": "capec-19:-embedding-scripts-within-scripts",
    "keyword": "Feature",
    "uri": "CAPEC_19_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec19"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Steal session IDs, credentials, page content, etc.",
        "description": "",
        "id": "capec-19:-embedding-scripts-within-scripts;step3.1-steal-session-ids,-credentials,-page-content,-etc.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 26652,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.prestealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6920,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.trystealsessionidscredentialspagecontentetc()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6346,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.assstealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17518,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6419,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6476,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6049,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6918,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16079,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-19: Embedding Scripts within Scripts",
    "description": "",
    "id": "capec-19:-embedding-scripts-within-scripts",
    "keyword": "Feature",
    "uri": "CAPEC_19_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec19"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Forceful browsing",
        "description": "",
        "id": "capec-19:-embedding-scripts-within-scripts;step3.2-forceful-browsing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 36880,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.preforcefulbrowsing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8936,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.tryforcefulbrowsing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7443,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.assforcefulbrowsing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16661,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6283,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6135,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5526,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6140,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5497,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-19: Embedding Scripts within Scripts",
    "description": "",
    "id": "capec-19:-embedding-scripts-within-scripts",
    "keyword": "Feature",
    "uri": "CAPEC_19_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec19"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.3 Content spoofing",
        "description": "",
        "id": "capec-19:-embedding-scripts-within-scripts;step3.3-content-spoofing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 35289,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Content spoofing",
            "match": {
              "location": "contentspoofing.precontentspoofing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8277,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Content spoofing",
            "match": {
              "location": "contentspoofing.trycontentspoofing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8334,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Content spoofing",
            "match": {
              "location": "contentspoofing.asscontentspoofing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19873,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8172,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7682,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7528,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9269,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8276,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-19: Embedding Scripts within Scripts",
    "description": "",
    "id": "capec-19:-embedding-scripts-within-scripts",
    "keyword": "Feature",
    "uri": "CAPEC_19_Step_3_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec19"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey",
        "description": "",
        "id": "capec-1:-accessing-functionality-not-properly-constrained-by-acls;step1.1-survey",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2215467,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.survey.presurvey(survey.java:17)\n\tat ✽.Given prepare to Survey(CAPEC_1_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.survey.presurvey(survey.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Survey",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-1: Accessing Functionality Not Properly Constrained by ACLs",
    "description": "",
    "id": "capec-1:-accessing-functionality-not-properly-constrained-by-acls",
    "keyword": "Feature",
    "uri": "CAPEC_1_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec1"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Identify Functionality",
        "description": "",
        "id": "capec-1:-accessing-functionality-not-properly-constrained-by-acls;step1.2-identify-functionality",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 73888,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify Functionality",
            "match": {
              "location": "identifyfunctionality.preidentifyfunctionality()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18257,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify Functionality",
            "match": {
              "location": "identifyfunctionality.tryidentifyfunctionality()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16183,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify Functionality",
            "match": {
              "location": "identifyfunctionality.assidentifyfunctionality()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-1: Accessing Functionality Not Properly Constrained by ACLs",
    "description": "",
    "id": "capec-1:-accessing-functionality-not-properly-constrained-by-acls",
    "keyword": "Feature",
    "uri": "CAPEC_1_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec1"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Iterate over access capabilities",
        "description": "",
        "id": "capec-1:-accessing-functionality-not-properly-constrained-by-acls;step2.1-iterate-over-access-capabilities",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 71208,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Iterate over access capabilities",
            "match": {
              "location": "iterateoveraccesscapabilities.preiterateoveraccesscapabilities()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12538,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Iterate over access capabilities",
            "match": {
              "location": "iterateoveraccesscapabilities.tryiterateoveraccesscapabilities()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 21689,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Iterate over access capabilities",
            "match": {
              "location": "iterateoveraccesscapabilities.assiterateoveraccesscapabilities()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-1: Accessing Functionality Not Properly Constrained by ACLs",
    "description": "",
    "id": "capec-1:-accessing-functionality-not-properly-constrained-by-acls",
    "keyword": "Feature",
    "uri": "CAPEC_1_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec1"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Identify Target",
        "description": "",
        "id": "capec-205:-lifting-credential(s)/key-material-embedded-in-client-distributions-(thick-or-thin);step1.1-identify-target",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 44165,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify Target",
            "match": {
              "location": "identifytarget.preidentifytarget()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11925,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify Target",
            "match": {
              "location": "identifytarget.tryidentifytarget()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 13519,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify Target",
            "match": {
              "location": "identifytarget.assidentifytarget()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 24392,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-205: Lifting credential(s)/key material embedded in client distributions (thick or thin)",
    "description": "",
    "id": "capec-205:-lifting-credential(s)/key-material-embedded-in-client-distributions-(thick-or-thin)",
    "keyword": "Feature",
    "uri": "CAPEC_205_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec205"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Apply mining techniques",
        "description": "",
        "id": "capec-205:-lifting-credential(s)/key-material-embedded-in-client-distributions-(thick-or-thin);step2.1-apply-mining-techniques",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 97676,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Apply mining techniques",
            "match": {
              "location": "applyminingtechniques.preapplyminingtechniques()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9702,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Apply mining techniques",
            "match": {
              "location": "applyminingtechniques.tryapplyminingtechniques()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9055,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Apply mining techniques",
            "match": {
              "location": "applyminingtechniques.assapplyminingtechniques()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-205: Lifting credential(s)/key material embedded in client distributions (thick or thin)",
    "description": "",
    "id": "capec-205:-lifting-credential(s)/key-material-embedded-in-client-distributions-(thick-or-thin)",
    "keyword": "Feature",
    "uri": "CAPEC_205_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec205"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Probing",
        "description": "",
        "id": "capec-207:-removing-important-client-functionality;step1.1-probing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 65691,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Probing",
            "match": {
              "location": "probing.preprobing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12900,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Probing",
            "match": {
              "location": "probing.tryprobing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 59703,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probing",
            "match": {
              "location": "probing.assprobing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-207: Removing Important Client Functionality",
    "description": "",
    "id": "capec-207:-removing-important-client-functionality",
    "keyword": "Feature",
    "uri": "CAPEC_207_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec207"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Determine which functionality to disable or remove",
        "description": "",
        "id": "capec-207:-removing-important-client-functionality;step2.1-determine-which-functionality-to-disable-or-remove",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 68730,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine which functionality to disable or remove",
            "match": {
              "location": "determinewhichfunctionalitytodisableorremove.predeterminewhichfunctionalitytodisableorremove()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9462,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine which functionality to disable or remove",
            "match": {
              "location": "determinewhichfunctionalitytodisableorremove.trydeterminewhichfunctionalitytodisableorremove()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8096,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine which functionality to disable or remove",
            "match": {
              "location": "determinewhichfunctionalitytodisableorremove.assdeterminewhichfunctionalitytodisableorremove()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-207: Removing Important Client Functionality",
    "description": "",
    "id": "capec-207:-removing-important-client-functionality",
    "keyword": "Feature",
    "uri": "CAPEC_207_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec207"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Disable or remove the critical functionality from the client code",
        "description": "",
        "id": "capec-207:-removing-important-client-functionality;step3.1-disable-or-remove-the-critical-functionality-from-the-client-code",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 47907,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Disable or remove the critical functionality from the client code",
            "match": {
              "location": "disableorremovethecriticalfunctionalityfromtheclientcode.predisableorremovethecriticalfunctionalityfromtheclientcode()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6800,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Disable or remove the critical functionality from the client code",
            "match": {
              "location": "disableorremovethecriticalfunctionalityfromtheclientcode.trydisableorremovethecriticalfunctionalityfromtheclientcode()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6102,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Disable or remove the critical functionality from the client code",
            "match": {
              "location": "disableorremovethecriticalfunctionalityfromtheclientcode.assdisableorremovethecriticalfunctionalityfromtheclientcode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-207: Removing Important Client Functionality",
    "description": "",
    "id": "capec-207:-removing-important-client-functionality",
    "keyword": "Feature",
    "uri": "CAPEC_207_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec207"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-20:-encryption-brute-forcing;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-20: Encryption Brute Forcing",
    "description": "",
    "id": "capec-20:-encryption-brute-forcing",
    "keyword": "Feature",
    "uri": "CAPEC_20_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec20"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-20:-encryption-brute-forcing;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-20: Encryption Brute Forcing",
    "description": "",
    "id": "capec-20:-encryption-brute-forcing",
    "keyword": "Feature",
    "uri": "CAPEC_20_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec20"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Probing",
        "description": "",
        "id": "capec-215:-fuzzing-and-observing-application-log-data/errors-for-application-mapping;step1.1-probing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 31808,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Probing",
            "match": {
              "location": "probing.preprobing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8089,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Probing",
            "match": {
              "location": "probing.tryprobing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6103,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probing",
            "match": {
              "location": "probing.assprobing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-215: Fuzzing and observing application log data/errors for application mapping",
    "description": "",
    "id": "capec-215:-fuzzing-and-observing-application-log-data/errors-for-application-mapping",
    "keyword": "Feature",
    "uri": "CAPEC_215_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec215"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Modify the parameters to get the desired information from the error messages.",
        "description": "",
        "id": "capec-215:-fuzzing-and-observing-application-log-data/errors-for-application-mapping;step2.1-modify-the-parameters-to-get-the-desired-information-from-the-error-messages.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 53284,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Modify the parameters to get the desired information from the error messages.",
            "match": {
              "location": "modifytheparameterstogetthedesiredinformationfromtheerrormessages.premodifytheparameterstogetthedesiredinformationfromtheerrormessages()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7957,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Modify the parameters to get the desired information from the error messages.",
            "match": {
              "location": "modifytheparameterstogetthedesiredinformationfromtheerrormessages.trymodifytheparameterstogetthedesiredinformationfromtheerrormessages()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6841,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Modify the parameters to get the desired information from the error messages.",
            "match": {
              "location": "modifytheparameterstogetthedesiredinformationfromtheerrormessages.assmodifytheparameterstogetthedesiredinformationfromtheerrormessages()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-215: Fuzzing and observing application log data/errors for application mapping",
    "description": "",
    "id": "capec-215:-fuzzing-and-observing-application-log-data/errors-for-application-mapping",
    "keyword": "Feature",
    "uri": "CAPEC_215_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec215"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-217:-exploiting-incorrectly-configured-ssl;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-217: Exploiting Incorrectly Configured SSL",
    "description": "",
    "id": "capec-217:-exploiting-incorrectly-configured-ssl",
    "keyword": "Feature",
    "uri": "CAPEC_217_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec217"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-217:-exploiting-incorrectly-configured-ssl;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-217: Exploiting Incorrectly Configured SSL",
    "description": "",
    "id": "capec-217:-exploiting-incorrectly-configured-ssl",
    "keyword": "Feature",
    "uri": "CAPEC_217_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec217"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-217:-exploiting-incorrectly-configured-ssl;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-217: Exploiting Incorrectly Configured SSL",
    "description": "",
    "id": "capec-217:-exploiting-incorrectly-configured-ssl",
    "keyword": "Feature",
    "uri": "CAPEC_217_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec217"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey the target",
        "description": "",
        "id": "capec-219:-xml-routing-detour-attacks;step1.1-survey-the-target",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey the target(CAPEC_219_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey the target in surveythetarget.presurveythetarget()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the target",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey the target(CAPEC_219_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey the target in surveythetarget.trysurveythetarget()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey the target",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey the target(CAPEC_219_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey the target in surveythetarget.asssurveythetarget()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the target",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-219: XML Routing Detour Attacks",
    "description": "",
    "id": "capec-219:-xml-routing-detour-attacks",
    "keyword": "Feature",
    "uri": "CAPEC_219_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec219"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Identify SOAP messages that have multiple state processing.",
        "description": "",
        "id": "capec-219:-xml-routing-detour-attacks;step2.1-identify-soap-messages-that-have-multiple-state-processing.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 113789,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify SOAP messages that have multiple state processing.",
            "match": {
              "location": "identifysoapmessagesthathavemultiplestateprocessing.preidentifysoapmessagesthathavemultiplestateprocessing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 31994,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify SOAP messages that have multiple state processing.",
            "match": {
              "location": "identifysoapmessagesthathavemultiplestateprocessing.tryidentifysoapmessagesthathavemultiplestateprocessing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8525,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify SOAP messages that have multiple state processing.",
            "match": {
              "location": "identifysoapmessagesthathavemultiplestateprocessing.assidentifysoapmessagesthathavemultiplestateprocessing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-219: XML Routing Detour Attacks",
    "description": "",
    "id": "capec-219:-xml-routing-detour-attacks",
    "keyword": "Feature",
    "uri": "CAPEC_219_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec219"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Launch an XML routing detour attack",
        "description": "",
        "id": "capec-219:-xml-routing-detour-attacks;step3.1-launch-an-xml-routing-detour-attack",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 73454,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Launch an XML routing detour attack",
            "match": {
              "location": "launchanxmlroutingdetourattack.prelaunchanxmlroutingdetourattack()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7275,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Launch an XML routing detour attack",
            "match": {
              "location": "launchanxmlroutingdetourattack.trylaunchanxmlroutingdetourattack()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7241,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Launch an XML routing detour attack",
            "match": {
              "location": "launchanxmlroutingdetourattack.asslaunchanxmlroutingdetourattack()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-219: XML Routing Detour Attacks",
    "description": "",
    "id": "capec-219:-xml-routing-detour-attacks",
    "keyword": "Feature",
    "uri": "CAPEC_219_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec219"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey the application for Indicators of Susceptibility",
        "description": "",
        "id": "capec-21:-exploitation-of-trusted-credentials;step1.1-survey-the-application-for-indicators-of-susceptibility",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey the application for Indicators of Susceptibility(CAPEC_21_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey the application in surveytheapplication.presurveytheapplication()\n  prepare to Survey the application for Indicators of Susceptibility in surveytheapplicationforindicatorsofsusceptibility.presurveytheapplicationforindicatorsofsusceptibility()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the application for Indicators of Susceptibility",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey the application for Indicators of Susceptibility(CAPEC_21_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey the application in surveytheapplication.trysurveytheapplication()\n  Try to Survey the application for Indicators of Susceptibility in surveytheapplicationforindicatorsofsusceptibility.trysurveytheapplicationforindicatorsofsusceptibility()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey the application for Indicators of Susceptibility",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey the application for Indicators of Susceptibility(CAPEC_21_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey the application in surveytheapplication.asssurveytheapplication()\n  Assert the success of Survey the application for Indicators of Susceptibility in surveytheapplicationforindicatorsofsusceptibility.asssurveytheapplicationforindicatorsofsusceptibility()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the application for Indicators of Susceptibility",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-21: Exploitation of Trusted Credentials",
    "description": "",
    "id": "capec-21:-exploitation-of-trusted-credentials",
    "keyword": "Feature",
    "uri": "CAPEC_21_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec21"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Fetch samples",
        "description": "",
        "id": "capec-21:-exploitation-of-trusted-credentials;step2.1-fetch-samples",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 79088,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Fetch samples",
            "match": {
              "location": "fetchsamples.prefetchsamples()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9135,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Fetch samples",
            "match": {
              "location": "fetchsamples.tryfetchsamples()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8376,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Fetch samples",
            "match": {
              "location": "fetchsamples.assfetchsamples()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-21: Exploitation of Trusted Credentials",
    "description": "",
    "id": "capec-21:-exploitation-of-trusted-credentials",
    "keyword": "Feature",
    "uri": "CAPEC_21_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec21"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Impersonate",
        "description": "",
        "id": "capec-21:-exploitation-of-trusted-credentials;step3.1-impersonate",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 67929,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Impersonate",
            "match": {
              "location": "impersonate.preimpersonate()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8914,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Impersonate",
            "match": {
              "location": "impersonate.tryimpersonate()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7400,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Impersonate",
            "match": {
              "location": "impersonate.assimpersonate()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19087,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-21: Exploitation of Trusted Credentials",
    "description": "",
    "id": "capec-21:-exploitation-of-trusted-credentials",
    "keyword": "Feature",
    "uri": "CAPEC_21_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec21"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Spoofing",
        "description": "",
        "id": "capec-21:-exploitation-of-trusted-credentials;step3.2-spoofing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 42704,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Spoofing",
            "match": {
              "location": "spoofing.prespoofing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5564,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Spoofing",
            "match": {
              "location": "spoofing.tryspoofing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5031,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Spoofing",
            "match": {
              "location": "spoofing.assspoofing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16614,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-21: Exploitation of Trusted Credentials",
    "description": "",
    "id": "capec-21:-exploitation-of-trusted-credentials",
    "keyword": "Feature",
    "uri": "CAPEC_21_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec21"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Craft an iFrame Overlay page",
        "description": "",
        "id": "capec-222:-iframe-overlay;step1.1-craft-an-iframe-overlay-page",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 61152,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Craft an iFrame Overlay page",
            "match": {
              "location": "craftaniframeoverlaypage.precraftaniframeoverlaypage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5054,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Craft an iFrame Overlay page",
            "match": {
              "location": "craftaniframeoverlaypage.trycraftaniframeoverlaypage()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5409,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Craft an iFrame Overlay page",
            "match": {
              "location": "craftaniframeoverlaypage.asscraftaniframeoverlaypage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13712,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3299,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4768,
              "status": "passed"
            },
            "comments": [
              {
                "line": 12,
                "value": "# alternative output guard"
              }
            ],
            "line": 13,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-222: iFrame Overlay",
    "description": "",
    "id": "capec-222:-iframe-overlay",
    "keyword": "Feature",
    "uri": "CAPEC_222_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec222"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attacker tricks victim to load the iFrame overlay page",
        "description": "",
        "id": "capec-222:-iframe-overlay;step2.1-attacker-tricks-victim-to-load-the-iframe-overlay-page",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 50935,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Attacker tricks victim to load the iFrame overlay page",
            "match": {
              "location": "attackertricksvictimtoloadtheiframeoverlaypage.preattackertricksvictimtoloadtheiframeoverlaypage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 14573,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Attacker tricks victim to load the iFrame overlay page",
            "match": {
              "location": "attackertricksvictimtoloadtheiframeoverlaypage.tryattackertricksvictimtoloadtheiframeoverlaypage()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7649,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attacker tricks victim to load the iFrame overlay page",
            "match": {
              "location": "attackertricksvictimtoloadtheiframeoverlaypage.assattackertricksvictimtoloadtheiframeoverlaypage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18232,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3512,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-222: iFrame Overlay",
    "description": "",
    "id": "capec-222:-iframe-overlay",
    "keyword": "Feature",
    "uri": "CAPEC_222_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec222"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.2 Trick victim into interacting with the iFrame overlay page in the desired manner",
        "description": "",
        "id": "capec-222:-iframe-overlay;step2.2-trick-victim-into-interacting-with-the-iframe-overlay-page-in-the-desired-manner",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 52303,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Trick victim into interacting with the iFrame overlay page in the desired manner",
            "match": {
              "location": "trickvictimintointeractingwiththeiframeoverlaypageinthedesiredmanner.pretrickvictimintointeractingwiththeiframeoverlaypageinthedesiredmanner()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6734,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Trick victim into interacting with the iFrame overlay page in the desired manner",
            "match": {
              "location": "trickvictimintointeractingwiththeiframeoverlaypageinthedesiredmanner.trytrickvictimintointeractingwiththeiframeoverlaypageinthedesiredmanner()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 14752,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Trick victim into interacting with the iFrame overlay page in the desired manner",
            "match": {
              "location": "trickvictimintointeractingwiththeiframeoverlaypageinthedesiredmanner.asstrickvictimintointeractingwiththeiframeoverlaypageinthedesiredmanner()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-222: iFrame Overlay",
    "description": "",
    "id": "capec-222:-iframe-overlay",
    "keyword": "Feature",
    "uri": "CAPEC_222_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec222"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-230:-xml-nested-payloads;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-230: XML Nested Payloads",
    "description": "",
    "id": "capec-230:-xml-nested-payloads",
    "keyword": "Feature",
    "uri": "CAPEC_230_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec230"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-230:-xml-nested-payloads;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-230: XML Nested Payloads",
    "description": "",
    "id": "capec-230:-xml-nested-payloads",
    "keyword": "Feature",
    "uri": "CAPEC_230_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec230"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-231:-xml-oversized-payloads;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-231: XML Oversized Payloads",
    "description": "",
    "id": "capec-231:-xml-oversized-payloads",
    "keyword": "Feature",
    "uri": "CAPEC_231_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec231"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-231:-xml-oversized-payloads;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-231: XML Oversized Payloads",
    "description": "",
    "id": "capec-231:-xml-oversized-payloads",
    "keyword": "Feature",
    "uri": "CAPEC_231_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec231"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-236:-catching-exception-throw/signal-from-privileged-block;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-236: Catching exception throw/signal from privileged block",
    "description": "",
    "id": "capec-236:-catching-exception-throw/signal-from-privileged-block",
    "keyword": "Feature",
    "uri": "CAPEC_236_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec236"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-236:-catching-exception-throw/signal-from-privileged-block;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-236: Catching exception throw/signal from privileged block",
    "description": "",
    "id": "capec-236:-catching-exception-throw/signal-from-privileged-block",
    "keyword": "Feature",
    "uri": "CAPEC_236_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec236"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-236:-catching-exception-throw/signal-from-privileged-block;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-236: Catching exception throw/signal from privileged block",
    "description": "",
    "id": "capec-236:-catching-exception-throw/signal-from-privileged-block",
    "keyword": "Feature",
    "uri": "CAPEC_236_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec236"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Probing",
        "description": "",
        "id": "capec-237:-calling-signed-code-from-another-language-within-a-sandbox-allow-this;step1.1-probing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27829,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Probing",
            "match": {
              "location": "probing.preprobing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8431,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Probing",
            "match": {
              "location": "probing.tryprobing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8829,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probing",
            "match": {
              "location": "probing.assprobing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-237: Calling Signed Code From Another Language Within A Sandbox Allow This",
    "description": "",
    "id": "capec-237:-calling-signed-code-from-another-language-within-a-sandbox-allow-this",
    "keyword": "Feature",
    "uri": "CAPEC_237_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec237"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Analysis",
        "description": "",
        "id": "capec-237:-calling-signed-code-from-another-language-within-a-sandbox-allow-this;step1.2-analysis",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 57224,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Analysis",
            "match": {
              "location": "analysis.preanalysis()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7025,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Analysis",
            "match": {
              "location": "analysis.tryanalysis()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6647,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Analysis",
            "match": {
              "location": "analysis.assanalysis()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-237: Calling Signed Code From Another Language Within A Sandbox Allow This",
    "description": "",
    "id": "capec-237:-calling-signed-code-from-another-language-within-a-sandbox-allow-this",
    "keyword": "Feature",
    "uri": "CAPEC_237_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec237"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Verify the exploitable security weaknesses",
        "description": "",
        "id": "capec-237:-calling-signed-code-from-another-language-within-a-sandbox-allow-this;step2.1-verify-the-exploitable-security-weaknesses",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 55059,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Verify the exploitable security weaknesses",
            "match": {
              "location": "verifytheexploitablesecurityweaknesses.preverifytheexploitablesecurityweaknesses()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 17744,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Verify the exploitable security weaknesses",
            "match": {
              "location": "verifytheexploitablesecurityweaknesses.tryverifytheexploitablesecurityweaknesses()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7242,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Verify the exploitable security weaknesses",
            "match": {
              "location": "verifytheexploitablesecurityweaknesses.assverifytheexploitablesecurityweaknesses()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 24143,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-237: Calling Signed Code From Another Language Within A Sandbox Allow This",
    "description": "",
    "id": "capec-237:-calling-signed-code-from-another-language-within-a-sandbox-allow-this",
    "keyword": "Feature",
    "uri": "CAPEC_237_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec237"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Exploit the security weaknesses in the standard libraries",
        "description": "",
        "id": "capec-237:-calling-signed-code-from-another-language-within-a-sandbox-allow-this;step3.1-exploit-the-security-weaknesses-in-the-standard-libraries",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 85804,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Exploit the security weaknesses in the standard libraries",
            "match": {
              "location": "exploitthesecurityweaknessesinthestandardlibraries.preexploitthesecurityweaknessesinthestandardlibraries()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11962,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Exploit the security weaknesses in the standard libraries",
            "match": {
              "location": "exploitthesecurityweaknessesinthestandardlibraries.tryexploitthesecurityweaknessesinthestandardlibraries()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11150,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Exploit the security weaknesses in the standard libraries",
            "match": {
              "location": "exploitthesecurityweaknessesinthestandardlibraries.assexploitthesecurityweaknessesinthestandardlibraries()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-237: Calling Signed Code From Another Language Within A Sandbox Allow This",
    "description": "",
    "id": "capec-237:-calling-signed-code-from-another-language-within-a-sandbox-allow-this",
    "keyword": "Feature",
    "uri": "CAPEC_237_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec237"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey the application",
        "description": "",
        "id": "capec-244:-cross-site-scripting-via-encoded-uri-schemes;step1.1-survey-the-application",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey the application(CAPEC_244_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey the application in surveytheapplication.presurveytheapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the application",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey the application(CAPEC_244_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey the application in surveytheapplication.trysurveytheapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey the application",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey the application(CAPEC_244_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey the application in surveytheapplication.asssurveytheapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the application",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-244: Cross-Site Scripting via Encoded URI Schemes",
    "description": "",
    "id": "capec-244:-cross-site-scripting-via-encoded-uri-schemes",
    "keyword": "Feature",
    "uri": "CAPEC_244_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec244"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attempt injection payload variations on input parameters",
        "description": "",
        "id": "capec-244:-cross-site-scripting-via-encoded-uri-schemes;step2.1-attempt-injection-payload-variations-on-input-parameters",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2685997,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptinjectionpayloadvariationsoninputparameters.preattemptinjectionpayloadvariationsoninputparameters(attemptinjectionpayloadvariationsoninputparameters.java:16)\n\tat ✽.Given prepare to Attempt injection payload variations on input parameters(CAPEC_244_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptinjectionpayloadvariationsoninputparameters.preattemptinjectionpayloadvariationsoninputparameters(attemptinjectionpayloadvariationsoninputparameters.java:16)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Attempt injection payload variations on input parameters",
            "match": {
              "location": "attemptinjectionpayloadvariationsoninputparameters.preattemptinjectionpayloadvariationsoninputparameters()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Attempt injection payload variations on input parameters",
            "match": {
              "location": "attemptinjectionpayloadvariationsoninputparameters.tryattemptinjectionpayloadvariationsoninputparameters()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attempt injection payload variations on input parameters",
            "match": {
              "location": "attemptinjectionpayloadvariationsoninputparameters.assattemptinjectionpayloadvariationsoninputparameters()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-244: Cross-Site Scripting via Encoded URI Schemes",
    "description": "",
    "id": "capec-244:-cross-site-scripting-via-encoded-uri-schemes",
    "keyword": "Feature",
    "uri": "CAPEC_244_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec244"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Steal session IDs, credentials, page content, etc.",
        "description": "",
        "id": "capec-244:-cross-site-scripting-via-encoded-uri-schemes;step3.1-steal-session-ids,-credentials,-page-content,-etc.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 36041,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.prestealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8490,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.trystealsessionidscredentialspagecontentetc()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9587,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.assstealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 22593,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6517,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5185,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4748,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 286624,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 297774,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-244: Cross-Site Scripting via Encoded URI Schemes",
    "description": "",
    "id": "capec-244:-cross-site-scripting-via-encoded-uri-schemes",
    "keyword": "Feature",
    "uri": "CAPEC_244_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec244"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Forceful browsing",
        "description": "",
        "id": "capec-244:-cross-site-scripting-via-encoded-uri-schemes;step3.2-forceful-browsing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 31701,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.preforcefulbrowsing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7182,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.tryforcefulbrowsing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12972,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.assforcefulbrowsing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 26248,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5997,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5877,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5939,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20446,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15718,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-244: Cross-Site Scripting via Encoded URI Schemes",
    "description": "",
    "id": "capec-244:-cross-site-scripting-via-encoded-uri-schemes",
    "keyword": "Feature",
    "uri": "CAPEC_244_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec244"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.3 Content spoofing",
        "description": "",
        "id": "capec-244:-cross-site-scripting-via-encoded-uri-schemes;step3.3-content-spoofing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 22335,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Content spoofing",
            "match": {
              "location": "contentspoofing.precontentspoofing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4718,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Content spoofing",
            "match": {
              "location": "contentspoofing.trycontentspoofing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3876,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Content spoofing",
            "match": {
              "location": "contentspoofing.asscontentspoofing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15496,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4566,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3755,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3142,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3960,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3697,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-244: Cross-Site Scripting via Encoded URI Schemes",
    "description": "",
    "id": "capec-244:-cross-site-scripting-via-encoded-uri-schemes",
    "keyword": "Feature",
    "uri": "CAPEC_244_Step_3_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec244"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Spider",
        "description": "",
        "id": "capec-246:-cross-site-scripting-using-flash;step1.1-spider",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7434429,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat ✽.Given prepare to Spider(CAPEC_246_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Spider",
            "match": {
              "location": "spider.prespider()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Spider",
            "match": {
              "location": "spider.tryspider()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Spider",
            "match": {
              "location": "spider.assspider()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-246: Cross-Site Scripting Using Flash",
    "description": "",
    "id": "capec-246:-cross-site-scripting-using-flash",
    "keyword": "Feature",
    "uri": "CAPEC_246_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec246"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Determine the SWF file susceptibility to XSS",
        "description": "",
        "id": "capec-246:-cross-site-scripting-using-flash;step2.1-determine-the-swf-file-susceptibility-to-xss",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 76086,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine the SWF file susceptibility to XSS",
            "match": {
              "location": "determinetheswffilesusceptibilitytoxss.predeterminetheswffilesusceptibilitytoxss()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9738,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine the SWF file susceptibility to XSS",
            "match": {
              "location": "determinetheswffilesusceptibilitytoxss.trydeterminetheswffilesusceptibilitytoxss()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7998,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine the SWF file susceptibility to XSS",
            "match": {
              "location": "determinetheswffilesusceptibilitytoxss.assdeterminetheswffilesusceptibilitytoxss()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 30356,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7363,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5851,
              "status": "passed"
            },
            "comments": [
              {
                "line": 12,
                "value": "# alternative output guard"
              },
              {
                "line": 13,
                "value": "# alternative input guard"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6057,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative application firewall"
              },
              {
                "line": 16,
                "value": "# benifits output guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern pathname canonicalization",
            "match": {
              "location": "PatternSteps.asspathnamecanonicalization()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4471,
              "status": "passed"
            },
            "line": 18,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5287,
              "status": "passed"
            },
            "comments": [
              {
                "line": 19,
                "value": "# alternative application firewall"
              },
              {
                "line": 20,
                "value": "# benifits input guard"
              }
            ],
            "line": 21,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-246: Cross-Site Scripting Using Flash",
    "description": "",
    "id": "capec-246:-cross-site-scripting-using-flash",
    "keyword": "Feature",
    "uri": "CAPEC_246_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec246"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey",
        "description": "",
        "id": "capec-24:-filter-failure-through-buffer-overflow;step1.1-survey",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4813855,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.survey.presurvey(survey.java:17)\n\tat ✽.Given prepare to Survey(CAPEC_24_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.survey.presurvey(survey.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Survey",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-24: Filter Failure through Buffer Overflow",
    "description": "",
    "id": "capec-24:-filter-failure-through-buffer-overflow",
    "keyword": "Feature",
    "uri": "CAPEC_24_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec24"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attempt injections",
        "description": "",
        "id": "capec-24:-filter-failure-through-buffer-overflow;step2.1-attempt-injections",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6269016,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptinjections.preattemptinjections(attemptinjections.java:15)\n\tat ✽.Given prepare to Attempt injections(CAPEC_24_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptinjections.preattemptinjections(attemptinjections.java:15)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Attempt injections",
            "match": {
              "location": "attemptinjections.preattemptinjections()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Attempt injections",
            "match": {
              "location": "attemptinjections.tryattemptinjections()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attempt injections",
            "match": {
              "location": "attemptinjections.assattemptinjections()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 11,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-24: Filter Failure through Buffer Overflow",
    "description": "",
    "id": "capec-24:-filter-failure-through-buffer-overflow",
    "keyword": "Feature",
    "uri": "CAPEC_24_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec24"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.2 Monitor responses",
        "description": "",
        "id": "capec-24:-filter-failure-through-buffer-overflow;step2.2-monitor-responses",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 89309,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Monitor responses",
            "match": {
              "location": "monitorresponses.premonitorresponses()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7767,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Monitor responses",
            "match": {
              "location": "monitorresponses.trymonitorresponses()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6885,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Monitor responses",
            "match": {
              "location": "monitorresponses.assmonitorresponses()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19332,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-24: Filter Failure through Buffer Overflow",
    "description": "",
    "id": "capec-24:-filter-failure-through-buffer-overflow",
    "keyword": "Feature",
    "uri": "CAPEC_24_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec24"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Abuse the system through filter failure",
        "description": "",
        "id": "capec-24:-filter-failure-through-buffer-overflow;step3.1-abuse-the-system-through-filter-failure",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 78184,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Abuse the system through filter failure",
            "match": {
              "location": "abusethesystemthroughfilterfailure.preabusethesystemthroughfilterfailure()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7871,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Abuse the system through filter failure",
            "match": {
              "location": "abusethesystemthroughfilterfailure.tryabusethesystemthroughfilterfailure()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6839,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Abuse the system through filter failure",
            "match": {
              "location": "abusethesystemthroughfilterfailure.assabusethesystemthroughfilterfailure()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15876,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-24: Filter Failure through Buffer Overflow",
    "description": "",
    "id": "capec-24:-filter-failure-through-buffer-overflow",
    "keyword": "Feature",
    "uri": "CAPEC_24_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec24"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey Application",
        "description": "",
        "id": "capec-250:-xml-injection;step1.1-survey-application",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4838293,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.survey.presurvey(survey.java:17)\n\tat ✽.Given prepare to Survey Application(CAPEC_250_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.survey.presurvey(survey.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey Application",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Survey Application",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey Application",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-250: XML Injection",
    "description": "",
    "id": "capec-250:-xml-injection",
    "keyword": "Feature",
    "uri": "CAPEC_250_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec250"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Test user-controllable inputs for injection",
        "description": "",
        "id": "capec-250:-xml-injection;step2.1-test-user-controllable-inputs-for-injection",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3642665,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.testusercontrollableinputsforinjection.pretestusercontrollableinputsforinjection(testusercontrollableinputsforinjection.java:16)\n\tat ✽.Given prepare to Test user-controllable inputs for injection(CAPEC_250_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.testusercontrollableinputsforinjection.pretestusercontrollableinputsforinjection(testusercontrollableinputsforinjection.java:16)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Test user-controllable inputs for injection",
            "match": {
              "location": "testusercontrollableinputsforinjection.pretestusercontrollableinputsforinjection()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Test user-controllable inputs for injection",
            "match": {
              "location": "testusercontrollableinputsforinjection.trytestusercontrollableinputsforinjection()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Test user-controllable inputs for injection",
            "match": {
              "location": "testusercontrollableinputsforinjection.asstestusercontrollableinputsforinjection()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-250: XML Injection",
    "description": "",
    "id": "capec-250:-xml-injection",
    "keyword": "Feature",
    "uri": "CAPEC_250_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec250"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-258:-passively-sniffing-and-capturing-application-code-bound-for-an-authorized-client-during-dynamic-update;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-258: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Dynamic Update",
    "description": "",
    "id": "capec-258:-passively-sniffing-and-capturing-application-code-bound-for-an-authorized-client-during-dynamic-update",
    "keyword": "Feature",
    "uri": "CAPEC_258_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec258"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-258:-passively-sniffing-and-capturing-application-code-bound-for-an-authorized-client-during-dynamic-update;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-258: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Dynamic Update",
    "description": "",
    "id": "capec-258:-passively-sniffing-and-capturing-application-code-bound-for-an-authorized-client-during-dynamic-update",
    "keyword": "Feature",
    "uri": "CAPEC_258_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec258"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Set up a sniffer",
        "description": "",
        "id": "capec-259:-passively-sniffing-and-capturing-application-code-bound-for-an-authorized-client-during-patching;step1.1-set-up-a-sniffer",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 67447,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Set up a sniffer",
            "match": {
              "location": "setupasniffer.presetupasniffer()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6983,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Set up a sniffer",
            "match": {
              "location": "setupasniffer.trysetupasniffer()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7939,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Set up a sniffer",
            "match": {
              "location": "setupasniffer.asssetupasniffer()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-259: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Patching",
    "description": "",
    "id": "capec-259:-passively-sniffing-and-capturing-application-code-bound-for-an-authorized-client-during-patching",
    "keyword": "Feature",
    "uri": "CAPEC_259_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec259"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Capturing Application Code Bound During Patching",
        "description": "",
        "id": "capec-259:-passively-sniffing-and-capturing-application-code-bound-for-an-authorized-client-during-patching;step2.1-capturing-application-code-bound-during-patching",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 55917,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Capturing Application Code Bound During Patching",
            "match": {
              "location": "capturingapplicationcodeboundduringpatching.precapturingapplicationcodeboundduringpatching()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6492,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Capturing Application Code Bound During Patching",
            "match": {
              "location": "capturingapplicationcodeboundduringpatching.trycapturingapplicationcodeboundduringpatching()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6896,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Capturing Application Code Bound During Patching",
            "match": {
              "location": "capturingapplicationcodeboundduringpatching.asscapturingapplicationcodeboundduringpatching()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-259: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Patching",
    "description": "",
    "id": "capec-259:-passively-sniffing-and-capturing-application-code-bound-for-an-authorized-client-during-patching",
    "keyword": "Feature",
    "uri": "CAPEC_259_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec259"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-25:-forced-deadlock;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-25: Forced Deadlock",
    "description": "",
    "id": "capec-25:-forced-deadlock",
    "keyword": "Feature",
    "uri": "CAPEC_25_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec25"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Set up a sniffer",
        "description": "",
        "id": "capec-260:-passively-sniffing-and-capturing-application-code-bound-for-an-authorized-client-during-initial-distribution;step1.1-set-up-a-sniffer",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27959,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Set up a sniffer",
            "match": {
              "location": "setupasniffer.presetupasniffer()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4739,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Set up a sniffer",
            "match": {
              "location": "setupasniffer.trysetupasniffer()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4200,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Set up a sniffer",
            "match": {
              "location": "setupasniffer.asssetupasniffer()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-260: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Initial Distribution",
    "description": "",
    "id": "capec-260:-passively-sniffing-and-capturing-application-code-bound-for-an-authorized-client-during-initial-distribution",
    "keyword": "Feature",
    "uri": "CAPEC_260_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec260"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Capturing Application Code Bound During Patching",
        "description": "",
        "id": "capec-260:-passively-sniffing-and-capturing-application-code-bound-for-an-authorized-client-during-initial-distribution;step2.1-capturing-application-code-bound-during-patching",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 39191,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Capturing Application Code Bound During Patching",
            "match": {
              "location": "capturingapplicationcodeboundduringpatching.precapturingapplicationcodeboundduringpatching()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4092,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Capturing Application Code Bound During Patching",
            "match": {
              "location": "capturingapplicationcodeboundduringpatching.trycapturingapplicationcodeboundduringpatching()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4487,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Capturing Application Code Bound During Patching",
            "match": {
              "location": "capturingapplicationcodeboundduringpatching.asscapturingapplicationcodeboundduringpatching()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-260: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Initial Distribution",
    "description": "",
    "id": "capec-260:-passively-sniffing-and-capturing-application-code-bound-for-an-authorized-client-during-initial-distribution",
    "keyword": "Feature",
    "uri": "CAPEC_260_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec260"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey the application for user-controllable inputs",
        "description": "",
        "id": "capec-267:-leverage-alternate-encoding;step1.1-survey-the-application-for-user-controllable-inputs",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey the application for user-controllable inputs(CAPEC_267_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey the application in surveytheapplication.presurveytheapplication()\n  prepare to Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.presurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey the application for user-controllable inputs(CAPEC_267_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey the application in surveytheapplication.trysurveytheapplication()\n  Try to Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.trysurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey the application for user-controllable inputs(CAPEC_267_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey the application in surveytheapplication.asssurveytheapplication()\n  Assert the success of Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.asssurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-267: Leverage Alternate Encoding",
    "description": "",
    "id": "capec-267:-leverage-alternate-encoding",
    "keyword": "Feature",
    "uri": "CAPEC_267_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec267"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Probe entry points to locate vulnerabilities",
        "description": "",
        "id": "capec-267:-leverage-alternate-encoding;step2.1-probe-entry-points-to-locate-vulnerabilities",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 77019,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Probe entry points to locate vulnerabilities",
            "match": {
              "location": "probeentrypointstolocatevulnerabilities.preprobeentrypointstolocatevulnerabilities()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6265,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Probe entry points to locate vulnerabilities",
            "match": {
              "location": "probeentrypointstolocatevulnerabilities.tryprobeentrypointstolocatevulnerabilities()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4752,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe entry points to locate vulnerabilities",
            "match": {
              "location": "probeentrypointstolocatevulnerabilities.assprobeentrypointstolocatevulnerabilities()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative input guard"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative application firewall"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern pathname canonicalization",
            "match": {
              "location": "PatternSteps.asspathnamecanonicalization()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 17,
                "value": "#"
              }
            ],
            "line": 18,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 19,
                "value": "# depends secure logger"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-267: Leverage Alternate Encoding",
    "description": "",
    "id": "capec-267:-leverage-alternate-encoding",
    "keyword": "Feature",
    "uri": "CAPEC_267_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec267"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-26:-leveraging-race-conditions;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-26: Leveraging Race Conditions",
    "description": "",
    "id": "capec-26:-leveraging-race-conditions",
    "keyword": "Feature",
    "uri": "CAPEC_26_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec26"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-26:-leveraging-race-conditions;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-26: Leveraging Race Conditions",
    "description": "",
    "id": "capec-26:-leveraging-race-conditions",
    "keyword": "Feature",
    "uri": "CAPEC_26_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec26"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-26:-leveraging-race-conditions;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-26: Leveraging Race Conditions",
    "description": "",
    "id": "capec-26:-leveraging-race-conditions",
    "keyword": "Feature",
    "uri": "CAPEC_26_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec26"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Identify potential DNS rebinding targets",
        "description": "",
        "id": "capec-275:-dns-rebinding;step1.1-identify-potential-dns-rebinding-targets",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 49649,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify potential DNS rebinding targets",
            "match": {
              "location": "identifypotentialdnsrebindingtargets.preidentifypotentialdnsrebindingtargets()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12017,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify potential DNS rebinding targets",
            "match": {
              "location": "identifypotentialdnsrebindingtargets.tryidentifypotentialdnsrebindingtargets()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4875,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify potential DNS rebinding targets",
            "match": {
              "location": "identifypotentialdnsrebindingtargets.assidentifypotentialdnsrebindingtargets()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-275: DNS Rebinding",
    "description": "",
    "id": "capec-275:-dns-rebinding",
    "keyword": "Feature",
    "uri": "CAPEC_275_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec275"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Establish initial target access to attacker DNS",
        "description": "",
        "id": "capec-275:-dns-rebinding;step2.1-establish-initial-target-access-to-attacker-dns",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 47463,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Establish initial target access to attacker DNS",
            "match": {
              "location": "establishinitialtargetaccesstoattackerdns.preestablishinitialtargetaccesstoattackerdns()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4772,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Establish initial target access to attacker DNS",
            "match": {
              "location": "establishinitialtargetaccesstoattackerdns.tryestablishinitialtargetaccesstoattackerdns()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4706,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Establish initial target access to attacker DNS",
            "match": {
              "location": "establishinitialtargetaccesstoattackerdns.assestablishinitialtargetaccesstoattackerdns()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-275: DNS Rebinding",
    "description": "",
    "id": "capec-275:-dns-rebinding",
    "keyword": "Feature",
    "uri": "CAPEC_275_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec275"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.2 Rebind DNS resolution to target address",
        "description": "",
        "id": "capec-275:-dns-rebinding;step2.2-rebind-dns-resolution-to-target-address",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 83816,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Rebind DNS resolution to target address",
            "match": {
              "location": "rebinddnsresolutiontotargetaddress.prerebinddnsresolutiontotargetaddress()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6126,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Rebind DNS resolution to target address",
            "match": {
              "location": "rebinddnsresolutiontotargetaddress.tryrebinddnsresolutiontotargetaddress()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5912,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Rebind DNS resolution to target address",
            "match": {
              "location": "rebinddnsresolutiontotargetaddress.assrebinddnsresolutiontotargetaddress()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-275: DNS Rebinding",
    "description": "",
    "id": "capec-275:-dns-rebinding",
    "keyword": "Feature",
    "uri": "CAPEC_275_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec275"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.3 Determine exploitability of DNS rebinding access to target address",
        "description": "",
        "id": "capec-275:-dns-rebinding;step2.3-determine-exploitability-of-dns-rebinding-access-to-target-address",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 85480,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine exploitability of DNS rebinding access to target address",
            "match": {
              "location": "determineexploitabilityofdnsrebindingaccesstotargetaddress.predetermineexploitabilityofdnsrebindingaccesstotargetaddress()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6414,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine exploitability of DNS rebinding access to target address",
            "match": {
              "location": "determineexploitabilityofdnsrebindingaccesstotargetaddress.trydetermineexploitabilityofdnsrebindingaccesstotargetaddress()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6188,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine exploitability of DNS rebinding access to target address",
            "match": {
              "location": "determineexploitabilityofdnsrebindingaccesstotargetaddress.assdetermineexploitabilityofdnsrebindingaccesstotargetaddress()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17573,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 11,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-275: DNS Rebinding",
    "description": "",
    "id": "capec-275:-dns-rebinding",
    "keyword": "Feature",
    "uri": "CAPEC_275_Step_2_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec275"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Access \u0026 exfiltrate data within the victim\u0027s security zone",
        "description": "",
        "id": "capec-275:-dns-rebinding;step3.1-access-\u0026-exfiltrate-data-within-the-victim\u0027s-security-zone",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 105243,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Access \u0026 exfiltrate data within the victim\u0027s security zone",
            "match": {
              "location": "accessexfiltratedatawithinthevictimssecurityzone.preaccessexfiltratedatawithinthevictimssecurityzone()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6705,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Access \u0026 exfiltrate data within the victim\u0027s security zone",
            "match": {
              "location": "accessexfiltratedatawithinthevictimssecurityzone.tryaccessexfiltratedatawithinthevictimssecurityzone()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5887,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Access \u0026 exfiltrate data within the victim\u0027s security zone",
            "match": {
              "location": "accessexfiltratedatawithinthevictimssecurityzone.assaccessexfiltratedatawithinthevictimssecurityzone()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16183,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3795,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 12,
                "value": "# alternative output guard"
              }
            ],
            "line": 13,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-275: DNS Rebinding",
    "description": "",
    "id": "capec-275:-dns-rebinding",
    "keyword": "Feature",
    "uri": "CAPEC_275_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec275"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Verify that target host\u0027s platform supports symbolic links.",
        "description": "",
        "id": "capec-27:-leveraging-race-conditions-via-symbolic-links;step1.1-verify-that-target-host\u0027s-platform-supports-symbolic-links.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 56251,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Verify that target host\u0027s platform supports symbolic links.",
            "match": {
              "location": "verifythattargethostsplatformsupportssymboliclinks.preverifythattargethostsplatformsupportssymboliclinks()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4889,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Verify that target host\u0027s platform supports symbolic links.",
            "match": {
              "location": "verifythattargethostsplatformsupportssymboliclinks.tryverifythattargethostsplatformsupportssymboliclinks()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3945,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Verify that target host\u0027s platform supports symbolic links.",
            "match": {
              "location": "verifythattargethostsplatformsupportssymboliclinks.assverifythattargethostsplatformsupportssymboliclinks()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-27: Leveraging Race Conditions via Symbolic Links",
    "description": "",
    "id": "capec-27:-leveraging-race-conditions-via-symbolic-links",
    "keyword": "Feature",
    "uri": "CAPEC_27_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec27"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Examine application\u0027s file I/O behavior",
        "description": "",
        "id": "capec-27:-leveraging-race-conditions-via-symbolic-links;step1.2-examine-application\u0027s-file-i/o-behavior",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 55477,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Examine application\u0027s file I/O behavior",
            "match": {
              "location": "examineapplicationsfileiobehavior.preexamineapplicationsfileiobehavior()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4466,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Examine application\u0027s file I/O behavior",
            "match": {
              "location": "examineapplicationsfileiobehavior.tryexamineapplicationsfileiobehavior()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4264,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Examine application\u0027s file I/O behavior",
            "match": {
              "location": "examineapplicationsfileiobehavior.assexamineapplicationsfileiobehavior()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-27: Leveraging Race Conditions via Symbolic Links",
    "description": "",
    "id": "capec-27:-leveraging-race-conditions-via-symbolic-links",
    "keyword": "Feature",
    "uri": "CAPEC_27_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec27"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Verify ability to write to filesystem",
        "description": "",
        "id": "capec-27:-leveraging-race-conditions-via-symbolic-links;step2.1-verify-ability-to-write-to-filesystem",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 58933,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Verify ability to write to filesystem",
            "match": {
              "location": "verifyabilitytowritetofilesystem.preverifyabilitytowritetofilesystem()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4297,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Verify ability to write to filesystem",
            "match": {
              "location": "verifyabilitytowritetofilesystem.tryverifyabilitytowritetofilesystem()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4066,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Verify ability to write to filesystem",
            "match": {
              "location": "verifyabilitytowritetofilesystem.assverifyabilitytowritetofilesystem()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14265,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-27: Leveraging Race Conditions via Symbolic Links",
    "description": "",
    "id": "capec-27:-leveraging-race-conditions-via-symbolic-links",
    "keyword": "Feature",
    "uri": "CAPEC_27_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec27"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Replace file with a symlink to a sensitive system file.",
        "description": "",
        "id": "capec-27:-leveraging-race-conditions-via-symbolic-links;step3.1-replace-file-with-a-symlink-to-a-sensitive-system-file.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 43400,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Replace file with a symlink to a sensitive system file.",
            "match": {
              "location": "replacefilewithasymlinktoasensitivesystemfile.prereplacefilewithasymlinktoasensitivesystemfile()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4728,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Replace file with a symlink to a sensitive system file.",
            "match": {
              "location": "replacefilewithasymlinktoasensitivesystemfile.tryreplacefilewithasymlinktoasensitivesystemfile()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4043,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Replace file with a symlink to a sensitive system file.",
            "match": {
              "location": "replacefilewithasymlinktoasensitivesystemfile.assreplacefilewithasymlinktoasensitivesystemfile()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15963,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-27: Leveraging Race Conditions via Symbolic Links",
    "description": "",
    "id": "capec-27:-leveraging-race-conditions-via-symbolic-links",
    "keyword": "Feature",
    "uri": "CAPEC_27_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec27"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Observe communication and inputs",
        "description": "",
        "id": "capec-28:-fuzzing;step1.1-observe-communication-and-inputs",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 47070,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Observe communication and inputs",
            "match": {
              "location": "observecommunicationandinputs.preobservecommunicationandinputs()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4600,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Observe communication and inputs",
            "match": {
              "location": "observecommunicationandinputs.tryobservecommunicationandinputs()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3889,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Observe communication and inputs",
            "match": {
              "location": "observecommunicationandinputs.assobservecommunicationandinputs()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-28: Fuzzing",
    "description": "",
    "id": "capec-28:-fuzzing",
    "keyword": "Feature",
    "uri": "CAPEC_28_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec28"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Generate fuzzed inputs",
        "description": "",
        "id": "capec-28:-fuzzing;step2.1-generate-fuzzed-inputs",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 62984,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Generate fuzzed inputs",
            "match": {
              "location": "generatefuzzedinputs.pregeneratefuzzedinputs()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4333,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Generate fuzzed inputs",
            "match": {
              "location": "generatefuzzedinputs.trygeneratefuzzedinputs()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4302,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Generate fuzzed inputs",
            "match": {
              "location": "generatefuzzedinputs.assgeneratefuzzedinputs()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18145,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-28: Fuzzing",
    "description": "",
    "id": "capec-28:-fuzzing",
    "keyword": "Feature",
    "uri": "CAPEC_28_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec28"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.2 Observe the outcome",
        "description": "",
        "id": "capec-28:-fuzzing;step2.2-observe-the-outcome",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 53383,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Observe the outcome",
            "match": {
              "location": "observetheoutcome.preobservetheoutcome()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4461,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Observe the outcome",
            "match": {
              "location": "observetheoutcome.tryobservetheoutcome()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4634,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Observe the outcome",
            "match": {
              "location": "observetheoutcome.assobservetheoutcome()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-28: Fuzzing",
    "description": "",
    "id": "capec-28:-fuzzing",
    "keyword": "Feature",
    "uri": "CAPEC_28_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec28"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Craft exploit payloads",
        "description": "",
        "id": "capec-28:-fuzzing;step3.1-craft-exploit-payloads",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 74405,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Craft exploit payloads",
            "match": {
              "location": "craftexploitpayloads.precraftexploitpayloads()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5742,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Craft exploit payloads",
            "match": {
              "location": "craftexploitpayloads.trycraftexploitpayloads()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3819,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Craft exploit payloads",
            "match": {
              "location": "craftexploitpayloads.asscraftexploitpayloads()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-28: Fuzzing",
    "description": "",
    "id": "capec-28:-fuzzing",
    "keyword": "Feature",
    "uri": "CAPEC_28_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec28"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-29:-leveraging-time-of-check-and-time-of-use-(toctou)-race-conditions;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-29: Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
    "description": "",
    "id": "capec-29:-leveraging-time-of-check-and-time-of-use-(toctou)-race-conditions",
    "keyword": "Feature",
    "uri": "CAPEC_29_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec29"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-29:-leveraging-time-of-check-and-time-of-use-(toctou)-race-conditions;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-29: Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
    "description": "",
    "id": "capec-29:-leveraging-time-of-check-and-time-of-use-(toctou)-race-conditions",
    "keyword": "Feature",
    "uri": "CAPEC_29_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec29"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-29:-leveraging-time-of-check-and-time-of-use-(toctou)-race-conditions;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-29: Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
    "description": "",
    "id": "capec-29:-leveraging-time-of-check-and-time-of-use-(toctou)-race-conditions",
    "keyword": "Feature",
    "uri": "CAPEC_29_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec29"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Experiment"
          }
        ],
        "line": 4,
        "name": "Step1.1 Investigate account lockout behavior of system",
        "description": "",
        "id": "capec-2:-inducing-account-lockout;step1.1-investigate-account-lockout-behavior-of-system",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 62956,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Investigate account lockout behavior of system",
            "match": {
              "location": "investigateaccountlockoutbehaviorofsystem.preinvestigateaccountlockoutbehaviorofsystem()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4616,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Investigate account lockout behavior of system",
            "match": {
              "location": "investigateaccountlockoutbehaviorofsystem.tryinvestigateaccountlockoutbehaviorofsystem()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3746,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Investigate account lockout behavior of system",
            "match": {
              "location": "investigateaccountlockoutbehaviorofsystem.assinvestigateaccountlockoutbehaviorofsystem()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-2: Inducing Account Lockout",
    "description": "",
    "id": "capec-2:-inducing-account-lockout",
    "keyword": "Feature",
    "uri": "CAPEC_2_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec2"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Experiment"
          }
        ],
        "line": 4,
        "name": "Step1.2 Obtain list of user accounts to lock out",
        "description": "",
        "id": "capec-2:-inducing-account-lockout;step1.2-obtain-list-of-user-accounts-to-lock-out",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 45865,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Obtain list of user accounts to lock out",
            "match": {
              "location": "obtainlistofuseraccountstolockout.preobtainlistofuseraccountstolockout()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4201,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Obtain list of user accounts to lock out",
            "match": {
              "location": "obtainlistofuseraccountstolockout.tryobtainlistofuseraccountstolockout()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3888,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Obtain list of user accounts to lock out",
            "match": {
              "location": "obtainlistofuseraccountstolockout.assobtainlistofuseraccountstolockout()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-2: Inducing Account Lockout",
    "description": "",
    "id": "capec-2:-inducing-account-lockout",
    "keyword": "Feature",
    "uri": "CAPEC_2_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec2"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Lock Out Accounts",
        "description": "",
        "id": "capec-2:-inducing-account-lockout;step2.1-lock-out-accounts",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 52911,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Lock Out Accounts",
            "match": {
              "location": "lockoutaccounts.prelockoutaccounts()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4476,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Lock Out Accounts",
            "match": {
              "location": "lockoutaccounts.trylockoutaccounts()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3769,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Lock Out Accounts",
            "match": {
              "location": "lockoutaccounts.asslockoutaccounts()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-2: Inducing Account Lockout",
    "description": "",
    "id": "capec-2:-inducing-account-lockout",
    "keyword": "Feature",
    "uri": "CAPEC_2_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec2"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-30:-hijacking-a-privileged-thread-of-execution;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-30: Hijacking a Privileged Thread of Execution",
    "description": "",
    "id": "capec-30:-hijacking-a-privileged-thread-of-execution",
    "keyword": "Feature",
    "uri": "CAPEC_30_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec30"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-30:-hijacking-a-privileged-thread-of-execution;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-30: Hijacking a Privileged Thread of Execution",
    "description": "",
    "id": "capec-30:-hijacking-a-privileged-thread-of-execution",
    "keyword": "Feature",
    "uri": "CAPEC_30_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec30"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-30:-hijacking-a-privileged-thread-of-execution;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-30: Hijacking a Privileged Thread of Execution",
    "description": "",
    "id": "capec-30:-hijacking-a-privileged-thread-of-execution",
    "keyword": "Feature",
    "uri": "CAPEC_30_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec30"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Obtain copy of cookie",
        "description": "",
        "id": "capec-31:-accessing/intercepting/modifying-http-cookies;step1.1-obtain-copy-of-cookie",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 67315,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Obtain copy of cookie",
            "match": {
              "location": "obtaincopyofcookie.preobtaincopyofcookie()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4238,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Obtain copy of cookie",
            "match": {
              "location": "obtaincopyofcookie.tryobtaincopyofcookie()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3789,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Obtain copy of cookie",
            "match": {
              "location": "obtaincopyofcookie.assobtaincopyofcookie()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16356,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-31: Accessing/Intercepting/Modifying HTTP Cookies",
    "description": "",
    "id": "capec-31:-accessing/intercepting/modifying-http-cookies",
    "keyword": "Feature",
    "uri": "CAPEC_31_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec31"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Obtain sensitive information from cookie",
        "description": "",
        "id": "capec-31:-accessing/intercepting/modifying-http-cookies;step2.1-obtain-sensitive-information-from-cookie",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 60079,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Obtain sensitive information from cookie",
            "match": {
              "location": "obtainsensitiveinformationfromcookie.preobtainsensitiveinformationfromcookie()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4136,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Obtain sensitive information from cookie",
            "match": {
              "location": "obtainsensitiveinformationfromcookie.tryobtainsensitiveinformationfromcookie()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4086,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Obtain sensitive information from cookie",
            "match": {
              "location": "obtainsensitiveinformationfromcookie.assobtainsensitiveinformationfromcookie()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-31: Accessing/Intercepting/Modifying HTTP Cookies",
    "description": "",
    "id": "capec-31:-accessing/intercepting/modifying-http-cookies",
    "keyword": "Feature",
    "uri": "CAPEC_31_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec31"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.2 Modify cookie to subvert security controls.",
        "description": "",
        "id": "capec-31:-accessing/intercepting/modifying-http-cookies;step2.2-modify-cookie-to-subvert-security-controls.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 58859,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Modify cookie to subvert security controls.",
            "match": {
              "location": "modifycookietosubvertsecuritycontrols.premodifycookietosubvertsecuritycontrols()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4132,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Modify cookie to subvert security controls.",
            "match": {
              "location": "modifycookietosubvertsecuritycontrols.trymodifycookietosubvertsecuritycontrols()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5002,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Modify cookie to subvert security controls.",
            "match": {
              "location": "modifycookietosubvertsecuritycontrols.assmodifycookietosubvertsecuritycontrols()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-31: Accessing/Intercepting/Modifying HTTP Cookies",
    "description": "",
    "id": "capec-31:-accessing/intercepting/modifying-http-cookies",
    "keyword": "Feature",
    "uri": "CAPEC_31_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec31"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Spider",
        "description": "",
        "id": "capec-32:-embedding-scripts-in-http-query-strings;step1.1-spider",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3002248,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat ✽.Given prepare to Spider(CAPEC_32_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Spider",
            "match": {
              "location": "spider.prespider()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Spider",
            "match": {
              "location": "spider.tryspider()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Spider",
            "match": {
              "location": "spider.assspider()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-32: Embedding Scripts in HTTP Query Strings",
    "description": "",
    "id": "capec-32:-embedding-scripts-in-http-query-strings",
    "keyword": "Feature",
    "uri": "CAPEC_32_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec32"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attempt variations on input parameters",
        "description": "",
        "id": "capec-32:-embedding-scripts-in-http-query-strings;step2.1-attempt-variations-on-input-parameters",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3385617,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptvariationsoninputparameters.preattemptvariationsoninputparameters(attemptvariationsoninputparameters.java:19)\n\tat ✽.Given prepare to Attempt variations on input parameters(CAPEC_32_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptvariationsoninputparameters.preattemptvariationsoninputparameters(attemptvariationsoninputparameters.java:19)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Attempt variations on input parameters",
            "match": {
              "location": "attemptvariationsoninputparameters.preattemptvariationsoninputparameters()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Attempt variations on input parameters",
            "match": {
              "location": "attemptvariationsoninputparameters.tryattemptvariationsoninputparameters()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attempt variations on input parameters",
            "match": {
              "location": "attemptvariationsoninputparameters.assattemptvariationsoninputparameters()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative input guard"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-32: Embedding Scripts in HTTP Query Strings",
    "description": "",
    "id": "capec-32:-embedding-scripts-in-http-query-strings",
    "keyword": "Feature",
    "uri": "CAPEC_32_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec32"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Steal session IDs, credentials, page content, etc.",
        "description": "",
        "id": "capec-32:-embedding-scripts-in-http-query-strings;step3.1-steal-session-ids,-credentials,-page-content,-etc.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 32619,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.prestealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4162,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.trystealsessionidscredentialspagecontentetc()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4094,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.assstealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 410566,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8210,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4045,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3580,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4287,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3498,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-32: Embedding Scripts in HTTP Query Strings",
    "description": "",
    "id": "capec-32:-embedding-scripts-in-http-query-strings",
    "keyword": "Feature",
    "uri": "CAPEC_32_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec32"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Forceful browsing",
        "description": "",
        "id": "capec-32:-embedding-scripts-in-http-query-strings;step3.2-forceful-browsing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 30031,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.preforcefulbrowsing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6144,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.tryforcefulbrowsing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5249,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.assforcefulbrowsing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 39885,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7627,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4958,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5193,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4972,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5894,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-32: Embedding Scripts in HTTP Query Strings",
    "description": "",
    "id": "capec-32:-embedding-scripts-in-http-query-strings",
    "keyword": "Feature",
    "uri": "CAPEC_32_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec32"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.3 Content spoofing",
        "description": "",
        "id": "capec-32:-embedding-scripts-in-http-query-strings;step3.3-content-spoofing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 28647,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Content spoofing",
            "match": {
              "location": "contentspoofing.precontentspoofing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5628,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Content spoofing",
            "match": {
              "location": "contentspoofing.trycontentspoofing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5646,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Content spoofing",
            "match": {
              "location": "contentspoofing.asscontentspoofing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19721,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5356,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5112,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4925,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4765,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4992,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-32: Embedding Scripts in HTTP Query Strings",
    "description": "",
    "id": "capec-32:-embedding-scripts-in-http-query-strings",
    "keyword": "Feature",
    "uri": "CAPEC_32_Step_3_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec32"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Identify HTTP parsing chain",
        "description": "",
        "id": "capec-33:-http-request-smuggling;step1.1-identify-http-parsing-chain",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 68726,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify HTTP parsing chain",
            "match": {
              "location": "identifyhttpparsingchain.preidentifyhttpparsingchain()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7216,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify HTTP parsing chain",
            "match": {
              "location": "identifyhttpparsingchain.tryidentifyhttpparsingchain()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6475,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify HTTP parsing chain",
            "match": {
              "location": "identifyhttpparsingchain.assidentifyhttpparsingchain()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-33: HTTP Request Smuggling",
    "description": "",
    "id": "capec-33:-http-request-smuggling",
    "keyword": "Feature",
    "uri": "CAPEC_33_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec33"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Probe for vulnerable differences in HTTP parsing chain",
        "description": "",
        "id": "capec-33:-http-request-smuggling;step2.1-probe-for-vulnerable-differences-in-http-parsing-chain",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 71538,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Probe for vulnerable differences in HTTP parsing chain",
            "match": {
              "location": "probeforvulnerabledifferencesinhttpparsingchain.preprobeforvulnerabledifferencesinhttpparsingchain()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6391,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Probe for vulnerable differences in HTTP parsing chain",
            "match": {
              "location": "probeforvulnerabledifferencesinhttpparsingchain.tryprobeforvulnerabledifferencesinhttpparsingchain()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6683,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe for vulnerable differences in HTTP parsing chain",
            "match": {
              "location": "probeforvulnerabledifferencesinhttpparsingchain.assprobeforvulnerabledifferencesinhttpparsingchain()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21073,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5876,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-33: HTTP Request Smuggling",
    "description": "",
    "id": "capec-33:-http-request-smuggling",
    "keyword": "Feature",
    "uri": "CAPEC_33_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec33"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Cache poisoning",
        "description": "",
        "id": "capec-33:-http-request-smuggling;step3.1-cache-poisoning",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 76220,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Cache poisoning",
            "match": {
              "location": "cachepoisoning.precachepoisoning()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6255,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Cache poisoning",
            "match": {
              "location": "cachepoisoning.trycachepoisoning()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5075,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Cache poisoning",
            "match": {
              "location": "cachepoisoning.asscachepoisoning()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20119,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5216,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-33: HTTP Request Smuggling",
    "description": "",
    "id": "capec-33:-http-request-smuggling",
    "keyword": "Feature",
    "uri": "CAPEC_33_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec33"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Session Hijacking",
        "description": "",
        "id": "capec-33:-http-request-smuggling;step3.2-session-hijacking",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 54050,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Session Hijacking",
            "match": {
              "location": "sessionhijacking.presessionhijacking()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5670,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Session Hijacking",
            "match": {
              "location": "sessionhijacking.trysessionhijacking()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5397,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Session Hijacking",
            "match": {
              "location": "sessionhijacking.asssessionhijacking()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 29729,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17017,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-33: HTTP Request Smuggling",
    "description": "",
    "id": "capec-33:-http-request-smuggling",
    "keyword": "Feature",
    "uri": "CAPEC_33_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec33"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Spider",
        "description": "",
        "id": "capec-34:-http-response-splitting;step1.1-spider",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14377108,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat ✽.Given prepare to Spider(CAPEC_34_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Spider",
            "match": {
              "location": "spider.prespider()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Spider",
            "match": {
              "location": "spider.tryspider()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Spider",
            "match": {
              "location": "spider.assspider()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-34: HTTP Response Splitting",
    "description": "",
    "id": "capec-34:-http-response-splitting",
    "keyword": "Feature",
    "uri": "CAPEC_34_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec34"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attempt variations on input parameters",
        "description": "",
        "id": "capec-34:-http-response-splitting;step2.1-attempt-variations-on-input-parameters",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1635613,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptvariationsoninputparameters.preattemptvariationsoninputparameters(attemptvariationsoninputparameters.java:19)\n\tat ✽.Given prepare to Attempt variations on input parameters(CAPEC_34_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.attemptvariationsoninputparameters.preattemptvariationsoninputparameters(attemptvariationsoninputparameters.java:19)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Attempt variations on input parameters",
            "match": {
              "location": "attemptvariationsoninputparameters.preattemptvariationsoninputparameters()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Attempt variations on input parameters",
            "match": {
              "location": "attemptvariationsoninputparameters.tryattemptvariationsoninputparameters()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attempt variations on input parameters",
            "match": {
              "location": "attemptvariationsoninputparameters.assattemptvariationsoninputparameters()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative input guard"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-34: HTTP Response Splitting",
    "description": "",
    "id": "capec-34:-http-response-splitting",
    "keyword": "Feature",
    "uri": "CAPEC_34_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec34"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Cross-Site Scripting",
        "description": "",
        "id": "capec-34:-http-response-splitting;step3.1-cross-site-scripting",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1417274,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.crosssitescripting.precrosssitescripting(crosssitescripting.java:15)\n\tat ✽.Given prepare to Cross-Site Scripting(CAPEC_34_Step_3_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.crosssitescripting.precrosssitescripting(crosssitescripting.java:15)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Cross-Site Scripting",
            "match": {
              "location": "crosssitescripting.precrosssitescripting()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Cross-Site Scripting",
            "match": {
              "location": "crosssitescripting.trycrosssitescripting()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Cross-Site Scripting",
            "match": {
              "location": "crosssitescripting.asscrosssitescripting()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-34: HTTP Response Splitting",
    "description": "",
    "id": "capec-34:-http-response-splitting",
    "keyword": "Feature",
    "uri": "CAPEC_34_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec34"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Cache poisoning",
        "description": "",
        "id": "capec-34:-http-response-splitting;step3.2-cache-poisoning",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27773,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Cache poisoning",
            "match": {
              "location": "cachepoisoning.precachepoisoning()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3458,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Cache poisoning",
            "match": {
              "location": "cachepoisoning.trycachepoisoning()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2934,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Cache poisoning",
            "match": {
              "location": "cachepoisoning.asscachepoisoning()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13071,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3934,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3537,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16404,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7266,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6651,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-34: HTTP Response Splitting",
    "description": "",
    "id": "capec-34:-http-response-splitting",
    "keyword": "Feature",
    "uri": "CAPEC_34_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec34"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-36:-using-unpublished-apis;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-36: Using Unpublished APIs",
    "description": "",
    "id": "capec-36:-using-unpublished-apis",
    "keyword": "Feature",
    "uri": "CAPEC_36_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec36"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Identify Target",
        "description": "",
        "id": "capec-37:-retrieve-embedded-sensitive-data;step1.1-identify-target",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 39768,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify Target",
            "match": {
              "location": "identifytarget.preidentifytarget()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6128,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify Target",
            "match": {
              "location": "identifytarget.tryidentifytarget()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7027,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify Target",
            "match": {
              "location": "identifytarget.assidentifytarget()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 26481,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-37: Retrieve Embedded Sensitive Data",
    "description": "",
    "id": "capec-37:-retrieve-embedded-sensitive-data",
    "keyword": "Feature",
    "uri": "CAPEC_37_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec37"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Apply mining techniques",
        "description": "",
        "id": "capec-37:-retrieve-embedded-sensitive-data;step2.1-apply-mining-techniques",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 34213,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Apply mining techniques",
            "match": {
              "location": "applyminingtechniques.preapplyminingtechniques()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4128,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Apply mining techniques",
            "match": {
              "location": "applyminingtechniques.tryapplyminingtechniques()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3449,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Apply mining techniques",
            "match": {
              "location": "applyminingtechniques.assapplyminingtechniques()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23653,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-37: Retrieve Embedded Sensitive Data",
    "description": "",
    "id": "capec-37:-retrieve-embedded-sensitive-data",
    "keyword": "Feature",
    "uri": "CAPEC_37_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec37"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Enumerate information passed to client side",
        "description": "",
        "id": "capec-39:-manipulating-opaque-client-based-data-tokens;step1.1-enumerate-information-passed-to-client-side",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 55459,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Enumerate information passed to client side",
            "match": {
              "location": "enumerateinformationpassedtoclientside.preenumerateinformationpassedtoclientside()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3921,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Enumerate information passed to client side",
            "match": {
              "location": "enumerateinformationpassedtoclientside.tryenumerateinformationpassedtoclientside()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3563,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Enumerate information passed to client side",
            "match": {
              "location": "enumerateinformationpassedtoclientside.assenumerateinformationpassedtoclientside()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-39: Manipulating Opaque Client-based Data Tokens",
    "description": "",
    "id": "capec-39:-manipulating-opaque-client-based-data-tokens",
    "keyword": "Feature",
    "uri": "CAPEC_39_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec39"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Determine protection mechanism for opaque token",
        "description": "",
        "id": "capec-39:-manipulating-opaque-client-based-data-tokens;step1.2-determine-protection-mechanism-for-opaque-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 54680,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine protection mechanism for opaque token",
            "match": {
              "location": "determineprotectionmechanismforopaquetoken.predetermineprotectionmechanismforopaquetoken()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3605,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine protection mechanism for opaque token",
            "match": {
              "location": "determineprotectionmechanismforopaquetoken.trydetermineprotectionmechanismforopaquetoken()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3352,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine protection mechanism for opaque token",
            "match": {
              "location": "determineprotectionmechanismforopaquetoken.assdetermineprotectionmechanismforopaquetoken()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-39: Manipulating Opaque Client-based Data Tokens",
    "description": "",
    "id": "capec-39:-manipulating-opaque-client-based-data-tokens",
    "keyword": "Feature",
    "uri": "CAPEC_39_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec39"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Modify parameter/token values",
        "description": "",
        "id": "capec-39:-manipulating-opaque-client-based-data-tokens;step2.1-modify-parameter/token-values",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 59501,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Modify parameter/token values",
            "match": {
              "location": "modifyparametertokenvalues.premodifyparametertokenvalues()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3723,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Modify parameter/token values",
            "match": {
              "location": "modifyparametertokenvalues.trymodifyparametertokenvalues()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3614,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Modify parameter/token values",
            "match": {
              "location": "modifyparametertokenvalues.assmodifyparametertokenvalues()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-39: Manipulating Opaque Client-based Data Tokens",
    "description": "",
    "id": "capec-39:-manipulating-opaque-client-based-data-tokens",
    "keyword": "Feature",
    "uri": "CAPEC_39_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec39"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.2 Cycle through values for each parameter.",
        "description": "",
        "id": "capec-39:-manipulating-opaque-client-based-data-tokens;step2.2-cycle-through-values-for-each-parameter.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 52433,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Cycle through values for each parameter.",
            "match": {
              "location": "cyclethroughvaluesforeachparameter.precyclethroughvaluesforeachparameter()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3481,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Cycle through values for each parameter.",
            "match": {
              "location": "cyclethroughvaluesforeachparameter.trycyclethroughvaluesforeachparameter()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3887,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Cycle through values for each parameter.",
            "match": {
              "location": "cyclethroughvaluesforeachparameter.asscyclethroughvaluesforeachparameter()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-39: Manipulating Opaque Client-based Data Tokens",
    "description": "",
    "id": "capec-39:-manipulating-opaque-client-based-data-tokens",
    "keyword": "Feature",
    "uri": "CAPEC_39_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec39"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Experiment"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-3:-using-leading-\u0027ghost\u0027-character-sequences-to-bypass-input-filters;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-3: Using Leading \u0027Ghost\u0027 Character Sequences to Bypass Input Filters",
    "description": "",
    "id": "capec-3:-using-leading-\u0027ghost\u0027-character-sequences-to-bypass-input-filters",
    "keyword": "Feature",
    "uri": "CAPEC_3_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec3"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-3:-using-leading-\u0027ghost\u0027-character-sequences-to-bypass-input-filters;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-3: Using Leading \u0027Ghost\u0027 Character Sequences to Bypass Input Filters",
    "description": "",
    "id": "capec-3:-using-leading-\u0027ghost\u0027-character-sequences-to-bypass-input-filters",
    "keyword": "Feature",
    "uri": "CAPEC_3_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec3"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Experiment"
          }
        ],
        "line": 4,
        "name": "Step1.1 Identify and characterize metacharacter-processing vulnerabilities in email headers",
        "description": "",
        "id": "capec-41:-using-meta-characters-in-e-mail-headers-to-inject-malicious-payloads;step1.1-identify-and-characterize-metacharacter-processing-vulnerabilities-in-email-headers",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 55579,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Identify and characterize metacharacter-processing vulnerabilities in email headers",
            "match": {
              "location": "identifyandcharacterizemetacharacterprocessingvulnerabilitiesinemailheaders.preidentifyandcharacterizemetacharacterprocessingvulnerabilitiesinemailheaders()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 14430,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Identify and characterize metacharacter-processing vulnerabilities in email headers",
            "match": {
              "location": "identifyandcharacterizemetacharacterprocessingvulnerabilitiesinemailheaders.tryidentifyandcharacterizemetacharacterprocessingvulnerabilitiesinemailheaders()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11181,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify and characterize metacharacter-processing vulnerabilities in email headers",
            "match": {
              "location": "identifyandcharacterizemetacharacterprocessingvulnerabilitiesinemailheaders.assidentifyandcharacterizemetacharacterprocessingvulnerabilitiesinemailheaders()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19023,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3699,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# alternative input guard"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3053,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative application firewall"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern pathname canonicalization",
            "match": {
              "location": "PatternSteps.asspathnamecanonicalization()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-41: Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
    "description": "",
    "id": "capec-41:-using-meta-characters-in-e-mail-headers-to-inject-malicious-payloads",
    "keyword": "Feature",
    "uri": "CAPEC_41_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec41"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-41:-using-meta-characters-in-e-mail-headers-to-inject-malicious-payloads;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-41: Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
    "description": "",
    "id": "capec-41:-using-meta-characters-in-e-mail-headers-to-inject-malicious-payloads",
    "keyword": "Feature",
    "uri": "CAPEC_41_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec41"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-42:-mime-conversion;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-42: MIME Conversion",
    "description": "",
    "id": "capec-42:-mime-conversion",
    "keyword": "Feature",
    "uri": "CAPEC_42_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec42"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-42:-mime-conversion;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-42: MIME Conversion",
    "description": "",
    "id": "capec-42:-mime-conversion",
    "keyword": "Feature",
    "uri": "CAPEC_42_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec42"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Determine application/system inputs where bypassing input validation is desired",
        "description": "",
        "id": "capec-43:-exploiting-multiple-input-interpretation-layers;step1.1-determine-application/system-inputs-where-bypassing-input-validation-is-desired",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 56722,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine application/system inputs where bypassing input validation is desired",
            "match": {
              "location": "determineapplicationsysteminputswherebypassinginputvalidationisdesired.predetermineapplicationsysteminputswherebypassinginputvalidationisdesired()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 13424,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine application/system inputs where bypassing input validation is desired",
            "match": {
              "location": "determineapplicationsysteminputswherebypassinginputvalidationisdesired.trydetermineapplicationsysteminputswherebypassinginputvalidationisdesired()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3180,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine application/system inputs where bypassing input validation is desired",
            "match": {
              "location": "determineapplicationsysteminputswherebypassinginputvalidationisdesired.assdetermineapplicationsysteminputswherebypassinginputvalidationisdesired()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-43: Exploiting Multiple Input Interpretation Layers",
    "description": "",
    "id": "capec-43:-exploiting-multiple-input-interpretation-layers",
    "keyword": "Feature",
    "uri": "CAPEC_43_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec43"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Determine which character encodings are accepted by the application/system",
        "description": "",
        "id": "capec-43:-exploiting-multiple-input-interpretation-layers;step2.1-determine-which-character-encodings-are-accepted-by-the-application/system",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 62292,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine which character encodings are accepted by the application/system",
            "match": {
              "location": "determinewhichcharacterencodingsareacceptedbytheapplicationsystem.predeterminewhichcharacterencodingsareacceptedbytheapplicationsystem()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3723,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine which character encodings are accepted by the application/system",
            "match": {
              "location": "determinewhichcharacterencodingsareacceptedbytheapplicationsystem.trydeterminewhichcharacterencodingsareacceptedbytheapplicationsystem()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3279,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine which character encodings are accepted by the application/system",
            "match": {
              "location": "determinewhichcharacterencodingsareacceptedbytheapplicationsystem.assdeterminewhichcharacterencodingsareacceptedbytheapplicationsystem()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18944,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4287,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-43: Exploiting Multiple Input Interpretation Layers",
    "description": "",
    "id": "capec-43:-exploiting-multiple-input-interpretation-layers",
    "keyword": "Feature",
    "uri": "CAPEC_43_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec43"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.2 Combine multiple encodings accepted by the application.",
        "description": "",
        "id": "capec-43:-exploiting-multiple-input-interpretation-layers;step2.2-combine-multiple-encodings-accepted-by-the-application.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 117434,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Combine multiple encodings accepted by the application.",
            "match": {
              "location": "combinemultipleencodingsacceptedbytheapplication.precombinemultipleencodingsacceptedbytheapplication()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6950,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Combine multiple encodings accepted by the application.",
            "match": {
              "location": "combinemultipleencodingsacceptedbytheapplication.trycombinemultipleencodingsacceptedbytheapplication()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4749,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Combine multiple encodings accepted by the application.",
            "match": {
              "location": "combinemultipleencodingsacceptedbytheapplication.asscombinemultipleencodingsacceptedbytheapplication()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20007,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-43: Exploiting Multiple Input Interpretation Layers",
    "description": "",
    "id": "capec-43:-exploiting-multiple-input-interpretation-layers",
    "keyword": "Feature",
    "uri": "CAPEC_43_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec43"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Leverage ability to bypass input validation",
        "description": "",
        "id": "capec-43:-exploiting-multiple-input-interpretation-layers;step3.1-leverage-ability-to-bypass-input-validation",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1679097,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.leverageabilitytobypassinputvalidation.preleverageabilitytobypassinputvalidation(leverageabilitytobypassinputvalidation.java:21)\n\tat ✽.Given prepare to Leverage ability to bypass input validation(CAPEC_43_Step_3_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.leverageabilitytobypassinputvalidation.preleverageabilitytobypassinputvalidation(leverageabilitytobypassinputvalidation.java:21)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Leverage ability to bypass input validation",
            "match": {
              "location": "leverageabilitytobypassinputvalidation.preleverageabilitytobypassinputvalidation()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Leverage ability to bypass input validation",
            "match": {
              "location": "leverageabilitytobypassinputvalidation.tryleverageabilitytobypassinputvalidation()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Leverage ability to bypass input validation",
            "match": {
              "location": "leverageabilitytobypassinputvalidation.assleverageabilitytobypassinputvalidation()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-43: Exploiting Multiple Input Interpretation Layers",
    "description": "",
    "id": "capec-43:-exploiting-multiple-input-interpretation-layers",
    "keyword": "Feature",
    "uri": "CAPEC_43_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec43"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Exploit"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-45:-buffer-overflow-via-symbolic-links;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-45: Buffer Overflow via Symbolic Links",
    "description": "",
    "id": "capec-45:-buffer-overflow-via-symbolic-links",
    "keyword": "Feature",
    "uri": "CAPEC_45_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec45"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Experiment"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-46:-overflow-variables-and-tags;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-46: Overflow Variables and Tags",
    "description": "",
    "id": "capec-46:-overflow-variables-and-tags",
    "keyword": "Feature",
    "uri": "CAPEC_46_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec46"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-46:-overflow-variables-and-tags;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-46: Overflow Variables and Tags",
    "description": "",
    "id": "capec-46:-overflow-variables-and-tags",
    "keyword": "Feature",
    "uri": "CAPEC_46_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec46"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-47:-buffer-overflow-via-parameter-expansion;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-47: Buffer Overflow via Parameter Expansion",
    "description": "",
    "id": "capec-47:-buffer-overflow-via-parameter-expansion",
    "keyword": "Feature",
    "uri": "CAPEC_47_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec47"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-47:-buffer-overflow-via-parameter-expansion;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-47: Buffer Overflow via Parameter Expansion",
    "description": "",
    "id": "capec-47:-buffer-overflow-via-parameter-expansion",
    "keyword": "Feature",
    "uri": "CAPEC_47_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec47"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-484:-xml-client-side-attack;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-484: XML Client-Side Attack",
    "description": "",
    "id": "capec-484:-xml-client-side-attack",
    "keyword": "Feature",
    "uri": "CAPEC_484_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec484"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-484:-xml-client-side-attack;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-484: XML Client-Side Attack",
    "description": "",
    "id": "capec-484:-xml-client-side-attack",
    "keyword": "Feature",
    "uri": "CAPEC_484_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec484"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Determine application\u0027s/system\u0027s password policy",
        "description": "",
        "id": "capec-49:-password-brute-forcing;step1.1-determine-application\u0027s/system\u0027s-password-policy",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 28719,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine application\u0027s/system\u0027s password policy",
            "match": {
              "location": "determineapplicationssystemspasswordpolicy.predetermineapplicationssystemspasswordpolicy()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3075,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine application\u0027s/system\u0027s password policy",
            "match": {
              "location": "determineapplicationssystemspasswordpolicy.trydetermineapplicationssystemspasswordpolicy()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3185,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine application\u0027s/system\u0027s password policy",
            "match": {
              "location": "determineapplicationssystemspasswordpolicy.assdetermineapplicationssystemspasswordpolicy()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-49: Password Brute Forcing",
    "description": "",
    "id": "capec-49:-password-brute-forcing",
    "keyword": "Feature",
    "uri": "CAPEC_49_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec49"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Brute force password",
        "description": "",
        "id": "capec-49:-password-brute-forcing;step2.1-brute-force-password",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 69641,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Brute force password",
            "match": {
              "location": "bruteforcepassword.prebruteforcepassword()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5638,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Brute force password",
            "match": {
              "location": "bruteforcepassword.trybruteforcepassword()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4887,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Brute force password",
            "match": {
              "location": "bruteforcepassword.assbruteforcepassword()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 26645,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 11,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-49: Password Brute Forcing",
    "description": "",
    "id": "capec-49:-password-brute-forcing",
    "keyword": "Feature",
    "uri": "CAPEC_49_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec49"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-50:-password-recovery-exploitation;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-50: Password Recovery Exploitation",
    "description": "",
    "id": "capec-50:-password-recovery-exploitation",
    "keyword": "Feature",
    "uri": "CAPEC_50_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec50"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-50:-password-recovery-exploitation;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-50: Password Recovery Exploitation",
    "description": "",
    "id": "capec-50:-password-recovery-exploitation",
    "keyword": "Feature",
    "uri": "CAPEC_50_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec50"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-52:-embedding-null-bytes;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-52: Embedding NULL Bytes",
    "description": "",
    "id": "capec-52:-embedding-null-bytes",
    "keyword": "Feature",
    "uri": "CAPEC_52_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec52"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-52:-embedding-null-bytes;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-52: Embedding NULL Bytes",
    "description": "",
    "id": "capec-52:-embedding-null-bytes",
    "keyword": "Feature",
    "uri": "CAPEC_52_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec52"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Experiment"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-53:-postfix,-null-terminate,-and-backslash;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-53: Postfix, Null Terminate, and Backslash",
    "description": "",
    "id": "capec-53:-postfix,-null-terminate,-and-backslash",
    "keyword": "Feature",
    "uri": "CAPEC_53_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec53"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-53:-postfix,-null-terminate,-and-backslash;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-53: Postfix, Null Terminate, and Backslash",
    "description": "",
    "id": "capec-53:-postfix,-null-terminate,-and-backslash",
    "keyword": "Feature",
    "uri": "CAPEC_53_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec53"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-54:-query-system-for-information;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-54: Query System for Information",
    "description": "",
    "id": "capec-54:-query-system-for-information",
    "keyword": "Feature",
    "uri": "CAPEC_54_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec54"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-54:-query-system-for-information;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-54: Query System for Information",
    "description": "",
    "id": "capec-54:-query-system-for-information",
    "keyword": "Feature",
    "uri": "CAPEC_54_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec54"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Determine application\u0027s/system\u0027s password policy",
        "description": "",
        "id": "capec-55:-rainbow-table-password-cracking;step1.1-determine-application\u0027s/system\u0027s-password-policy",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27102,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine application\u0027s/system\u0027s password policy",
            "match": {
              "location": "determineapplicationssystemspasswordpolicy.predetermineapplicationssystemspasswordpolicy()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3446,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine application\u0027s/system\u0027s password policy",
            "match": {
              "location": "determineapplicationssystemspasswordpolicy.trydetermineapplicationssystemspasswordpolicy()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2833,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine application\u0027s/system\u0027s password policy",
            "match": {
              "location": "determineapplicationssystemspasswordpolicy.assdetermineapplicationssystemspasswordpolicy()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-55: Rainbow Table Password Cracking",
    "description": "",
    "id": "capec-55:-rainbow-table-password-cracking",
    "keyword": "Feature",
    "uri": "CAPEC_55_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec55"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Obtain password hashes",
        "description": "",
        "id": "capec-55:-rainbow-table-password-cracking;step1.2-obtain-password-hashes",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 52250,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Obtain password hashes",
            "match": {
              "location": "obtainpasswordhashes.preobtainpasswordhashes()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3836,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Obtain password hashes",
            "match": {
              "location": "obtainpasswordhashes.tryobtainpasswordhashes()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3256,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Obtain password hashes",
            "match": {
              "location": "obtainpasswordhashes.assobtainpasswordhashes()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-55: Rainbow Table Password Cracking",
    "description": "",
    "id": "capec-55:-rainbow-table-password-cracking",
    "keyword": "Feature",
    "uri": "CAPEC_55_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec55"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Run rainbow table-based password cracking tool",
        "description": "",
        "id": "capec-55:-rainbow-table-password-cracking;step2.1-run-rainbow-table-based-password-cracking-tool",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 80656,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Run rainbow table-based password cracking tool",
            "match": {
              "location": "runrainbowtablebasedpasswordcrackingtool.prerunrainbowtablebasedpasswordcrackingtool()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3511,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Run rainbow table-based password cracking tool",
            "match": {
              "location": "runrainbowtablebasedpasswordcrackingtool.tryrunrainbowtablebasedpasswordcrackingtool()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3527,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Run rainbow table-based password cracking tool",
            "match": {
              "location": "runrainbowtablebasedpasswordcrackingtool.assrunrainbowtablebasedpasswordcrackingtool()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13268,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-55: Rainbow Table Password Cracking",
    "description": "",
    "id": "capec-55:-rainbow-table-password-cracking",
    "keyword": "Feature",
    "uri": "CAPEC_55_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec55"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-56:-removing/short-circuiting-\u0027guard-logic\u0027;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-56: Removing/short-circuiting \u0027guard logic\u0027",
    "description": "",
    "id": "capec-56:-removing/short-circuiting-\u0027guard-logic\u0027",
    "keyword": "Feature",
    "uri": "CAPEC_56_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec56"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-56:-removing/short-circuiting-\u0027guard-logic\u0027;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-56: Removing/short-circuiting \u0027guard logic\u0027",
    "description": "",
    "id": "capec-56:-removing/short-circuiting-\u0027guard-logic\u0027",
    "keyword": "Feature",
    "uri": "CAPEC_56_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec56"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-56:-removing/short-circuiting-\u0027guard-logic\u0027;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-56: Removing/short-circuiting \u0027guard logic\u0027",
    "description": "",
    "id": "capec-56:-removing/short-circuiting-\u0027guard-logic\u0027",
    "keyword": "Feature",
    "uri": "CAPEC_56_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec56"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Find Session IDs",
        "description": "",
        "id": "capec-59:-session-credential-falsification-through-prediction;step1.1-find-session-ids",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 59269,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Find Session IDs",
            "match": {
              "location": "findsessionids.prefindsessionids()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3762,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Find Session IDs",
            "match": {
              "location": "findsessionids.tryfindsessionids()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2653,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Find Session IDs",
            "match": {
              "location": "findsessionids.assfindsessionids()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-59: Session Credential Falsification through Prediction",
    "description": "",
    "id": "capec-59:-session-credential-falsification-through-prediction",
    "keyword": "Feature",
    "uri": "CAPEC_59_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec59"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Characterize IDs",
        "description": "",
        "id": "capec-59:-session-credential-falsification-through-prediction;step1.2-characterize-ids",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 74809,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Characterize IDs",
            "match": {
              "location": "characterizeids.precharacterizeids()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3765,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Characterize IDs",
            "match": {
              "location": "characterizeids.trycharacterizeids()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2694,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Characterize IDs",
            "match": {
              "location": "characterizeids.asscharacterizeids()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-59: Session Credential Falsification through Prediction",
    "description": "",
    "id": "capec-59:-session-credential-falsification-through-prediction",
    "keyword": "Feature",
    "uri": "CAPEC_59_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec59"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Match issued IDs",
        "description": "",
        "id": "capec-59:-session-credential-falsification-through-prediction;step2.1-match-issued-ids",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 57401,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Match issued IDs",
            "match": {
              "location": "matchissuedids.prematchissuedids()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5490,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Match issued IDs",
            "match": {
              "location": "matchissuedids.trymatchissuedids()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3685,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Match issued IDs",
            "match": {
              "location": "matchissuedids.assmatchissuedids()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-59: Session Credential Falsification through Prediction",
    "description": "",
    "id": "capec-59:-session-credential-falsification-through-prediction",
    "keyword": "Feature",
    "uri": "CAPEC_59_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec59"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Use matched Session ID",
        "description": "",
        "id": "capec-59:-session-credential-falsification-through-prediction;step3.1-use-matched-session-id",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 58905,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Use matched Session ID",
            "match": {
              "location": "usematchedsessionid.preusematchedsessionid()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3332,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Use matched Session ID",
            "match": {
              "location": "usematchedsessionid.tryusematchedsessionid()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2964,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Use matched Session ID",
            "match": {
              "location": "usematchedsessionid.assusematchedsessionid()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15152,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3850,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-59: Session Credential Falsification through Prediction",
    "description": "",
    "id": "capec-59:-session-credential-falsification-through-prediction",
    "keyword": "Feature",
    "uri": "CAPEC_59_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec59"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-60:-reusing-session-ids-(aka-session-replay);step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-60: Reusing Session IDs (aka Session Replay)",
    "description": "",
    "id": "capec-60:-reusing-session-ids-(aka-session-replay)",
    "keyword": "Feature",
    "uri": "CAPEC_60_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec60"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-60:-reusing-session-ids-(aka-session-replay);step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-60: Reusing Session IDs (aka Session Replay)",
    "description": "",
    "id": "capec-60:-reusing-session-ids-(aka-session-replay)",
    "keyword": "Feature",
    "uri": "CAPEC_60_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec60"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Setup the Attack",
        "description": "",
        "id": "capec-61:-session-fixation;step1.1-setup-the-attack",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 77522,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Setup the Attack",
            "match": {
              "location": "setuptheattack.presetuptheattack()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6317,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Setup the Attack",
            "match": {
              "location": "setuptheattack.trysetuptheattack()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4967,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Setup the Attack",
            "match": {
              "location": "setuptheattack.asssetuptheattack()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18544,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5292,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-61: Session Fixation",
    "description": "",
    "id": "capec-61:-session-fixation",
    "keyword": "Feature",
    "uri": "CAPEC_61_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec61"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attract a Victim",
        "description": "",
        "id": "capec-61:-session-fixation;step2.1-attract-a-victim",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 76113,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Attract a Victim",
            "match": {
              "location": "attractavictim.preattractavictim()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7099,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Attract a Victim",
            "match": {
              "location": "attractavictim.tryattractavictim()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4060,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attract a Victim",
            "match": {
              "location": "attractavictim.assattractavictim()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19299,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-61: Session Fixation",
    "description": "",
    "id": "capec-61:-session-fixation",
    "keyword": "Feature",
    "uri": "CAPEC_61_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec61"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Abuse the Victim\u0027s Session",
        "description": "",
        "id": "capec-61:-session-fixation;step3.1-abuse-the-victim\u0027s-session",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 42294,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Abuse the Victim\u0027s Session",
            "match": {
              "location": "abusethevictimssession.preabusethevictimssession()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3727,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Abuse the Victim\u0027s Session",
            "match": {
              "location": "abusethevictimssession.tryabusethevictimssession()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3095,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Abuse the Victim\u0027s Session",
            "match": {
              "location": "abusethevictimssession.assabusethevictimssession()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10743,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3529,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-61: Session Fixation",
    "description": "",
    "id": "capec-61:-session-fixation",
    "keyword": "Feature",
    "uri": "CAPEC_61_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec61"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Explore target website",
        "description": "",
        "id": "capec-62:-cross-site-request-forgery-(aka-session-riding);step1.1-explore-target-website",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 30034,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Explore target website",
            "match": {
              "location": "exploretargetwebsite.preexploretargetwebsite()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 72428,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Explore target website",
            "match": {
              "location": "exploretargetwebsite.tryexploretargetwebsite()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5135,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Explore target website",
            "match": {
              "location": "exploretargetwebsite.assexploretargetwebsite()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-62: Cross Site Request Forgery (aka Session Riding)",
    "description": "",
    "id": "capec-62:-cross-site-request-forgery-(aka-session-riding)",
    "keyword": "Feature",
    "uri": "CAPEC_62_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec62"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Create a link that when clicked on, will execute the interesting functionality.",
        "description": "",
        "id": "capec-62:-cross-site-request-forgery-(aka-session-riding);step2.1-create-a-link-that-when-clicked-on,-will-execute-the-interesting-functionality.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 66902,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Create a link that when clicked on, will execute the interesting functionality.",
            "match": {
              "location": "createalinkthatwhenclickedonwillexecutetheinterestingfunctionality.precreatealinkthatwhenclickedonwillexecutetheinterestingfunctionality()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7135,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Create a link that when clicked on, will execute the interesting functionality.",
            "match": {
              "location": "createalinkthatwhenclickedonwillexecutetheinterestingfunctionality.trycreatealinkthatwhenclickedonwillexecutetheinterestingfunctionality()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8315,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Create a link that when clicked on, will execute the interesting functionality.",
            "match": {
              "location": "createalinkthatwhenclickedonwillexecutetheinterestingfunctionality.asscreatealinkthatwhenclickedonwillexecutetheinterestingfunctionality()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 24660,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 11,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-62: Cross Site Request Forgery (aka Session Riding)",
    "description": "",
    "id": "capec-62:-cross-site-request-forgery-(aka-session-riding)",
    "keyword": "Feature",
    "uri": "CAPEC_62_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec62"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Convince user to click on link",
        "description": "",
        "id": "capec-62:-cross-site-request-forgery-(aka-session-riding);step3.1-convince-user-to-click-on-link",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 80788,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Convince user to click on link",
            "match": {
              "location": "convinceusertoclickonlink.preconvinceusertoclickonlink()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7126,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Convince user to click on link",
            "match": {
              "location": "convinceusertoclickonlink.tryconvinceusertoclickonlink()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7467,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Convince user to click on link",
            "match": {
              "location": "convinceusertoclickonlink.assconvinceusertoclickonlink()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 24400,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 11,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-62: Cross Site Request Forgery (aka Session Riding)",
    "description": "",
    "id": "capec-62:-cross-site-request-forgery-(aka-session-riding)",
    "keyword": "Feature",
    "uri": "CAPEC_62_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec62"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey the application for user-controllable inputs",
        "description": "",
        "id": "capec-63:-simple-script-injection;step1.1-survey-the-application-for-user-controllable-inputs",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey the application for user-controllable inputs(CAPEC_63_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey the application in surveytheapplication.presurveytheapplication()\n  prepare to Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.presurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey the application for user-controllable inputs(CAPEC_63_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey the application in surveytheapplication.trysurveytheapplication()\n  Try to Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.trysurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey the application for user-controllable inputs(CAPEC_63_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey the application in surveytheapplication.asssurveytheapplication()\n  Assert the success of Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.asssurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-63: Simple Script Injection",
    "description": "",
    "id": "capec-63:-simple-script-injection",
    "keyword": "Feature",
    "uri": "CAPEC_63_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec63"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Probe identified potential entry points for XSS vulnerability",
        "description": "",
        "id": "capec-63:-simple-script-injection;step2.1-probe-identified-potential-entry-points-for-xss-vulnerability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2673417,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability(probeidentifiedpotentialentrypointsforxssvulnerability.java:15)\n\tat ✽.Given prepare to Probe identified potential entry points for XSS vulnerability(CAPEC_63_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability(probeidentifiedpotentialentrypointsforxssvulnerability.java:15)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.tryprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.assprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative output guard"
              },
              {
                "line": 14,
                "value": "# alternative input guard"
              }
            ],
            "line": 15,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 16,
                "value": "# alternative application firewall"
              },
              {
                "line": 17,
                "value": "# benifits output guard"
              }
            ],
            "line": 18,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 19,
                "value": "# alternative application firewall"
              },
              {
                "line": 20,
                "value": "# benifits input guard"
              }
            ],
            "line": 21,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 22,
                "value": "# alternative output guard"
              },
              {
                "line": 23,
                "value": "# impairs audit interceptor"
              }
            ],
            "line": 24,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-63: Simple Script Injection",
    "description": "",
    "id": "capec-63:-simple-script-injection",
    "keyword": "Feature",
    "uri": "CAPEC_63_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec63"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Steal session IDs, credentials, page content, etc.",
        "description": "",
        "id": "capec-63:-simple-script-injection;step3.1-steal-session-ids,-credentials,-page-content,-etc.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 23385,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.prestealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4077,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.trystealsessionidscredentialspagecontentetc()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3354,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.assstealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16922,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4112,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3854,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3105,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3690,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3424,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-63: Simple Script Injection",
    "description": "",
    "id": "capec-63:-simple-script-injection",
    "keyword": "Feature",
    "uri": "CAPEC_63_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec63"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Forceful browsing",
        "description": "",
        "id": "capec-63:-simple-script-injection;step3.2-forceful-browsing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 32173,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.preforcefulbrowsing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5047,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.tryforcefulbrowsing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4933,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.assforcefulbrowsing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14852,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5678,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6074,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5760,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5574,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4843,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-63: Simple Script Injection",
    "description": "",
    "id": "capec-63:-simple-script-injection",
    "keyword": "Feature",
    "uri": "CAPEC_63_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec63"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.3 Content spoofing",
        "description": "",
        "id": "capec-63:-simple-script-injection;step3.3-content-spoofing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 30805,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Content spoofing",
            "match": {
              "location": "contentspoofing.precontentspoofing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6021,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Content spoofing",
            "match": {
              "location": "contentspoofing.trycontentspoofing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3938,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Content spoofing",
            "match": {
              "location": "contentspoofing.asscontentspoofing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14916,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3962,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4087,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3324,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3365,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3647,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-63: Simple Script Injection",
    "description": "",
    "id": "capec-63:-simple-script-injection",
    "keyword": "Feature",
    "uri": "CAPEC_63_Step_3_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec63"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-64:-using-slashes-and-url-encoding-combined-to-bypass-validation-logic;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-64: Using Slashes and URL Encoding Combined to Bypass Validation Logic",
    "description": "",
    "id": "capec-64:-using-slashes-and-url-encoding-combined-to-bypass-validation-logic",
    "keyword": "Feature",
    "uri": "CAPEC_64_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec64"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-64:-using-slashes-and-url-encoding-combined-to-bypass-validation-logic;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-64: Using Slashes and URL Encoding Combined to Bypass Validation Logic",
    "description": "",
    "id": "capec-64:-using-slashes-and-url-encoding-combined-to-bypass-validation-logic",
    "keyword": "Feature",
    "uri": "CAPEC_64_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec64"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-64:-using-slashes-and-url-encoding-combined-to-bypass-validation-logic;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-64: Using Slashes and URL Encoding Combined to Bypass Validation Logic",
    "description": "",
    "id": "capec-64:-using-slashes-and-url-encoding-combined-to-bypass-validation-logic",
    "keyword": "Feature",
    "uri": "CAPEC_64_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec64"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-65:-sniff-application-code;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-65: Sniff Application Code",
    "description": "",
    "id": "capec-65:-sniff-application-code",
    "keyword": "Feature",
    "uri": "CAPEC_65_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec65"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-65:-sniff-application-code;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-65: Sniff Application Code",
    "description": "",
    "id": "capec-65:-sniff-application-code",
    "keyword": "Feature",
    "uri": "CAPEC_65_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec65"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey application",
        "description": "",
        "id": "capec-66:-sql-injection;step1.1-survey-application",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey application(CAPEC_66_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey application in surveyapplication.presurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey application",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey application(CAPEC_66_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey application in surveyapplication.trysurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey application",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey application(CAPEC_66_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey application in surveyapplication.asssurveyapplication()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey application",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-66: SQL Injection",
    "description": "",
    "id": "capec-66:-sql-injection",
    "keyword": "Feature",
    "uri": "CAPEC_66_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec66"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Determine user-controllable input susceptible to injection",
        "description": "",
        "id": "capec-66:-sql-injection;step2.1-determine-user-controllable-input-susceptible-to-injection",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1660899,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.determineusercontrollableinputsusceptibletoinjection.predetermineusercontrollableinputsusceptibletoinjection(determineusercontrollableinputsusceptibletoinjection.java:23)\n\tat ✽.Given prepare to Determine user-controllable input susceptible to injection(CAPEC_66_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.determineusercontrollableinputsusceptibletoinjection.predetermineusercontrollableinputsusceptibletoinjection(determineusercontrollableinputsusceptibletoinjection.java:23)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Determine user-controllable input susceptible to injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoinjection.predetermineusercontrollableinputsusceptibletoinjection()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Determine user-controllable input susceptible to injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoinjection.trydetermineusercontrollableinputsusceptibletoinjection()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine user-controllable input susceptible to injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoinjection.assdetermineusercontrollableinputsusceptibletoinjection()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# alternative application firewall"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-66: SQL Injection",
    "description": "",
    "id": "capec-66:-sql-injection",
    "keyword": "Feature",
    "uri": "CAPEC_66_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec66"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.2 Experiment and try to exploit SQL Injection vulnerability",
        "description": "",
        "id": "capec-66:-sql-injection;step2.2-experiment-and-try-to-exploit-sql-injection-vulnerability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 46040,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Experiment and try to exploit SQL Injection vulnerability",
            "match": {
              "location": "experimentandtrytoexploitsqlinjectionvulnerability.preexperimentandtrytoexploitsqlinjectionvulnerability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5375,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Experiment and try to exploit SQL Injection vulnerability",
            "match": {
              "location": "experimentandtrytoexploitsqlinjectionvulnerability.tryexperimentandtrytoexploitsqlinjectionvulnerability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5226,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Experiment and try to exploit SQL Injection vulnerability",
            "match": {
              "location": "experimentandtrytoexploitsqlinjectionvulnerability.assexperimentandtrytoexploitsqlinjectionvulnerability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-66: SQL Injection",
    "description": "",
    "id": "capec-66:-sql-injection",
    "keyword": "Feature",
    "uri": "CAPEC_66_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec66"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-67:-string-format-overflow-in-syslog();step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-67: String Format Overflow in syslog()",
    "description": "",
    "id": "capec-67:-string-format-overflow-in-syslog()",
    "keyword": "Feature",
    "uri": "CAPEC_67_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec67"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-67:-string-format-overflow-in-syslog();step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-67: String Format Overflow in syslog()",
    "description": "",
    "id": "capec-67:-string-format-overflow-in-syslog()",
    "keyword": "Feature",
    "uri": "CAPEC_67_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec67"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-69:-target-programs-with-elevated-privileges;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-69: Target Programs with Elevated Privileges",
    "description": "",
    "id": "capec-69:-target-programs-with-elevated-privileges",
    "keyword": "Feature",
    "uri": "CAPEC_69_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec69"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-69:-target-programs-with-elevated-privileges;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-69: Target Programs with Elevated Privileges",
    "description": "",
    "id": "capec-69:-target-programs-with-elevated-privileges",
    "keyword": "Feature",
    "uri": "CAPEC_69_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec69"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Discovery of potential injection vectors",
        "description": "",
        "id": "capec-6:-argument-injection;step1.1-discovery-of-potential-injection-vectors",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1563288,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.discoveryofpotentialinjectionvectors.prediscoveryofpotentialinjectionvectors(discoveryofpotentialinjectionvectors.java:17)\n\tat ✽.Given prepare to Discovery of potential injection vectors(CAPEC_6_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.discoveryofpotentialinjectionvectors.prediscoveryofpotentialinjectionvectors(discoveryofpotentialinjectionvectors.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Discovery of potential injection vectors",
            "match": {
              "location": "discoveryofpotentialinjectionvectors.prediscoveryofpotentialinjectionvectors()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Discovery of potential injection vectors",
            "match": {
              "location": "discoveryofpotentialinjectionvectors.trydiscoveryofpotentialinjectionvectors()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Discovery of potential injection vectors",
            "match": {
              "location": "discoveryofpotentialinjectionvectors.assdiscoveryofpotentialinjectionvectors()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-6: Argument Injection",
    "description": "",
    "id": "capec-6:-argument-injection",
    "keyword": "Feature",
    "uri": "CAPEC_6_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec6"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 1. Attempt variations on argument content",
        "description": "",
        "id": "capec-6:-argument-injection;step2.1-1.-attempt-variations-on-argument-content",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 54805,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to 1. Attempt variations on argument content",
            "match": {
              "location": "attemptvariationsonargumentcontent.preattemptvariationsonargumentcontent()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5631,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to 1. Attempt variations on argument content",
            "match": {
              "location": "attemptvariationsonargumentcontent.tryattemptvariationsonargumentcontent()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5321,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of 1. Attempt variations on argument content",
            "match": {
              "location": "attemptvariationsonargumentcontent.assattemptvariationsonargumentcontent()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14475,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3601,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# alternative input guard"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3596,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative application firewall"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-6: Argument Injection",
    "description": "",
    "id": "capec-6:-argument-injection",
    "keyword": "Feature",
    "uri": "CAPEC_6_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec6"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Abuse of the application",
        "description": "",
        "id": "capec-6:-argument-injection;step3.1-abuse-of-the-application",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 39993,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Abuse of the application",
            "match": {
              "location": "abuseoftheapplication.preabuseoftheapplication()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3602,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Abuse of the application",
            "match": {
              "location": "abuseoftheapplication.tryabuseoftheapplication()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4637,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Abuse of the application",
            "match": {
              "location": "abuseoftheapplication.assabuseoftheapplication()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13974,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4110,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# alternative input guard"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3792,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative application firewall"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-6: Argument Injection",
    "description": "",
    "id": "capec-6:-argument-injection",
    "keyword": "Feature",
    "uri": "CAPEC_6_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec6"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey the application for user-controllable inputs",
        "description": "",
        "id": "capec-71:-using-unicode-encoding-to-bypass-validation-logic;step1.1-survey-the-application-for-user-controllable-inputs",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey the application for user-controllable inputs(CAPEC_71_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey the application in surveytheapplication.presurveytheapplication()\n  prepare to Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.presurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey the application for user-controllable inputs(CAPEC_71_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey the application in surveytheapplication.trysurveytheapplication()\n  Try to Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.trysurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey the application for user-controllable inputs(CAPEC_71_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey the application in surveytheapplication.asssurveytheapplication()\n  Assert the success of Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.asssurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-71: Using Unicode Encoding to Bypass Validation Logic",
    "description": "",
    "id": "capec-71:-using-unicode-encoding-to-bypass-validation-logic",
    "keyword": "Feature",
    "uri": "CAPEC_71_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec71"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Probe entry points to locate vulnerabilities",
        "description": "",
        "id": "capec-71:-using-unicode-encoding-to-bypass-validation-logic;step2.1-probe-entry-points-to-locate-vulnerabilities",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 24675,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Probe entry points to locate vulnerabilities",
            "match": {
              "location": "probeentrypointstolocatevulnerabilities.preprobeentrypointstolocatevulnerabilities()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3838,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Probe entry points to locate vulnerabilities",
            "match": {
              "location": "probeentrypointstolocatevulnerabilities.tryprobeentrypointstolocatevulnerabilities()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3380,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe entry points to locate vulnerabilities",
            "match": {
              "location": "probeentrypointstolocatevulnerabilities.assprobeentrypointstolocatevulnerabilities()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 26442,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5721,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# alternative input guard"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6399,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative application firewall"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern pathname canonicalization",
            "match": {
              "location": "PatternSteps.asspathnamecanonicalization()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 15,
                "value": "#"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 17,
                "value": "#"
              }
            ],
            "line": 18,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 19,
                "value": "# depends secure logger"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-71: Using Unicode Encoding to Bypass Validation Logic",
    "description": "",
    "id": "capec-71:-using-unicode-encoding-to-bypass-validation-logic",
    "keyword": "Feature",
    "uri": "CAPEC_71_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec71"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-72:-url-encoding;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-72: URL Encoding",
    "description": "",
    "id": "capec-72:-url-encoding",
    "keyword": "Feature",
    "uri": "CAPEC_72_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec72"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-72:-url-encoding;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-72: URL Encoding",
    "description": "",
    "id": "capec-72:-url-encoding",
    "keyword": "Feature",
    "uri": "CAPEC_72_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec72"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-72:-url-encoding;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-72: URL Encoding",
    "description": "",
    "id": "capec-72:-url-encoding",
    "keyword": "Feature",
    "uri": "CAPEC_72_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec72"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-74:-manipulating-user-state;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-74: Manipulating User State",
    "description": "",
    "id": "capec-74:-manipulating-user-state",
    "keyword": "Feature",
    "uri": "CAPEC_74_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec74"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-74:-manipulating-user-state;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-74: Manipulating User State",
    "description": "",
    "id": "capec-74:-manipulating-user-state",
    "keyword": "Feature",
    "uri": "CAPEC_74_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec74"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-74:-manipulating-user-state;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-74: Manipulating User State",
    "description": "",
    "id": "capec-74:-manipulating-user-state",
    "keyword": "Feature",
    "uri": "CAPEC_74_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec74"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Fingerprinting of the operating system",
        "description": "",
        "id": "capec-76:-manipulating-input-to-file-system-calls;step1.1-fingerprinting-of-the-operating-system",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 57627,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Fingerprinting of the operating system",
            "match": {
              "location": "fingerprintingoftheoperatingsystem.prefingerprintingoftheoperatingsystem()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5134,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Fingerprinting of the operating system",
            "match": {
              "location": "fingerprintingoftheoperatingsystem.tryfingerprintingoftheoperatingsystem()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4378,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Fingerprinting of the operating system",
            "match": {
              "location": "fingerprintingoftheoperatingsystem.assfingerprintingoftheoperatingsystem()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-76: Manipulating Input to File System Calls",
    "description": "",
    "id": "capec-76:-manipulating-input-to-file-system-calls",
    "keyword": "Feature",
    "uri": "CAPEC_76_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec76"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Survey the Application to Identify User-controllable Inputs",
        "description": "",
        "id": "capec-76:-manipulating-input-to-file-system-calls;step1.2-survey-the-application-to-identify-user-controllable-inputs",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey the Application to Identify User-controllable Inputs(CAPEC_76_Step_1_2.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey the Application to Identify User-controllable Inputs in surveytheapplicationtoidentifyusercontrollableinputs.presurveytheapplicationtoidentifyusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the Application to Identify User-controllable Inputs",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey the Application to Identify User-controllable Inputs(CAPEC_76_Step_1_2.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey the Application to Identify User-controllable Inputs in surveytheapplicationtoidentifyusercontrollableinputs.trysurveytheapplicationtoidentifyusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey the Application to Identify User-controllable Inputs",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey the Application to Identify User-controllable Inputs(CAPEC_76_Step_1_2.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey the Application to Identify User-controllable Inputs in surveytheapplicationtoidentifyusercontrollableinputs.asssurveytheapplicationtoidentifyusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the Application to Identify User-controllable Inputs",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-76: Manipulating Input to File System Calls",
    "description": "",
    "id": "capec-76:-manipulating-input-to-file-system-calls",
    "keyword": "Feature",
    "uri": "CAPEC_76_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec76"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Vary inputs, looking for malicious results",
        "description": "",
        "id": "capec-76:-manipulating-input-to-file-system-calls;step2.1-vary-inputs,-looking-for-malicious-results",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to Vary inputs, looking for malicious results",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to Vary inputs, looking for malicious results",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Vary inputs, looking for malicious results",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-76: Manipulating Input to File System Calls",
    "description": "",
    "id": "capec-76:-manipulating-input-to-file-system-calls",
    "keyword": "Feature",
    "uri": "CAPEC_76_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec76"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Manipulate files accessible by the application",
        "description": "",
        "id": "capec-76:-manipulating-input-to-file-system-calls;step3.1-manipulate-files-accessible-by-the-application",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 50611,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Manipulate files accessible by the application",
            "match": {
              "location": "manipulatefilesaccessiblebytheapplication.premanipulatefilesaccessiblebytheapplication()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4165,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Manipulate files accessible by the application",
            "match": {
              "location": "manipulatefilesaccessiblebytheapplication.trymanipulatefilesaccessiblebytheapplication()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3646,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Manipulate files accessible by the application",
            "match": {
              "location": "manipulatefilesaccessiblebytheapplication.assmanipulatefilesaccessiblebytheapplication()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11803,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-76: Manipulating Input to File System Calls",
    "description": "",
    "id": "capec-76:-manipulating-input-to-file-system-calls",
    "keyword": "Feature",
    "uri": "CAPEC_76_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec76"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-77:-manipulating-user-controlled-variables;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-77: Manipulating User-Controlled Variables",
    "description": "",
    "id": "capec-77:-manipulating-user-controlled-variables",
    "keyword": "Feature",
    "uri": "CAPEC_77_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec77"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-77:-manipulating-user-controlled-variables;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-77: Manipulating User-Controlled Variables",
    "description": "",
    "id": "capec-77:-manipulating-user-controlled-variables",
    "keyword": "Feature",
    "uri": "CAPEC_77_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec77"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-77:-manipulating-user-controlled-variables;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-77: Manipulating User-Controlled Variables",
    "description": "",
    "id": "capec-77:-manipulating-user-controlled-variables",
    "keyword": "Feature",
    "uri": "CAPEC_77_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec77"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Experiment"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-78:-using-escaped-slashes-in-alternate-encoding;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-78: Using Escaped Slashes in Alternate Encoding",
    "description": "",
    "id": "capec-78:-using-escaped-slashes-in-alternate-encoding",
    "keyword": "Feature",
    "uri": "CAPEC_78_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec78"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Experiment"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-79:-using-slashes-in-alternate-encoding;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-79: Using Slashes in Alternate Encoding",
    "description": "",
    "id": "capec-79:-using-slashes-in-alternate-encoding",
    "keyword": "Feature",
    "uri": "CAPEC_79_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec79"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Hypothesize SQL queries in application",
        "description": "",
        "id": "capec-7:-blind-sql-injection;step1.1-hypothesize-sql-queries-in-application",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 46012,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Hypothesize SQL queries in application",
            "match": {
              "location": "hypothesizesqlqueriesinapplication.prehypothesizesqlqueriesinapplication()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3918,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Hypothesize SQL queries in application",
            "match": {
              "location": "hypothesizesqlqueriesinapplication.tryhypothesizesqlqueriesinapplication()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6608,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Hypothesize SQL queries in application",
            "match": {
              "location": "hypothesizesqlqueriesinapplication.asshypothesizesqlqueriesinapplication()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-7: Blind SQL Injection",
    "description": "",
    "id": "capec-7:-blind-sql-injection",
    "keyword": "Feature",
    "uri": "CAPEC_7_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec7"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Determine how to inject information into the queries",
        "description": "",
        "id": "capec-7:-blind-sql-injection;step1.2-determine-how-to-inject-information-into-the-queries",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 57722,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine how to inject information into the queries",
            "match": {
              "location": "determinehowtoinjectinformationintothequeries.predeterminehowtoinjectinformationintothequeries()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3776,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine how to inject information into the queries",
            "match": {
              "location": "determinehowtoinjectinformationintothequeries.trydeterminehowtoinjectinformationintothequeries()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2867,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine how to inject information into the queries",
            "match": {
              "location": "determinehowtoinjectinformationintothequeries.assdeterminehowtoinjectinformationintothequeries()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-7: Blind SQL Injection",
    "description": "",
    "id": "capec-7:-blind-sql-injection",
    "keyword": "Feature",
    "uri": "CAPEC_7_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec7"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Determine user-controllable input susceptible to injection",
        "description": "",
        "id": "capec-7:-blind-sql-injection;step2.1-determine-user-controllable-input-susceptible-to-injection",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1335487,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.determineusercontrollableinputsusceptibletoinjection.predetermineusercontrollableinputsusceptibletoinjection(determineusercontrollableinputsusceptibletoinjection.java:23)\n\tat ✽.Given prepare to Determine user-controllable input susceptible to injection(CAPEC_7_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.determineusercontrollableinputsusceptibletoinjection.predetermineusercontrollableinputsusceptibletoinjection(determineusercontrollableinputsusceptibletoinjection.java:23)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Determine user-controllable input susceptible to injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoinjection.predetermineusercontrollableinputsusceptibletoinjection()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Determine user-controllable input susceptible to injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoinjection.trydetermineusercontrollableinputsusceptibletoinjection()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine user-controllable input susceptible to injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoinjection.assdetermineusercontrollableinputsusceptibletoinjection()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 11,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 12,
                "value": "# alternative input guard"
              }
            ],
            "line": 13,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 14,
                "value": "# alternative application firewall"
              }
            ],
            "line": 15,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-7: Blind SQL Injection",
    "description": "",
    "id": "capec-7:-blind-sql-injection",
    "keyword": "Feature",
    "uri": "CAPEC_7_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec7"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.2 Determine database type",
        "description": "",
        "id": "capec-7:-blind-sql-injection;step2.2-determine-database-type",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 56672,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine database type",
            "match": {
              "location": "determinedatabasetype.predeterminedatabasetype()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7565,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine database type",
            "match": {
              "location": "determinedatabasetype.trydeterminedatabasetype()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 18276,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine database type",
            "match": {
              "location": "determinedatabasetype.assdeterminedatabasetype()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-7: Blind SQL Injection",
    "description": "",
    "id": "capec-7:-blind-sql-injection",
    "keyword": "Feature",
    "uri": "CAPEC_7_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec7"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Extract information about database schema",
        "description": "",
        "id": "capec-7:-blind-sql-injection;step3.1-extract-information-about-database-schema",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 59224,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Extract information about database schema",
            "match": {
              "location": "extractinformationaboutdatabaseschema.preextractinformationaboutdatabaseschema()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3798,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Extract information about database schema",
            "match": {
              "location": "extractinformationaboutdatabaseschema.tryextractinformationaboutdatabaseschema()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2842,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Extract information about database schema",
            "match": {
              "location": "extractinformationaboutdatabaseschema.assextractinformationaboutdatabaseschema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-7: Blind SQL Injection",
    "description": "",
    "id": "capec-7:-blind-sql-injection",
    "keyword": "Feature",
    "uri": "CAPEC_7_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec7"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Exploit SQL Injection vulnerability",
        "description": "",
        "id": "capec-7:-blind-sql-injection;step3.2-exploit-sql-injection-vulnerability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 35111,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Exploit SQL Injection vulnerability",
            "match": {
              "location": "exploitsqlinjectionvulnerability.preexploitsqlinjectionvulnerability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4207,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Exploit SQL Injection vulnerability",
            "match": {
              "location": "exploitsqlinjectionvulnerability.tryexploitsqlinjectionvulnerability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3383,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Exploit SQL Injection vulnerability",
            "match": {
              "location": "exploitsqlinjectionvulnerability.assexploitsqlinjectionvulnerability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-7: Blind SQL Injection",
    "description": "",
    "id": "capec-7:-blind-sql-injection",
    "keyword": "Feature",
    "uri": "CAPEC_7_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec7"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey the application for user-controllable inputs",
        "description": "",
        "id": "capec-80:-using-utf-8-encoding-to-bypass-validation-logic;step1.1-survey-the-application-for-user-controllable-inputs",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey the application for user-controllable inputs(CAPEC_80_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey the application in surveytheapplication.presurveytheapplication()\n  prepare to Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.presurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey the application for user-controllable inputs(CAPEC_80_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey the application in surveytheapplication.trysurveytheapplication()\n  Try to Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.trysurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey the application for user-controllable inputs(CAPEC_80_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey the application in surveytheapplication.asssurveytheapplication()\n  Assert the success of Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.asssurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-80: Using UTF-8 Encoding to Bypass Validation Logic",
    "description": "",
    "id": "capec-80:-using-utf-8-encoding-to-bypass-validation-logic",
    "keyword": "Feature",
    "uri": "CAPEC_80_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec80"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Probe entry points to locate vulnerabilities",
        "description": "",
        "id": "capec-80:-using-utf-8-encoding-to-bypass-validation-logic;step2.1-probe-entry-points-to-locate-vulnerabilities",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 36020,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Probe entry points to locate vulnerabilities",
            "match": {
              "location": "probeentrypointstolocatevulnerabilities.preprobeentrypointstolocatevulnerabilities()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3119,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Probe entry points to locate vulnerabilities",
            "match": {
              "location": "probeentrypointstolocatevulnerabilities.tryprobeentrypointstolocatevulnerabilities()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2781,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe entry points to locate vulnerabilities",
            "match": {
              "location": "probeentrypointstolocatevulnerabilities.assprobeentrypointstolocatevulnerabilities()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13681,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3608,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# alternative input guard"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2917,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative application firewall"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern pathname canonicalization",
            "match": {
              "location": "PatternSteps.asspathnamecanonicalization()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 15,
                "value": "#"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 17,
                "value": "#"
              }
            ],
            "line": 18,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 19,
                "value": "# depends secure logger"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-80: Using UTF-8 Encoding to Bypass Validation Logic",
    "description": "",
    "id": "capec-80:-using-utf-8-encoding-to-bypass-validation-logic",
    "keyword": "Feature",
    "uri": "CAPEC_80_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec80"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Determine Application Web Server Log File Format",
        "description": "",
        "id": "capec-81:-web-logs-tampering;step1.1-determine-application-web-server-log-file-format",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 61189,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine Application Web Server Log File Format",
            "match": {
              "location": "determineapplicationwebserverlogfileformat.predetermineapplicationwebserverlogfileformat()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7854,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine Application Web Server Log File Format",
            "match": {
              "location": "determineapplicationwebserverlogfileformat.trydetermineapplicationwebserverlogfileformat()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3571,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine Application Web Server Log File Format",
            "match": {
              "location": "determineapplicationwebserverlogfileformat.assdetermineapplicationwebserverlogfileformat()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-81: Web Logs Tampering",
    "description": "",
    "id": "capec-81:-web-logs-tampering",
    "keyword": "Feature",
    "uri": "CAPEC_81_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec81"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Determine Injectable Content",
        "description": "",
        "id": "capec-81:-web-logs-tampering;step2.1-determine-injectable-content",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 67374,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine Injectable Content",
            "match": {
              "location": "determineinjectablecontent.predetermineinjectablecontent()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5138,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine Injectable Content",
            "match": {
              "location": "determineinjectablecontent.trydetermineinjectablecontent()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4544,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine Injectable Content",
            "match": {
              "location": "determineinjectablecontent.assdetermineinjectablecontent()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-81: Web Logs Tampering",
    "description": "",
    "id": "capec-81:-web-logs-tampering",
    "keyword": "Feature",
    "uri": "CAPEC_81_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec81"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Manipulate Log Files",
        "description": "",
        "id": "capec-81:-web-logs-tampering;step3.1-manipulate-log-files",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 51637,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Manipulate Log Files",
            "match": {
              "location": "manipulatelogfiles.premanipulatelogfiles()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4116,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Manipulate Log Files",
            "match": {
              "location": "manipulatelogfiles.trymanipulatelogfiles()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3886,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Manipulate Log Files",
            "match": {
              "location": "manipulatelogfiles.assmanipulatelogfiles()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14394,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5282,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3771,
              "status": "passed"
            },
            "comments": [
              {
                "line": 12,
                "value": "# alternative output guard"
              },
              {
                "line": 13,
                "value": "# alternative input guard"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4999,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative application firewall"
              },
              {
                "line": 16,
                "value": "# benifits output guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern pathname canonicalization",
            "match": {
              "location": "PatternSteps.asspathnamecanonicalization()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4724,
              "status": "passed"
            },
            "line": 18,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3187,
              "status": "passed"
            },
            "comments": [
              {
                "line": 19,
                "value": "# alternative application firewall"
              },
              {
                "line": 20,
                "value": "# benifits input guard"
              }
            ],
            "line": 21,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-81: Web Logs Tampering",
    "description": "",
    "id": "capec-81:-web-logs-tampering",
    "keyword": "Feature",
    "uri": "CAPEC_81_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec81"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-83:-xpath-injection;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-83: XPath Injection",
    "description": "",
    "id": "capec-83:-xpath-injection",
    "keyword": "Feature",
    "uri": "CAPEC_83_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec83"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-83:-xpath-injection;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-83: XPath Injection",
    "description": "",
    "id": "capec-83:-xpath-injection",
    "keyword": "Feature",
    "uri": "CAPEC_83_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec83"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Survey the application for user-controllable inputs",
        "description": "",
        "id": "capec-84:-xquery-injection;step1.1-survey-the-application-for-user-controllable-inputs",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Given prepare to Survey the application for user-controllable inputs(CAPEC_84_Step_1_1.feature:5) matches more than one step definition:\n  prepare to Survey in survey.presurvey()\n  prepare to Survey the application in surveytheapplication.presurveytheapplication()\n  prepare to Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.presurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.When Try to Survey the application for user-controllable inputs(CAPEC_84_Step_1_1.feature:6) matches more than one step definition:\n  Try to Survey in survey.trysurvey()\n  Try to Survey the application in surveytheapplication.trysurveytheapplication()\n  Try to Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.trysurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "line": 6,
            "name": "Try to Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "error_message": "cucumber.runtime.AmbiguousStepDefinitionsException: ✽.Then Assert the success of Survey the application for user-controllable inputs(CAPEC_84_Step_1_1.feature:8) matches more than one step definition:\n  Assert the success of Survey in survey.asssurvey()\n  Assert the success of Survey the application in surveytheapplication.asssurveytheapplication()\n  Assert the success of Survey the application for user-controllable inputs in surveytheapplicationforusercontrollableinputs.asssurveytheapplicationforusercontrollableinputs()\n\n\tat cucumber.runtime.RuntimeGlue.stepDefinitionMatch(RuntimeGlue.java:71)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:265)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the application for user-controllable inputs",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-84: XQuery Injection",
    "description": "",
    "id": "capec-84:-xquery-injection",
    "keyword": "Feature",
    "uri": "CAPEC_84_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec84"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Determine user-controllable input susceptible to injection",
        "description": "",
        "id": "capec-84:-xquery-injection;step2.1-determine-user-controllable-input-susceptible-to-injection",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1650565,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.determineusercontrollableinputsusceptibletoinjection.predetermineusercontrollableinputsusceptibletoinjection(determineusercontrollableinputsusceptibletoinjection.java:23)\n\tat ✽.Given prepare to Determine user-controllable input susceptible to injection(CAPEC_84_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.determineusercontrollableinputsusceptibletoinjection.predetermineusercontrollableinputsusceptibletoinjection(determineusercontrollableinputsusceptibletoinjection.java:23)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Determine user-controllable input susceptible to injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoinjection.predetermineusercontrollableinputsusceptibletoinjection()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Determine user-controllable input susceptible to injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoinjection.trydetermineusercontrollableinputsusceptibletoinjection()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine user-controllable input susceptible to injection",
            "match": {
              "location": "determineusercontrollableinputsusceptibletoinjection.assdetermineusercontrollableinputsusceptibletoinjection()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# alternative input guard"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-84: XQuery Injection",
    "description": "",
    "id": "capec-84:-xquery-injection",
    "keyword": "Feature",
    "uri": "CAPEC_84_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec84"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Information Disclosure",
        "description": "",
        "id": "capec-84:-xquery-injection;step3.1-information-disclosure",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 71196,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Information Disclosure",
            "match": {
              "location": "informationdisclosure.preinformationdisclosure()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5330,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Information Disclosure",
            "match": {
              "location": "informationdisclosure.tryinformationdisclosure()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5077,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Information Disclosure",
            "match": {
              "location": "informationdisclosure.assinformationdisclosure()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13388,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5402,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5205,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5374,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative input guard"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-84: XQuery Injection",
    "description": "",
    "id": "capec-84:-xquery-injection",
    "keyword": "Feature",
    "uri": "CAPEC_84_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec84"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Manipulate the data in the XML database",
        "description": "",
        "id": "capec-84:-xquery-injection;step3.2-manipulate-the-data-in-the-xml-database",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 55304,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Manipulate the data in the XML database",
            "match": {
              "location": "manipulatethedatainthexmldatabase.premanipulatethedatainthexmldatabase()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5017,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Manipulate the data in the XML database",
            "match": {
              "location": "manipulatethedatainthexmldatabase.trymanipulatethedatainthexmldatabase()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4494,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Manipulate the data in the XML database",
            "match": {
              "location": "manipulatethedatainthexmldatabase.assmanipulatethedatainthexmldatabase()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15706,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4691,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4349,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5940,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative input guard"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-84: XQuery Injection",
    "description": "",
    "id": "capec-84:-xquery-injection",
    "keyword": "Feature",
    "uri": "CAPEC_84_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec84"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Spider",
        "description": "",
        "id": "capec-86:-embedding-script-(xss)-in-http-headers;step1.1-spider",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1406259,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat ✽.Given prepare to Spider(CAPEC_86_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Spider",
            "match": {
              "location": "spider.prespider()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Spider",
            "match": {
              "location": "spider.tryspider()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Spider",
            "match": {
              "location": "spider.assspider()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-86: Embedding Script (XSS) in HTTP Headers",
    "description": "",
    "id": "capec-86:-embedding-script-(xss)-in-http-headers",
    "keyword": "Feature",
    "uri": "CAPEC_86_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec86"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Probe identified potential entry points for XSS vulnerability",
        "description": "",
        "id": "capec-86:-embedding-script-(xss)-in-http-headers;step2.1-probe-identified-potential-entry-points-for-xss-vulnerability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1579551,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability(probeidentifiedpotentialentrypointsforxssvulnerability.java:15)\n\tat ✽.Given prepare to Probe identified potential entry points for XSS vulnerability(CAPEC_86_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability(probeidentifiedpotentialentrypointsforxssvulnerability.java:15)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.tryprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.assprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative input guard"
              }
            ],
            "line": 16,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-86: Embedding Script (XSS) in HTTP Headers",
    "description": "",
    "id": "capec-86:-embedding-script-(xss)-in-http-headers",
    "keyword": "Feature",
    "uri": "CAPEC_86_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec86"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Steal session IDs, credentials, page content, etc.",
        "description": "",
        "id": "capec-86:-embedding-script-(xss)-in-http-headers;step3.1-steal-session-ids,-credentials,-page-content,-etc.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 23801,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.prestealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3529,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.trystealsessionidscredentialspagecontentetc()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3040,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.assstealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9982,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3617,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3547,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3043,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3196,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3131,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-86: Embedding Script (XSS) in HTTP Headers",
    "description": "",
    "id": "capec-86:-embedding-script-(xss)-in-http-headers",
    "keyword": "Feature",
    "uri": "CAPEC_86_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec86"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Forceful browsing",
        "description": "",
        "id": "capec-86:-embedding-script-(xss)-in-http-headers;step3.2-forceful-browsing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16329,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.preforcefulbrowsing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3365,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.tryforcefulbrowsing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2969,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.assforcefulbrowsing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8360,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3545,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3247,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2886,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2958,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3199,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-86: Embedding Script (XSS) in HTTP Headers",
    "description": "",
    "id": "capec-86:-embedding-script-(xss)-in-http-headers",
    "keyword": "Feature",
    "uri": "CAPEC_86_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec86"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.3 Content spoofing",
        "description": "",
        "id": "capec-86:-embedding-script-(xss)-in-http-headers;step3.3-content-spoofing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 40846,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Content spoofing",
            "match": {
              "location": "contentspoofing.precontentspoofing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5001,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Content spoofing",
            "match": {
              "location": "contentspoofing.trycontentspoofing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6599,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Content spoofing",
            "match": {
              "location": "contentspoofing.asscontentspoofing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16888,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6414,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4197,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4984,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4312,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5245,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-86: Embedding Script (XSS) in HTTP Headers",
    "description": "",
    "id": "capec-86:-embedding-script-(xss)-in-http-headers",
    "keyword": "Feature",
    "uri": "CAPEC_86_Step_3_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec86"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Spider",
        "description": "",
        "id": "capec-87:-forceful-browsing;step1.1-spider",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1449959,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat ✽.Given prepare to Spider(CAPEC_87_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Spider",
            "match": {
              "location": "spider.prespider()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Spider",
            "match": {
              "location": "spider.tryspider()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Spider",
            "match": {
              "location": "spider.assspider()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-87: Forceful Browsing",
    "description": "",
    "id": "capec-87:-forceful-browsing",
    "keyword": "Feature",
    "uri": "CAPEC_87_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec87"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Attempt well-known or guessable resource locations",
        "description": "",
        "id": "capec-87:-forceful-browsing;step2.1-attempt-well-known-or-guessable-resource-locations",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 50112,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Attempt well-known or guessable resource locations",
            "match": {
              "location": "attemptwellknownorguessableresourcelocations.preattemptwellknownorguessableresourcelocations()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3795,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Attempt well-known or guessable resource locations",
            "match": {
              "location": "attemptwellknownorguessableresourcelocations.tryattemptwellknownorguessableresourcelocations()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3154,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Attempt well-known or guessable resource locations",
            "match": {
              "location": "attemptwellknownorguessableresourcelocations.assattemptwellknownorguessableresourcelocations()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9215,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 11,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "#"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-87: Forceful Browsing",
    "description": "",
    "id": "capec-87:-forceful-browsing",
    "keyword": "Feature",
    "uri": "CAPEC_87_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec87"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Use unauthorized resources",
        "description": "",
        "id": "capec-87:-forceful-browsing;step3.1-use-unauthorized-resources",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 45144,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Use unauthorized resources",
            "match": {
              "location": "useunauthorizedresources.preuseunauthorizedresources()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3705,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Use unauthorized resources",
            "match": {
              "location": "useunauthorizedresources.tryuseunauthorizedresources()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3752,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Use unauthorized resources",
            "match": {
              "location": "useunauthorizedresources.assuseunauthorizedresources()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11475,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-87: Forceful Browsing",
    "description": "",
    "id": "capec-87:-forceful-browsing",
    "keyword": "Feature",
    "uri": "CAPEC_87_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec87"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 View unauthorized data",
        "description": "",
        "id": "capec-87:-forceful-browsing;step3.2-view-unauthorized-data",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 35879,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to View unauthorized data",
            "match": {
              "location": "viewunauthorizeddata.previewunauthorizeddata()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6134,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to View unauthorized data",
            "match": {
              "location": "viewunauthorizeddata.tryviewunauthorizeddata()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4472,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of View unauthorized data",
            "match": {
              "location": "viewunauthorizeddata.assviewunauthorizeddata()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-87: Forceful Browsing",
    "description": "",
    "id": "capec-87:-forceful-browsing",
    "keyword": "Feature",
    "uri": "CAPEC_87_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec87"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Identify inputs for OS commands",
        "description": "",
        "id": "capec-88:-os-command-injection;step1.1-identify-inputs-for-os-commands",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1306183,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.identifyinputsforoscommands.preidentifyinputsforoscommands(identifyinputsforoscommands.java:16)\n\tat ✽.Given prepare to Identify inputs for OS commands(CAPEC_88_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.identifyinputsforoscommands.preidentifyinputsforoscommands(identifyinputsforoscommands.java:16)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Identify inputs for OS commands",
            "match": {
              "location": "identifyinputsforoscommands.preidentifyinputsforoscommands()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Identify inputs for OS commands",
            "match": {
              "location": "identifyinputsforoscommands.tryidentifyinputsforoscommands()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Identify inputs for OS commands",
            "match": {
              "location": "identifyinputsforoscommands.assidentifyinputsforoscommands()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-88: OS Command Injection",
    "description": "",
    "id": "capec-88:-os-command-injection",
    "keyword": "Feature",
    "uri": "CAPEC_88_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec88"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Survey the Application",
        "description": "",
        "id": "capec-88:-os-command-injection;step1.2-survey-the-application",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1356650,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.survey.presurvey(survey.java:17)\n\tat ✽.Given prepare to Survey the Application(CAPEC_88_Step_1_2.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.survey.presurvey(survey.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Survey the Application",
            "match": {
              "location": "survey.presurvey()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Survey the Application",
            "match": {
              "location": "survey.trysurvey()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Survey the Application",
            "match": {
              "location": "survey.asssurvey()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-88: OS Command Injection",
    "description": "",
    "id": "capec-88:-os-command-injection",
    "keyword": "Feature",
    "uri": "CAPEC_88_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec88"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Vary inputs, looking for malicious results.",
        "description": "",
        "id": "capec-88:-os-command-injection;step2.1-vary-inputs,-looking-for-malicious-results.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1440720,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.varyinputslookingformaliciousresults.prevaryinputslookingformaliciousresults(varyinputslookingformaliciousresults.java:15)\n\tat ✽.Given prepare to Vary inputs, looking for malicious results.(CAPEC_88_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.varyinputslookingformaliciousresults.prevaryinputslookingformaliciousresults(varyinputslookingformaliciousresults.java:15)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Vary inputs, looking for malicious results.",
            "match": {
              "location": "varyinputslookingformaliciousresults.prevaryinputslookingformaliciousresults()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Vary inputs, looking for malicious results.",
            "match": {
              "location": "varyinputslookingformaliciousresults.tryvaryinputslookingformaliciousresults()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Vary inputs, looking for malicious results.",
            "match": {
              "location": "varyinputslookingformaliciousresults.assvaryinputslookingformaliciousresults()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-88: OS Command Injection",
    "description": "",
    "id": "capec-88:-os-command-injection",
    "keyword": "Feature",
    "uri": "CAPEC_88_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec88"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Execute malicious commands",
        "description": "",
        "id": "capec-88:-os-command-injection;step3.1-execute-malicious-commands",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 44207,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Execute malicious commands",
            "match": {
              "location": "executemaliciouscommands.preexecutemaliciouscommands()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3745,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Execute malicious commands",
            "match": {
              "location": "executemaliciouscommands.tryexecutemaliciouscommands()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3313,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Execute malicious commands",
            "match": {
              "location": "executemaliciouscommands.assexecutemaliciouscommands()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10558,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-88: OS Command Injection",
    "description": "",
    "id": "capec-88:-os-command-injection",
    "keyword": "Feature",
    "uri": "CAPEC_88_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec88"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Exploit"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-89:-pharming;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-89: Pharming",
    "description": "",
    "id": "capec-89:-pharming",
    "keyword": "Feature",
    "uri": "CAPEC_89_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec89"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Experiment"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-8:-buffer-overflow-in-an-api-call;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-8: Buffer Overflow in an API Call",
    "description": "",
    "id": "capec-8:-buffer-overflow-in-an-api-call",
    "keyword": "Feature",
    "uri": "CAPEC_8_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec8"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-8:-buffer-overflow-in-an-api-call;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-8: Buffer Overflow in an API Call",
    "description": "",
    "id": "capec-8:-buffer-overflow-in-an-api-call",
    "keyword": "Feature",
    "uri": "CAPEC_8_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec8"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Experiment"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-90:-reflection-attack-in-authentication-protocol;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-90: Reflection Attack in Authentication Protocol",
    "description": "",
    "id": "capec-90:-reflection-attack-in-authentication-protocol",
    "keyword": "Feature",
    "uri": "CAPEC_90_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec90"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Spider",
        "description": "",
        "id": "capec-91:-xss-in-img-tags;step1.1-spider",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1353034,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat ✽.Given prepare to Spider(CAPEC_91_Step_1_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.spider.prespider(spider.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Spider",
            "match": {
              "location": "spider.prespider()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Spider",
            "match": {
              "location": "spider.tryspider()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Spider",
            "match": {
              "location": "spider.assspider()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 11,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 12,
                "value": "# alternative output guard"
              },
              {
                "line": 13,
                "value": "# alternative input guard"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative application firewall"
              },
              {
                "line": 16,
                "value": "# benifits output guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern pathname canonicalization",
            "match": {
              "location": "PatternSteps.asspathnamecanonicalization()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 18,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 19,
                "value": "# alternative application firewall"
              },
              {
                "line": 20,
                "value": "# benifits input guard"
              }
            ],
            "line": 21,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-91: XSS in IMG Tags",
    "description": "",
    "id": "capec-91:-xss-in-img-tags",
    "keyword": "Feature",
    "uri": "CAPEC_91_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec91"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1 Probe identified potential entry points for XSS vulnerability",
        "description": "",
        "id": "capec-91:-xss-in-img-tags;step2.1-probe-identified-potential-entry-points-for-xss-vulnerability",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2129180,
              "error_message": "net.continuumsecurity.proxy.ProxyException: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:96)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability(probeidentifiedpotentialentrypointsforxssvulnerability.java:15)\n\tat ✽.Given prepare to Probe identified potential entry points for XSS vulnerability(CAPEC_91_Step_2_1.feature:5)\nCaused by: org.zaproxy.clientapi.core.ClientApiException: java.net.ConnectException: Connection refused\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:307)\n\tat org.zaproxy.clientapi.core.ClientApi.callApi(ClientApi.java:289)\n\tat org.zaproxy.clientapi.gen.Core.version(Core.java:158)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.validateMinimumRequiredZapVersion(ZAProxyScanner.java:85)\n\tat net.continuumsecurity.proxy.ZAProxyScanner.\u003cinit\u003e(ZAProxyScanner.java:38)\n\tat steps.probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability(probeidentifiedpotentialentrypointsforxssvulnerability.java:15)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:37)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:13)\n\tat cucumber.runtime.Utils.invoke(Utils.java:31)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:37)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat cucumber.runtime.Runtime.runStep(Runtime.java:298)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:48)\n\tat cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat cucumber.api.junit.Cucumber.run(Cucumber.java:98)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:484)\n\tat sun.net.www.http.HttpClient$1.run(HttpClient.java:482)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.http.HttpClient.privilegedOpenServer(HttpClient.java:481)\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:522)\n\tat sun.net.www.http.HttpClient.\u003cinit\u003e(HttpClient.java:211)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1169)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1148)\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:999)\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:933)\n\tat org.zaproxy.clientapi.core.ClientApi.getConnectionInputStream(ClientApi.java:313)\n\tat org.zaproxy.clientapi.core.ClientApi.callApiDom(ClientApi.java:305)\n\t... 44 more\n",
              "status": "failed"
            },
            "line": 5,
            "name": "prepare to Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.preprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 6,
            "name": "Try to Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.tryprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Probe identified potential entry points for XSS vulnerability",
            "match": {
              "location": "probeidentifiedpotentialentrypointsforxssvulnerability.assprobeidentifiedpotentialentrypointsforxssvulnerability()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# alternative output guard"
              },
              {
                "line": 14,
                "value": "# alternative input guard"
              }
            ],
            "line": 15,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 16,
                "value": "# alternative application firewall"
              },
              {
                "line": 17,
                "value": "# benifits output guard"
              }
            ],
            "line": 18,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 19,
                "value": "# alternative application firewall"
              },
              {
                "line": 20,
                "value": "# benifits input guard"
              }
            ],
            "line": 21,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 22,
                "value": "# alternative output guard"
              },
              {
                "line": 23,
                "value": "# impairs audit interceptor"
              }
            ],
            "line": 24,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-91: XSS in IMG Tags",
    "description": "",
    "id": "capec-91:-xss-in-img-tags",
    "keyword": "Feature",
    "uri": "CAPEC_91_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec91"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1 Steal session IDs, credentials, page content, etc.",
        "description": "",
        "id": "capec-91:-xss-in-img-tags;step3.1-steal-session-ids,-credentials,-page-content,-etc.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27963,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.prestealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5970,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.trystealsessionidscredentialspagecontentetc()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3678,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Steal session IDs, credentials, page content, etc.",
            "match": {
              "location": "stealsessionidscredentialspagecontentetc.assstealsessionidscredentialspagecontentetc()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17680,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4052,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3780,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3676,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3631,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3340,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-91: XSS in IMG Tags",
    "description": "",
    "id": "capec-91:-xss-in-img-tags",
    "keyword": "Feature",
    "uri": "CAPEC_91_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec91"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.2 Forceful browsing",
        "description": "",
        "id": "capec-91:-xss-in-img-tags;step3.2-forceful-browsing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 26219,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.preforcefulbrowsing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3899,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.tryforcefulbrowsing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3465,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Forceful browsing",
            "match": {
              "location": "forcefulbrowsing.assforcefulbrowsing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16460,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4081,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3727,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3099,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3104,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3078,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-91: XSS in IMG Tags",
    "description": "",
    "id": "capec-91:-xss-in-img-tags",
    "keyword": "Feature",
    "uri": "CAPEC_91_Step_3_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec91"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.3 Content spoofing",
        "description": "",
        "id": "capec-91:-xss-in-img-tags;step3.3-content-spoofing",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 22298,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Content spoofing",
            "match": {
              "location": "contentspoofing.precontentspoofing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3455,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Content spoofing",
            "match": {
              "location": "contentspoofing.trycontentspoofing()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2858,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Content spoofing",
            "match": {
              "location": "contentspoofing.asscontentspoofing()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9732,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3697,
              "status": "passed"
            },
            "comments": [
              {
                "line": 11,
                "value": "# depends secure logger"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3274,
              "status": "passed"
            },
            "comments": [
              {
                "line": 13,
                "value": "# benifits audit interceptor"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3005,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative output guard"
              },
              {
                "line": 16,
                "value": "# alternative input guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3202,
              "status": "passed"
            },
            "comments": [
              {
                "line": 18,
                "value": "# alternative application firewall"
              },
              {
                "line": 19,
                "value": "# benifits output guard"
              }
            ],
            "line": 20,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2968,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# alternative application firewall"
              },
              {
                "line": 22,
                "value": "# benifits input guard"
              }
            ],
            "line": 23,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-91: XSS in IMG Tags",
    "description": "",
    "id": "capec-91:-xss-in-img-tags",
    "keyword": "Feature",
    "uri": "CAPEC_91_Step_3_3.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec91"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-92:-forced-integer-overflow;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-92: Forced Integer Overflow",
    "description": "",
    "id": "capec-92:-forced-integer-overflow",
    "keyword": "Feature",
    "uri": "CAPEC_92_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec92"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-92:-forced-integer-overflow;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-92: Forced Integer Overflow",
    "description": "",
    "id": "capec-92:-forced-integer-overflow",
    "keyword": "Feature",
    "uri": "CAPEC_92_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec92"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-92:-forced-integer-overflow;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-92: Forced Integer Overflow",
    "description": "",
    "id": "capec-92:-forced-integer-overflow",
    "keyword": "Feature",
    "uri": "CAPEC_92_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec92"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Determine Application\u0027s Log File Format",
        "description": "",
        "id": "capec-93:-log-injection-tampering-forging;step1.1-determine-application\u0027s-log-file-format",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 52870,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Determine Application\u0027s Log File Format",
            "match": {
              "location": "determineapplicationslogfileformat.predetermineapplicationslogfileformat()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3998,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Determine Application\u0027s Log File Format",
            "match": {
              "location": "determineapplicationslogfileformat.trydetermineapplicationslogfileformat()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3387,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Determine Application\u0027s Log File Format",
            "match": {
              "location": "determineapplicationslogfileformat.assdetermineapplicationslogfileformat()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-93: Log Injection-Tampering-Forging",
    "description": "",
    "id": "capec-93:-log-injection-tampering-forging",
    "keyword": "Feature",
    "uri": "CAPEC_93_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec93"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Manipulate Log Files",
        "description": "",
        "id": "capec-93:-log-injection-tampering-forging;step2.1-manipulate-log-files",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 24759,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Manipulate Log Files",
            "match": {
              "location": "manipulatelogfiles.premanipulatelogfiles()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3595,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Manipulate Log Files",
            "match": {
              "location": "manipulatelogfiles.trymanipulatelogfiles()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3437,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Manipulate Log Files",
            "match": {
              "location": "manipulatelogfiles.assmanipulatelogfiles()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10018,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4083,
              "status": "passed"
            },
            "line": 11,
            "name": "assert the consequences of the pattern application firewall",
            "match": {
              "location": "PatternSteps.assapplicationfirewall()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3293,
              "status": "passed"
            },
            "comments": [
              {
                "line": 12,
                "value": "# alternative output guard"
              },
              {
                "line": 13,
                "value": "# alternative input guard"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern input guard",
            "match": {
              "location": "PatternSteps.assinputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3293,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "# alternative application firewall"
              },
              {
                "line": 16,
                "value": "# benifits output guard"
              }
            ],
            "line": 17,
            "name": "assert the consequences of the pattern pathname canonicalization",
            "match": {
              "location": "PatternSteps.asspathnamecanonicalization()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4300,
              "status": "passed"
            },
            "line": 18,
            "name": "assert the consequences of the pattern output guard",
            "match": {
              "location": "PatternSteps.assoutputguard()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3944,
              "status": "passed"
            },
            "comments": [
              {
                "line": 19,
                "value": "# alternative application firewall"
              },
              {
                "line": 20,
                "value": "# benifits input guard"
              }
            ],
            "line": 21,
            "name": "assert the consequences of the pattern comparator checked fault tolerant system",
            "match": {
              "location": "PatternSteps.asscomparatorcheckedfaulttolerantsystem()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-93: Log Injection-Tampering-Forging",
    "description": "",
    "id": "capec-93:-log-injection-tampering-forging",
    "keyword": "Feature",
    "uri": "CAPEC_93_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec93"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Experiment"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-94:-man-in-the-middle-attack;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-94: Man in the Middle Attack",
    "description": "",
    "id": "capec-94:-man-in-the-middle-attack",
    "keyword": "Feature",
    "uri": "CAPEC_94_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec94"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-94:-man-in-the-middle-attack;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-94: Man in the Middle Attack",
    "description": "",
    "id": "capec-94:-man-in-the-middle-attack",
    "keyword": "Feature",
    "uri": "CAPEC_94_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec94"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-95:-wsdl-scanning;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-95: WSDL Scanning",
    "description": "",
    "id": "capec-95:-wsdl-scanning",
    "keyword": "Feature",
    "uri": "CAPEC_95_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec95"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-95:-wsdl-scanning;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-95: WSDL Scanning",
    "description": "",
    "id": "capec-95:-wsdl-scanning",
    "keyword": "Feature",
    "uri": "CAPEC_95_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec95"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-95:-wsdl-scanning;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-95: WSDL Scanning",
    "description": "",
    "id": "capec-95:-wsdl-scanning",
    "keyword": "Feature",
    "uri": "CAPEC_95_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec95"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-96:-block-access-to-libraries;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-96: Block Access to Libraries",
    "description": "",
    "id": "capec-96:-block-access-to-libraries",
    "keyword": "Feature",
    "uri": "CAPEC_96_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec96"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-96:-block-access-to-libraries;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-96: Block Access to Libraries",
    "description": "",
    "id": "capec-96:-block-access-to-libraries",
    "keyword": "Feature",
    "uri": "CAPEC_96_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec96"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-97:-cryptanalysis;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-97: Cryptanalysis",
    "description": "",
    "id": "capec-97:-cryptanalysis",
    "keyword": "Feature",
    "uri": "CAPEC_97_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec97"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-97:-cryptanalysis;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-97: Cryptanalysis",
    "description": "",
    "id": "capec-97:-cryptanalysis",
    "keyword": "Feature",
    "uri": "CAPEC_97_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec97"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1 Obtain domain name and certificate to spoof legitimate site",
        "description": "",
        "id": "capec-98:-phishing;step1.1-obtain-domain-name-and-certificate-to-spoof-legitimate-site",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 88426,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Obtain domain name and certificate to spoof legitimate site",
            "match": {
              "location": "obtaindomainnameandcertificatetospooflegitimatesite.preobtaindomainnameandcertificatetospooflegitimatesite()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6097,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Obtain domain name and certificate to spoof legitimate site",
            "match": {
              "location": "obtaindomainnameandcertificatetospooflegitimatesite.tryobtaindomainnameandcertificatetospooflegitimatesite()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4765,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Obtain domain name and certificate to spoof legitimate site",
            "match": {
              "location": "obtaindomainnameandcertificatetospooflegitimatesite.assobtaindomainnameandcertificatetospooflegitimatesite()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-98: Phishing",
    "description": "",
    "id": "capec-98:-phishing",
    "keyword": "Feature",
    "uri": "CAPEC_98_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec98"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.2 Explore legitimate website and create duplicate",
        "description": "",
        "id": "capec-98:-phishing;step1.2-explore-legitimate-website-and-create-duplicate",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 84510,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Explore legitimate website and create duplicate",
            "match": {
              "location": "explorelegitimatewebsiteandcreateduplicate.preexplorelegitimatewebsiteandcreateduplicate()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7254,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Explore legitimate website and create duplicate",
            "match": {
              "location": "explorelegitimatewebsiteandcreateduplicate.tryexplorelegitimatewebsiteandcreateduplicate()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5776,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Explore legitimate website and create duplicate",
            "match": {
              "location": "explorelegitimatewebsiteandcreateduplicate.assexplorelegitimatewebsiteandcreateduplicate()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-98: Phishing",
    "description": "",
    "id": "capec-98:-phishing",
    "keyword": "Feature",
    "uri": "CAPEC_98_Step_1_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec98"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.1 Convince user to enter sensitive information on attacker\u0027s site.",
        "description": "",
        "id": "capec-98:-phishing;step2.1-convince-user-to-enter-sensitive-information-on-attacker\u0027s-site.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 30489,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Convince user to enter sensitive information on attacker\u0027s site.",
            "match": {
              "location": "convinceusertoentersensitiveinformationonattackerssite.preconvinceusertoentersensitiveinformationonattackerssite()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3715,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Convince user to enter sensitive information on attacker\u0027s site.",
            "match": {
              "location": "convinceusertoentersensitiveinformationonattackerssite.tryconvinceusertoentersensitiveinformationonattackerssite()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3738,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Convince user to enter sensitive information on attacker\u0027s site.",
            "match": {
              "location": "convinceusertoentersensitiveinformationonattackerssite.assconvinceusertoentersensitiveinformationonattackerssite()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12207,
              "status": "passed"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-98: Phishing",
    "description": "",
    "id": "capec-98:-phishing",
    "keyword": "Feature",
    "uri": "CAPEC_98_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec98"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Exploit"
          }
        ],
        "line": 4,
        "name": "Step2.2 Use stolen credentials to log into legitimate site",
        "description": "",
        "id": "capec-98:-phishing;step2.2-use-stolen-credentials-to-log-into-legitimate-site",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13197,
              "status": "passed"
            },
            "line": 5,
            "name": "prepare to Use stolen credentials to log into legitimate site",
            "match": {
              "location": "usestolencredentialstologintolegitimatesite.preusestolencredentialstologintolegitimatesite()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3362,
              "status": "passed"
            },
            "line": 6,
            "name": "Try to Use stolen credentials to log into legitimate site",
            "match": {
              "location": "usestolencredentialstologintolegitimatesite.tryusestolencredentialstologintolegitimatesite()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3369,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of Use stolen credentials to log into legitimate site",
            "match": {
              "location": "usestolencredentialstologintolegitimatesite.assusestolencredentialstologintolegitimatesite()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-98: Phishing",
    "description": "",
    "id": "capec-98:-phishing",
    "keyword": "Feature",
    "uri": "CAPEC_98_Step_2_2.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec98"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-99:-xml-parser-attack;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-99: XML Parser Attack",
    "description": "",
    "id": "capec-99:-xml-parser-attack",
    "keyword": "Feature",
    "uri": "CAPEC_99_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec99"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-99:-xml-parser-attack;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-99: XML Parser Attack",
    "description": "",
    "id": "capec-99:-xml-parser-attack",
    "keyword": "Feature",
    "uri": "CAPEC_99_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec99"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#1. Explore"
          }
        ],
        "line": 4,
        "name": "Step1.1",
        "description": "",
        "id": "capec-9:-buffer-overflow-in-local-command-line-utilities;step1.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-9: Buffer Overflow in Local Command-Line Utilities",
    "description": "",
    "id": "capec-9:-buffer-overflow-in-local-command-line-utilities",
    "keyword": "Feature",
    "uri": "CAPEC_9_Step_1_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec9"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#2. Experiment"
          }
        ],
        "line": 4,
        "name": "Step2.1",
        "description": "",
        "id": "capec-9:-buffer-overflow-in-local-command-line-utilities;step2.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-9: Buffer Overflow in Local Command-Line Utilities",
    "description": "",
    "id": "capec-9:-buffer-overflow-in-local-command-line-utilities",
    "keyword": "Feature",
    "uri": "CAPEC_9_Step_2_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec9"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 3,
            "value": "#3. Exploit"
          }
        ],
        "line": 4,
        "name": "Step3.1",
        "description": "",
        "id": "capec-9:-buffer-overflow-in-local-command-line-utilities;step3.1",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "undefined"
            },
            "line": 5,
            "name": "prepare to",
            "match": {},
            "keyword": "Given "
          },
          {
            "result": {
              "status": "undefined"
            },
            "line": 6,
            "name": "Try to",
            "match": {},
            "keyword": "When "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 7,
                "value": "# assertion for attack step success"
              }
            ],
            "line": 8,
            "name": "Assert the success of",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "undefined"
            },
            "comments": [
              {
                "line": 9,
                "value": "#assertions for security pattern testing (checker whether the pattern consequences are observed)"
              }
            ],
            "line": 10,
            "name": "assert the consequences of the pattern",
            "match": {},
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 11,
                "value": "#"
              }
            ],
            "line": 12,
            "name": "assert the consequences of the pattern audit interceptor",
            "match": {
              "location": "PatternSteps.assauditinterceptor()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 13,
                "value": "# depends secure logger"
              }
            ],
            "line": 14,
            "name": "assert the consequences of the pattern secure logger",
            "match": {
              "location": "PatternSteps.asssecurelogger()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "CAPEC-9: Buffer Overflow in Local Command-Line Utilities",
    "description": "",
    "id": "capec-9:-buffer-overflow-in-local-command-line-utilities",
    "keyword": "Feature",
    "uri": "CAPEC_9_Step_3_1.feature",
    "tags": [
      {
        "line": 1,
        "name": "@capec9"
      }
    ]
  }
]